<?php



/**
 * This class defines the structure of the 'requerimiento' table.
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan 26 12:36:05 2018
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.lib.model.map
 */
class RequerimientoTableMap extends TableMap
{

    /**
     * The (dot-path) name of this class
     */
    const CLASS_NAME = 'lib.model.map.RequerimientoTableMap';

    /**
     * Initialize the table attributes, columns and validators
     * Relations are not initialized by this method since they are lazy loaded
     *
     * @return void
     * @throws PropelException
     */
    public function initialize()
    {
        // attributes
        $this->setName('requerimiento');
        $this->setPhpName('Requerimiento');
        $this->setClassname('Requerimiento');
        $this->setPackage('lib.model');
        $this->setUseIdGenerator(true);
        // columns
        $this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
        $this->addColumn('TIPO_OPERACION', 'TipoOperacion', 'VARCHAR', false, 32, null);
        $this->addColumn('TIPO_INMUEBLE', 'TipoInmueble', 'VARCHAR', false, 32, null);
        $this->addColumn('CANTIDAD_HABITACION', 'CantidadHabitacion', 'INTEGER', false, null, null);
        $this->addColumn('CANTIDAD_BANIO', 'CantidadBanio', 'DOUBLE', false, null, null);
        $this->addColumn('CANTIDAD_PARQUEO', 'CantidadParqueo', 'INTEGER', false, null, null);
        $this->addColumn('CANTIDAD_COMEDOR', 'CantidadComedor', 'INTEGER', false, null, null);
        $this->addColumn('CANTIDAD_SALA', 'CantidadSala', 'INTEGER', false, null, null);
        $this->addColumn('CANTIDAD_COCINA', 'CantidadCocina', 'INTEGER', false, null, null);
        $this->addColumn('DORMITORIO_SERVICIO', 'DormitorioServicio', 'BOOLEAN', false, 1, false);
        $this->addColumn('ESTUDIO', 'Estudio', 'BOOLEAN', false, 1, false);
        $this->addColumn('CISTERNA', 'Cisterna', 'BOOLEAN', false, 1, false);
        $this->addColumn('CANTIDAD_JARDIN', 'CantidadJardin', 'INTEGER', false, null, null);
        $this->addColumn('CANTIDAD_PATIO', 'CantidadPatio', 'INTEGER', false, null, null);
        $this->addColumn('LAVANDERIA', 'Lavanderia', 'BOOLEAN', false, 1, false);
        $this->addColumn('TIENE_LUZ', 'TieneLuz', 'BOOLEAN', false, 1, false);
        $this->addColumn('TIENE_AGUA', 'TieneAgua', 'BOOLEAN', false, 1, false);
        $this->addColumn('NIVELES', 'Niveles', 'INTEGER', false, null, null);
        $this->addColumn('AREA', 'Area', 'DOUBLE', false, null, null);
        $this->addColumn('AREA_X', 'AreaX', 'DOUBLE', false, null, null);
        $this->addColumn('AREA_Y', 'AreaY', 'DOUBLE', false, null, null);
        $this->addColumn('ESTADO', 'Estado', 'VARCHAR', false, 32, null);
        $this->addColumn('AMENIDADES', 'Amenidades', 'VARCHAR', false, 255, null);
        $this->addForeignKey('MONEDA_ID', 'MonedaId', 'INTEGER', 'moneda', 'ID', true, null, null);
        $this->addColumn('FORMA_PAGO', 'FormaPago', 'VARCHAR', false, 255, null);
        $this->addColumn('PRESUPUESTO_MIN', 'PresupuestoMin', 'DOUBLE', false, null, null);
        $this->addColumn('PRESUPUESTO_MAX', 'PresupuestoMax', 'DOUBLE', false, null, null);
        $this->addColumn('NOMBRE_CLIENTE', 'NombreCliente', 'VARCHAR', false, 255, null);
        $this->addColumn('CORREO_CLIENTE', 'CorreoCliente', 'VARCHAR', false, 255, null);
        $this->addColumn('TELEFONO_CLIENTE', 'TelefonoCliente', 'VARCHAR', false, 25, null);
        $this->addColumn('ESTATUS', 'Estatus', 'VARCHAR', false, 25, 'Disponible');
        $this->addColumn('PRECALIFICACION', 'Precalificacion', 'BOOLEAN', false, 1, null);
        $this->addColumn('NUCLEO_FAMILIAR', 'NucleoFamiliar', 'INTEGER', false, null, null);
        $this->addColumn('INGRESOS', 'Ingresos', 'DOUBLE', false, null, null);
        $this->addColumn('EGRESOS', 'Egresos', 'DOUBLE', false, null, null);
        $this->addColumn('ENGANCHE', 'Enganche', 'DOUBLE', false, null, null);
        $this->addColumn('TASA_INTERES_ANUAL', 'TasaInteresAnual', 'DOUBLE', false, null, null);
        $this->addColumn('PLAZO_EN_ANIOS', 'PlazoEnAnios', 'DOUBLE', false, null, null);
        $this->addColumn('PLAZO_EN_MESES', 'PlazoEnMeses', 'DOUBLE', false, null, null);
        $this->addColumn('MONTO_FINANCIAR_MAXIMO', 'MontoFinanciarMaximo', 'DOUBLE', false, null, null);
        $this->addColumn('CUOTA_TOTAL_MENSUAL_MAXIMA', 'CuotaTotalMensualMaxima', 'DOUBLE', false, null, null);
        $this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
        $this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null, null);
        $this->addColumn('CREATED_BY', 'CreatedBy', 'VARCHAR', false, 32, null);
        $this->addColumn('UPDATED_BY', 'UpdatedBy', 'VARCHAR', false, 32, null);
        $this->addForeignKey('USUARIO_ID', 'UsuarioId', 'INTEGER', 'usuario', 'ID', false, null, null);
        // validators
    } // initialize()

    /**
     * Build the RelationMap objects for this table relationships
     */
    public function buildRelations()
    {
        $this->addRelation('Moneda', 'Moneda', RelationMap::MANY_TO_ONE, array('moneda_id' => 'id', ), null, null);
        $this->addRelation('Usuario', 'Usuario', RelationMap::MANY_TO_ONE, array('usuario_id' => 'id', ), null, null);
        $this->addRelation('Negocio', 'Negocio', RelationMap::ONE_TO_MANY, array('id' => 'requerimiento_id', ), null, null, 'Negocios');
        $this->addRelation('DireccionRequerimiento', 'DireccionRequerimiento', RelationMap::ONE_TO_MANY, array('id' => 'requerimiento_id', ), null, null, 'DireccionRequerimientos');
    } // buildRelations()

    /**
     *
     * Gets the list of behaviors registered for this table
     *
     * @return array Associative array (name => parameters) of behaviors
     */
    public function getBehaviors()
    {
        return array(
            'symfony' => array('form' => 'true', 'filter' => 'true', ),
            'symfony_behaviors' => array(),
            'symfony_timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', ),
        );
    } // getBehaviors()

} // RequerimientoTableMap
