<?php


/**
 * Base class that represents a query for the 'propiedad' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 01/10/18 12:30:12
 *
 * @method PropiedadQuery orderById($order = Criteria::ASC) Order by the id column
 * @method PropiedadQuery orderByTipoOperacion($order = Criteria::ASC) Order by the tipo_operacion column
 * @method PropiedadQuery orderByTipoInmueble($order = Criteria::ASC) Order by the tipo_inmueble column
 * @method PropiedadQuery orderByCantidadHabitacion($order = Criteria::ASC) Order by the cantidad_habitacion column
 * @method PropiedadQuery orderByCantidadBanio($order = Criteria::ASC) Order by the cantidad_banio column
 * @method PropiedadQuery orderByCantidadParqueo($order = Criteria::ASC) Order by the cantidad_parqueo column
 * @method PropiedadQuery orderByCantidadComedor($order = Criteria::ASC) Order by the cantidad_comedor column
 * @method PropiedadQuery orderByCantidadSala($order = Criteria::ASC) Order by the cantidad_sala column
 * @method PropiedadQuery orderByCantidadCocina($order = Criteria::ASC) Order by the cantidad_cocina column
 * @method PropiedadQuery orderByDormitorioServicio($order = Criteria::ASC) Order by the dormitorio_servicio column
 * @method PropiedadQuery orderByEstudio($order = Criteria::ASC) Order by the estudio column
 * @method PropiedadQuery orderByCisterna($order = Criteria::ASC) Order by the cisterna column
 * @method PropiedadQuery orderByCantidadJardin($order = Criteria::ASC) Order by the cantidad_jardin column
 * @method PropiedadQuery orderByCantidadPatio($order = Criteria::ASC) Order by the cantidad_patio column
 * @method PropiedadQuery orderByLavanderia($order = Criteria::ASC) Order by the lavanderia column
 * @method PropiedadQuery orderByEstado($order = Criteria::ASC) Order by the estado column
 * @method PropiedadQuery orderByAmenidades($order = Criteria::ASC) Order by the amenidades column
 * @method PropiedadQuery orderByMonedaId($order = Criteria::ASC) Order by the moneda_id column
 * @method PropiedadQuery orderByPrecio($order = Criteria::ASC) Order by the precio column
 * @method PropiedadQuery orderByNegociable($order = Criteria::ASC) Order by the negociable column
 * @method PropiedadQuery orderByIncluyeGastosEscritura($order = Criteria::ASC) Order by the incluye_gastos_escritura column
 * @method PropiedadQuery orderByAnioConstruccion($order = Criteria::ASC) Order by the anio_construccion column
 * @method PropiedadQuery orderByMantenimientoMensual($order = Criteria::ASC) Order by the mantenimiento_mensual column
 * @method PropiedadQuery orderByIusiSemestral($order = Criteria::ASC) Order by the iusi_semestral column
 * @method PropiedadQuery orderByValorAvaluo($order = Criteria::ASC) Order by the valor_avaluo column
 * @method PropiedadQuery orderByMiComision($order = Criteria::ASC) Order by the mi_comision column
 * @method PropiedadQuery orderByComisionCompartida($order = Criteria::ASC) Order by the comision_compartida column
 * @method PropiedadQuery orderByNombreCliente($order = Criteria::ASC) Order by the nombre_cliente column
 * @method PropiedadQuery orderByCorreoCliente($order = Criteria::ASC) Order by the correo_cliente column
 * @method PropiedadQuery orderByTelefonoCliente($order = Criteria::ASC) Order by the telefono_cliente column
 * @method PropiedadQuery orderByDepartamentoId($order = Criteria::ASC) Order by the departamento_id column
 * @method PropiedadQuery orderByMunicipioId($order = Criteria::ASC) Order by the municipio_id column
 * @method PropiedadQuery orderByZona($order = Criteria::ASC) Order by the zona column
 * @method PropiedadQuery orderByCarreteraId($order = Criteria::ASC) Order by the carretera_id column
 * @method PropiedadQuery orderByKm($order = Criteria::ASC) Order by the km column
 * @method PropiedadQuery orderByDireccion($order = Criteria::ASC) Order by the direccion column
 * @method PropiedadQuery orderBySeguridad($order = Criteria::ASC) Order by the seguridad column
 * @method PropiedadQuery orderByAccesos($order = Criteria::ASC) Order by the accesos column
 * @method PropiedadQuery orderByAgua($order = Criteria::ASC) Order by the agua column
 * @method PropiedadQuery orderByTransportePublico($order = Criteria::ASC) Order by the transporte_publico column
 * @method PropiedadQuery orderByTransitoVehicular($order = Criteria::ASC) Order by the transito_vehicular column
 * @method PropiedadQuery orderByComunidadesColidantes($order = Criteria::ASC) Order by the comunidades_colidantes column
 * @method PropiedadQuery orderByAreasRecreacion($order = Criteria::ASC) Order by the areas_recreacion column
 * @method PropiedadQuery orderByFormaPago($order = Criteria::ASC) Order by the forma_pago column
 * @method PropiedadQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method PropiedadQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method PropiedadQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method PropiedadQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 * @method PropiedadQuery orderByTieneLuz($order = Criteria::ASC) Order by the tiene_luz column
 * @method PropiedadQuery orderByTieneAgua($order = Criteria::ASC) Order by the tiene_agua column
 * @method PropiedadQuery orderByNiveles($order = Criteria::ASC) Order by the niveles column
 * @method PropiedadQuery orderByArea($order = Criteria::ASC) Order by the area column
 * @method PropiedadQuery orderByAreaX($order = Criteria::ASC) Order by the area_x column
 * @method PropiedadQuery orderByAreaY($order = Criteria::ASC) Order by the area_y column
 *
 * @method PropiedadQuery groupById() Group by the id column
 * @method PropiedadQuery groupByTipoOperacion() Group by the tipo_operacion column
 * @method PropiedadQuery groupByTipoInmueble() Group by the tipo_inmueble column
 * @method PropiedadQuery groupByCantidadHabitacion() Group by the cantidad_habitacion column
 * @method PropiedadQuery groupByCantidadBanio() Group by the cantidad_banio column
 * @method PropiedadQuery groupByCantidadParqueo() Group by the cantidad_parqueo column
 * @method PropiedadQuery groupByCantidadComedor() Group by the cantidad_comedor column
 * @method PropiedadQuery groupByCantidadSala() Group by the cantidad_sala column
 * @method PropiedadQuery groupByCantidadCocina() Group by the cantidad_cocina column
 * @method PropiedadQuery groupByDormitorioServicio() Group by the dormitorio_servicio column
 * @method PropiedadQuery groupByEstudio() Group by the estudio column
 * @method PropiedadQuery groupByCisterna() Group by the cisterna column
 * @method PropiedadQuery groupByCantidadJardin() Group by the cantidad_jardin column
 * @method PropiedadQuery groupByCantidadPatio() Group by the cantidad_patio column
 * @method PropiedadQuery groupByLavanderia() Group by the lavanderia column
 * @method PropiedadQuery groupByEstado() Group by the estado column
 * @method PropiedadQuery groupByAmenidades() Group by the amenidades column
 * @method PropiedadQuery groupByMonedaId() Group by the moneda_id column
 * @method PropiedadQuery groupByPrecio() Group by the precio column
 * @method PropiedadQuery groupByNegociable() Group by the negociable column
 * @method PropiedadQuery groupByIncluyeGastosEscritura() Group by the incluye_gastos_escritura column
 * @method PropiedadQuery groupByAnioConstruccion() Group by the anio_construccion column
 * @method PropiedadQuery groupByMantenimientoMensual() Group by the mantenimiento_mensual column
 * @method PropiedadQuery groupByIusiSemestral() Group by the iusi_semestral column
 * @method PropiedadQuery groupByValorAvaluo() Group by the valor_avaluo column
 * @method PropiedadQuery groupByMiComision() Group by the mi_comision column
 * @method PropiedadQuery groupByComisionCompartida() Group by the comision_compartida column
 * @method PropiedadQuery groupByNombreCliente() Group by the nombre_cliente column
 * @method PropiedadQuery groupByCorreoCliente() Group by the correo_cliente column
 * @method PropiedadQuery groupByTelefonoCliente() Group by the telefono_cliente column
 * @method PropiedadQuery groupByDepartamentoId() Group by the departamento_id column
 * @method PropiedadQuery groupByMunicipioId() Group by the municipio_id column
 * @method PropiedadQuery groupByZona() Group by the zona column
 * @method PropiedadQuery groupByCarreteraId() Group by the carretera_id column
 * @method PropiedadQuery groupByKm() Group by the km column
 * @method PropiedadQuery groupByDireccion() Group by the direccion column
 * @method PropiedadQuery groupBySeguridad() Group by the seguridad column
 * @method PropiedadQuery groupByAccesos() Group by the accesos column
 * @method PropiedadQuery groupByAgua() Group by the agua column
 * @method PropiedadQuery groupByTransportePublico() Group by the transporte_publico column
 * @method PropiedadQuery groupByTransitoVehicular() Group by the transito_vehicular column
 * @method PropiedadQuery groupByComunidadesColidantes() Group by the comunidades_colidantes column
 * @method PropiedadQuery groupByAreasRecreacion() Group by the areas_recreacion column
 * @method PropiedadQuery groupByFormaPago() Group by the forma_pago column
 * @method PropiedadQuery groupByCreatedAt() Group by the created_at column
 * @method PropiedadQuery groupByUpdatedAt() Group by the updated_at column
 * @method PropiedadQuery groupByCreatedBy() Group by the created_by column
 * @method PropiedadQuery groupByUpdatedBy() Group by the updated_by column
 * @method PropiedadQuery groupByTieneLuz() Group by the tiene_luz column
 * @method PropiedadQuery groupByTieneAgua() Group by the tiene_agua column
 * @method PropiedadQuery groupByNiveles() Group by the niveles column
 * @method PropiedadQuery groupByArea() Group by the area column
 * @method PropiedadQuery groupByAreaX() Group by the area_x column
 * @method PropiedadQuery groupByAreaY() Group by the area_y column
 *
 * @method PropiedadQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method PropiedadQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method PropiedadQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method PropiedadQuery leftJoinMoneda($relationAlias = null) Adds a LEFT JOIN clause to the query using the Moneda relation
 * @method PropiedadQuery rightJoinMoneda($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Moneda relation
 * @method PropiedadQuery innerJoinMoneda($relationAlias = null) Adds a INNER JOIN clause to the query using the Moneda relation
 *
 * @method PropiedadQuery leftJoinDepartamento($relationAlias = null) Adds a LEFT JOIN clause to the query using the Departamento relation
 * @method PropiedadQuery rightJoinDepartamento($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Departamento relation
 * @method PropiedadQuery innerJoinDepartamento($relationAlias = null) Adds a INNER JOIN clause to the query using the Departamento relation
 *
 * @method PropiedadQuery leftJoinMunicipio($relationAlias = null) Adds a LEFT JOIN clause to the query using the Municipio relation
 * @method PropiedadQuery rightJoinMunicipio($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Municipio relation
 * @method PropiedadQuery innerJoinMunicipio($relationAlias = null) Adds a INNER JOIN clause to the query using the Municipio relation
 *
 * @method PropiedadQuery leftJoinCarretera($relationAlias = null) Adds a LEFT JOIN clause to the query using the Carretera relation
 * @method PropiedadQuery rightJoinCarretera($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Carretera relation
 * @method PropiedadQuery innerJoinCarretera($relationAlias = null) Adds a INNER JOIN clause to the query using the Carretera relation
 *
 * @method PropiedadQuery leftJoinPropiedadImagen($relationAlias = null) Adds a LEFT JOIN clause to the query using the PropiedadImagen relation
 * @method PropiedadQuery rightJoinPropiedadImagen($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PropiedadImagen relation
 * @method PropiedadQuery innerJoinPropiedadImagen($relationAlias = null) Adds a INNER JOIN clause to the query using the PropiedadImagen relation
 *
 * @method Propiedad findOne(PropelPDO $con = null) Return the first Propiedad matching the query
 * @method Propiedad findOneOrCreate(PropelPDO $con = null) Return the first Propiedad matching the query, or a new Propiedad object populated from the query conditions when no match is found
 *
 * @method Propiedad findOneById(int $id) Return the first Propiedad filtered by the id column
 * @method Propiedad findOneByTipoOperacion(string $tipo_operacion) Return the first Propiedad filtered by the tipo_operacion column
 * @method Propiedad findOneByTipoInmueble(string $tipo_inmueble) Return the first Propiedad filtered by the tipo_inmueble column
 * @method Propiedad findOneByCantidadHabitacion(int $cantidad_habitacion) Return the first Propiedad filtered by the cantidad_habitacion column
 * @method Propiedad findOneByCantidadBanio(int $cantidad_banio) Return the first Propiedad filtered by the cantidad_banio column
 * @method Propiedad findOneByCantidadParqueo(int $cantidad_parqueo) Return the first Propiedad filtered by the cantidad_parqueo column
 * @method Propiedad findOneByCantidadComedor(int $cantidad_comedor) Return the first Propiedad filtered by the cantidad_comedor column
 * @method Propiedad findOneByCantidadSala(int $cantidad_sala) Return the first Propiedad filtered by the cantidad_sala column
 * @method Propiedad findOneByCantidadCocina(int $cantidad_cocina) Return the first Propiedad filtered by the cantidad_cocina column
 * @method Propiedad findOneByDormitorioServicio(boolean $dormitorio_servicio) Return the first Propiedad filtered by the dormitorio_servicio column
 * @method Propiedad findOneByEstudio(boolean $estudio) Return the first Propiedad filtered by the estudio column
 * @method Propiedad findOneByCisterna(boolean $cisterna) Return the first Propiedad filtered by the cisterna column
 * @method Propiedad findOneByCantidadJardin(int $cantidad_jardin) Return the first Propiedad filtered by the cantidad_jardin column
 * @method Propiedad findOneByCantidadPatio(int $cantidad_patio) Return the first Propiedad filtered by the cantidad_patio column
 * @method Propiedad findOneByLavanderia(boolean $lavanderia) Return the first Propiedad filtered by the lavanderia column
 * @method Propiedad findOneByEstado(string $estado) Return the first Propiedad filtered by the estado column
 * @method Propiedad findOneByAmenidades(string $amenidades) Return the first Propiedad filtered by the amenidades column
 * @method Propiedad findOneByMonedaId(int $moneda_id) Return the first Propiedad filtered by the moneda_id column
 * @method Propiedad findOneByPrecio(double $precio) Return the first Propiedad filtered by the precio column
 * @method Propiedad findOneByNegociable(boolean $negociable) Return the first Propiedad filtered by the negociable column
 * @method Propiedad findOneByIncluyeGastosEscritura(boolean $incluye_gastos_escritura) Return the first Propiedad filtered by the incluye_gastos_escritura column
 * @method Propiedad findOneByAnioConstruccion(int $anio_construccion) Return the first Propiedad filtered by the anio_construccion column
 * @method Propiedad findOneByMantenimientoMensual(double $mantenimiento_mensual) Return the first Propiedad filtered by the mantenimiento_mensual column
 * @method Propiedad findOneByIusiSemestral(double $iusi_semestral) Return the first Propiedad filtered by the iusi_semestral column
 * @method Propiedad findOneByValorAvaluo(double $valor_avaluo) Return the first Propiedad filtered by the valor_avaluo column
 * @method Propiedad findOneByMiComision(double $mi_comision) Return the first Propiedad filtered by the mi_comision column
 * @method Propiedad findOneByComisionCompartida(double $comision_compartida) Return the first Propiedad filtered by the comision_compartida column
 * @method Propiedad findOneByNombreCliente(string $nombre_cliente) Return the first Propiedad filtered by the nombre_cliente column
 * @method Propiedad findOneByCorreoCliente(string $correo_cliente) Return the first Propiedad filtered by the correo_cliente column
 * @method Propiedad findOneByTelefonoCliente(string $telefono_cliente) Return the first Propiedad filtered by the telefono_cliente column
 * @method Propiedad findOneByDepartamentoId(int $departamento_id) Return the first Propiedad filtered by the departamento_id column
 * @method Propiedad findOneByMunicipioId(int $municipio_id) Return the first Propiedad filtered by the municipio_id column
 * @method Propiedad findOneByZona(string $zona) Return the first Propiedad filtered by the zona column
 * @method Propiedad findOneByCarreteraId(int $carretera_id) Return the first Propiedad filtered by the carretera_id column
 * @method Propiedad findOneByKm(string $km) Return the first Propiedad filtered by the km column
 * @method Propiedad findOneByDireccion(string $direccion) Return the first Propiedad filtered by the direccion column
 * @method Propiedad findOneBySeguridad(double $seguridad) Return the first Propiedad filtered by the seguridad column
 * @method Propiedad findOneByAccesos(double $accesos) Return the first Propiedad filtered by the accesos column
 * @method Propiedad findOneByAgua(double $agua) Return the first Propiedad filtered by the agua column
 * @method Propiedad findOneByTransportePublico(double $transporte_publico) Return the first Propiedad filtered by the transporte_publico column
 * @method Propiedad findOneByTransitoVehicular(double $transito_vehicular) Return the first Propiedad filtered by the transito_vehicular column
 * @method Propiedad findOneByComunidadesColidantes(double $comunidades_colidantes) Return the first Propiedad filtered by the comunidades_colidantes column
 * @method Propiedad findOneByAreasRecreacion(double $areas_recreacion) Return the first Propiedad filtered by the areas_recreacion column
 * @method Propiedad findOneByFormaPago(string $forma_pago) Return the first Propiedad filtered by the forma_pago column
 * @method Propiedad findOneByCreatedAt(string $created_at) Return the first Propiedad filtered by the created_at column
 * @method Propiedad findOneByUpdatedAt(string $updated_at) Return the first Propiedad filtered by the updated_at column
 * @method Propiedad findOneByCreatedBy(string $created_by) Return the first Propiedad filtered by the created_by column
 * @method Propiedad findOneByUpdatedBy(string $updated_by) Return the first Propiedad filtered by the updated_by column
 * @method Propiedad findOneByTieneLuz(boolean $tiene_luz) Return the first Propiedad filtered by the tiene_luz column
 * @method Propiedad findOneByTieneAgua(boolean $tiene_agua) Return the first Propiedad filtered by the tiene_agua column
 * @method Propiedad findOneByNiveles(int $niveles) Return the first Propiedad filtered by the niveles column
 * @method Propiedad findOneByArea(double $area) Return the first Propiedad filtered by the area column
 * @method Propiedad findOneByAreaX(double $area_x) Return the first Propiedad filtered by the area_x column
 * @method Propiedad findOneByAreaY(double $area_y) Return the first Propiedad filtered by the area_y column
 *
 * @method array findById(int $id) Return Propiedad objects filtered by the id column
 * @method array findByTipoOperacion(string $tipo_operacion) Return Propiedad objects filtered by the tipo_operacion column
 * @method array findByTipoInmueble(string $tipo_inmueble) Return Propiedad objects filtered by the tipo_inmueble column
 * @method array findByCantidadHabitacion(int $cantidad_habitacion) Return Propiedad objects filtered by the cantidad_habitacion column
 * @method array findByCantidadBanio(int $cantidad_banio) Return Propiedad objects filtered by the cantidad_banio column
 * @method array findByCantidadParqueo(int $cantidad_parqueo) Return Propiedad objects filtered by the cantidad_parqueo column
 * @method array findByCantidadComedor(int $cantidad_comedor) Return Propiedad objects filtered by the cantidad_comedor column
 * @method array findByCantidadSala(int $cantidad_sala) Return Propiedad objects filtered by the cantidad_sala column
 * @method array findByCantidadCocina(int $cantidad_cocina) Return Propiedad objects filtered by the cantidad_cocina column
 * @method array findByDormitorioServicio(boolean $dormitorio_servicio) Return Propiedad objects filtered by the dormitorio_servicio column
 * @method array findByEstudio(boolean $estudio) Return Propiedad objects filtered by the estudio column
 * @method array findByCisterna(boolean $cisterna) Return Propiedad objects filtered by the cisterna column
 * @method array findByCantidadJardin(int $cantidad_jardin) Return Propiedad objects filtered by the cantidad_jardin column
 * @method array findByCantidadPatio(int $cantidad_patio) Return Propiedad objects filtered by the cantidad_patio column
 * @method array findByLavanderia(boolean $lavanderia) Return Propiedad objects filtered by the lavanderia column
 * @method array findByEstado(string $estado) Return Propiedad objects filtered by the estado column
 * @method array findByAmenidades(string $amenidades) Return Propiedad objects filtered by the amenidades column
 * @method array findByMonedaId(int $moneda_id) Return Propiedad objects filtered by the moneda_id column
 * @method array findByPrecio(double $precio) Return Propiedad objects filtered by the precio column
 * @method array findByNegociable(boolean $negociable) Return Propiedad objects filtered by the negociable column
 * @method array findByIncluyeGastosEscritura(boolean $incluye_gastos_escritura) Return Propiedad objects filtered by the incluye_gastos_escritura column
 * @method array findByAnioConstruccion(int $anio_construccion) Return Propiedad objects filtered by the anio_construccion column
 * @method array findByMantenimientoMensual(double $mantenimiento_mensual) Return Propiedad objects filtered by the mantenimiento_mensual column
 * @method array findByIusiSemestral(double $iusi_semestral) Return Propiedad objects filtered by the iusi_semestral column
 * @method array findByValorAvaluo(double $valor_avaluo) Return Propiedad objects filtered by the valor_avaluo column
 * @method array findByMiComision(double $mi_comision) Return Propiedad objects filtered by the mi_comision column
 * @method array findByComisionCompartida(double $comision_compartida) Return Propiedad objects filtered by the comision_compartida column
 * @method array findByNombreCliente(string $nombre_cliente) Return Propiedad objects filtered by the nombre_cliente column
 * @method array findByCorreoCliente(string $correo_cliente) Return Propiedad objects filtered by the correo_cliente column
 * @method array findByTelefonoCliente(string $telefono_cliente) Return Propiedad objects filtered by the telefono_cliente column
 * @method array findByDepartamentoId(int $departamento_id) Return Propiedad objects filtered by the departamento_id column
 * @method array findByMunicipioId(int $municipio_id) Return Propiedad objects filtered by the municipio_id column
 * @method array findByZona(string $zona) Return Propiedad objects filtered by the zona column
 * @method array findByCarreteraId(int $carretera_id) Return Propiedad objects filtered by the carretera_id column
 * @method array findByKm(string $km) Return Propiedad objects filtered by the km column
 * @method array findByDireccion(string $direccion) Return Propiedad objects filtered by the direccion column
 * @method array findBySeguridad(double $seguridad) Return Propiedad objects filtered by the seguridad column
 * @method array findByAccesos(double $accesos) Return Propiedad objects filtered by the accesos column
 * @method array findByAgua(double $agua) Return Propiedad objects filtered by the agua column
 * @method array findByTransportePublico(double $transporte_publico) Return Propiedad objects filtered by the transporte_publico column
 * @method array findByTransitoVehicular(double $transito_vehicular) Return Propiedad objects filtered by the transito_vehicular column
 * @method array findByComunidadesColidantes(double $comunidades_colidantes) Return Propiedad objects filtered by the comunidades_colidantes column
 * @method array findByAreasRecreacion(double $areas_recreacion) Return Propiedad objects filtered by the areas_recreacion column
 * @method array findByFormaPago(string $forma_pago) Return Propiedad objects filtered by the forma_pago column
 * @method array findByCreatedAt(string $created_at) Return Propiedad objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Propiedad objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Propiedad objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Propiedad objects filtered by the updated_by column
 * @method array findByTieneLuz(boolean $tiene_luz) Return Propiedad objects filtered by the tiene_luz column
 * @method array findByTieneAgua(boolean $tiene_agua) Return Propiedad objects filtered by the tiene_agua column
 * @method array findByNiveles(int $niveles) Return Propiedad objects filtered by the niveles column
 * @method array findByArea(double $area) Return Propiedad objects filtered by the area column
 * @method array findByAreaX(double $area_x) Return Propiedad objects filtered by the area_x column
 * @method array findByAreaY(double $area_y) Return Propiedad objects filtered by the area_y column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BasePropiedadQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BasePropiedadQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Propiedad', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new PropiedadQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     PropiedadQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return PropiedadQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof PropiedadQuery) {
            return $criteria;
        }
        $query = new PropiedadQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Propiedad|Propiedad[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = PropiedadPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Propiedad A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `TIPO_OPERACION`, `TIPO_INMUEBLE`, `CANTIDAD_HABITACION`, `CANTIDAD_BANIO`, `CANTIDAD_PARQUEO`, `CANTIDAD_COMEDOR`, `CANTIDAD_SALA`, `CANTIDAD_COCINA`, `DORMITORIO_SERVICIO`, `ESTUDIO`, `CISTERNA`, `CANTIDAD_JARDIN`, `CANTIDAD_PATIO`, `LAVANDERIA`, `ESTADO`, `AMENIDADES`, `MONEDA_ID`, `PRECIO`, `NEGOCIABLE`, `INCLUYE_GASTOS_ESCRITURA`, `ANIO_CONSTRUCCION`, `MANTENIMIENTO_MENSUAL`, `IUSI_SEMESTRAL`, `VALOR_AVALUO`, `MI_COMISION`, `COMISION_COMPARTIDA`, `NOMBRE_CLIENTE`, `CORREO_CLIENTE`, `TELEFONO_CLIENTE`, `DEPARTAMENTO_ID`, `MUNICIPIO_ID`, `ZONA`, `CARRETERA_ID`, `KM`, `DIRECCION`, `SEGURIDAD`, `ACCESOS`, `AGUA`, `TRANSPORTE_PUBLICO`, `TRANSITO_VEHICULAR`, `COMUNIDADES_COLIDANTES`, `AREAS_RECREACION`, `FORMA_PAGO`, `CREATED_AT`, `UPDATED_AT`, `CREATED_BY`, `UPDATED_BY`, `TIENE_LUZ`, `TIENE_AGUA`, `NIVELES`, `AREA`, `AREA_X`, `AREA_Y` FROM `propiedad` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Propiedad();
            $obj->hydrate($row);
            PropiedadPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Propiedad|Propiedad[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Propiedad[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(PropiedadPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(PropiedadPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(PropiedadPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the tipo_operacion column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoOperacion('fooValue');   // WHERE tipo_operacion = 'fooValue'
     * $query->filterByTipoOperacion('%fooValue%'); // WHERE tipo_operacion LIKE '%fooValue%'
     * </code>
     *
     * @param     string $tipoOperacion The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByTipoOperacion($tipoOperacion = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($tipoOperacion)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $tipoOperacion)) {
                $tipoOperacion = str_replace('*', '%', $tipoOperacion);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::TIPO_OPERACION, $tipoOperacion, $comparison);
    }

    /**
     * Filter the query on the tipo_inmueble column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoInmueble('fooValue');   // WHERE tipo_inmueble = 'fooValue'
     * $query->filterByTipoInmueble('%fooValue%'); // WHERE tipo_inmueble LIKE '%fooValue%'
     * </code>
     *
     * @param     string $tipoInmueble The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByTipoInmueble($tipoInmueble = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($tipoInmueble)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $tipoInmueble)) {
                $tipoInmueble = str_replace('*', '%', $tipoInmueble);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::TIPO_INMUEBLE, $tipoInmueble, $comparison);
    }

    /**
     * Filter the query on the cantidad_habitacion column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadHabitacion(1234); // WHERE cantidad_habitacion = 1234
     * $query->filterByCantidadHabitacion(array(12, 34)); // WHERE cantidad_habitacion IN (12, 34)
     * $query->filterByCantidadHabitacion(array('min' => 12)); // WHERE cantidad_habitacion > 12
     * </code>
     *
     * @param     mixed $cantidadHabitacion The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCantidadHabitacion($cantidadHabitacion = null, $comparison = null)
    {
        if (is_array($cantidadHabitacion)) {
            $useMinMax = false;
            if (isset($cantidadHabitacion['min'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_HABITACION, $cantidadHabitacion['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadHabitacion['max'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_HABITACION, $cantidadHabitacion['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CANTIDAD_HABITACION, $cantidadHabitacion, $comparison);
    }

    /**
     * Filter the query on the cantidad_banio column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadBanio(1234); // WHERE cantidad_banio = 1234
     * $query->filterByCantidadBanio(array(12, 34)); // WHERE cantidad_banio IN (12, 34)
     * $query->filterByCantidadBanio(array('min' => 12)); // WHERE cantidad_banio > 12
     * </code>
     *
     * @param     mixed $cantidadBanio The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCantidadBanio($cantidadBanio = null, $comparison = null)
    {
        if (is_array($cantidadBanio)) {
            $useMinMax = false;
            if (isset($cantidadBanio['min'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_BANIO, $cantidadBanio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadBanio['max'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_BANIO, $cantidadBanio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CANTIDAD_BANIO, $cantidadBanio, $comparison);
    }

    /**
     * Filter the query on the cantidad_parqueo column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadParqueo(1234); // WHERE cantidad_parqueo = 1234
     * $query->filterByCantidadParqueo(array(12, 34)); // WHERE cantidad_parqueo IN (12, 34)
     * $query->filterByCantidadParqueo(array('min' => 12)); // WHERE cantidad_parqueo > 12
     * </code>
     *
     * @param     mixed $cantidadParqueo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCantidadParqueo($cantidadParqueo = null, $comparison = null)
    {
        if (is_array($cantidadParqueo)) {
            $useMinMax = false;
            if (isset($cantidadParqueo['min'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_PARQUEO, $cantidadParqueo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadParqueo['max'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_PARQUEO, $cantidadParqueo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CANTIDAD_PARQUEO, $cantidadParqueo, $comparison);
    }

    /**
     * Filter the query on the cantidad_comedor column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadComedor(1234); // WHERE cantidad_comedor = 1234
     * $query->filterByCantidadComedor(array(12, 34)); // WHERE cantidad_comedor IN (12, 34)
     * $query->filterByCantidadComedor(array('min' => 12)); // WHERE cantidad_comedor > 12
     * </code>
     *
     * @param     mixed $cantidadComedor The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCantidadComedor($cantidadComedor = null, $comparison = null)
    {
        if (is_array($cantidadComedor)) {
            $useMinMax = false;
            if (isset($cantidadComedor['min'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_COMEDOR, $cantidadComedor['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadComedor['max'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_COMEDOR, $cantidadComedor['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CANTIDAD_COMEDOR, $cantidadComedor, $comparison);
    }

    /**
     * Filter the query on the cantidad_sala column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadSala(1234); // WHERE cantidad_sala = 1234
     * $query->filterByCantidadSala(array(12, 34)); // WHERE cantidad_sala IN (12, 34)
     * $query->filterByCantidadSala(array('min' => 12)); // WHERE cantidad_sala > 12
     * </code>
     *
     * @param     mixed $cantidadSala The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCantidadSala($cantidadSala = null, $comparison = null)
    {
        if (is_array($cantidadSala)) {
            $useMinMax = false;
            if (isset($cantidadSala['min'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_SALA, $cantidadSala['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadSala['max'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_SALA, $cantidadSala['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CANTIDAD_SALA, $cantidadSala, $comparison);
    }

    /**
     * Filter the query on the cantidad_cocina column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadCocina(1234); // WHERE cantidad_cocina = 1234
     * $query->filterByCantidadCocina(array(12, 34)); // WHERE cantidad_cocina IN (12, 34)
     * $query->filterByCantidadCocina(array('min' => 12)); // WHERE cantidad_cocina > 12
     * </code>
     *
     * @param     mixed $cantidadCocina The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCantidadCocina($cantidadCocina = null, $comparison = null)
    {
        if (is_array($cantidadCocina)) {
            $useMinMax = false;
            if (isset($cantidadCocina['min'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_COCINA, $cantidadCocina['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadCocina['max'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_COCINA, $cantidadCocina['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CANTIDAD_COCINA, $cantidadCocina, $comparison);
    }

    /**
     * Filter the query on the dormitorio_servicio column
     *
     * Example usage:
     * <code>
     * $query->filterByDormitorioServicio(true); // WHERE dormitorio_servicio = true
     * $query->filterByDormitorioServicio('yes'); // WHERE dormitorio_servicio = true
     * </code>
     *
     * @param     boolean|string $dormitorioServicio The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByDormitorioServicio($dormitorioServicio = null, $comparison = null)
    {
        if (is_string($dormitorioServicio)) {
            $dormitorio_servicio = in_array(strtolower($dormitorioServicio), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(PropiedadPeer::DORMITORIO_SERVICIO, $dormitorioServicio, $comparison);
    }

    /**
     * Filter the query on the estudio column
     *
     * Example usage:
     * <code>
     * $query->filterByEstudio(true); // WHERE estudio = true
     * $query->filterByEstudio('yes'); // WHERE estudio = true
     * </code>
     *
     * @param     boolean|string $estudio The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByEstudio($estudio = null, $comparison = null)
    {
        if (is_string($estudio)) {
            $estudio = in_array(strtolower($estudio), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(PropiedadPeer::ESTUDIO, $estudio, $comparison);
    }

    /**
     * Filter the query on the cisterna column
     *
     * Example usage:
     * <code>
     * $query->filterByCisterna(true); // WHERE cisterna = true
     * $query->filterByCisterna('yes'); // WHERE cisterna = true
     * </code>
     *
     * @param     boolean|string $cisterna The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCisterna($cisterna = null, $comparison = null)
    {
        if (is_string($cisterna)) {
            $cisterna = in_array(strtolower($cisterna), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(PropiedadPeer::CISTERNA, $cisterna, $comparison);
    }

    /**
     * Filter the query on the cantidad_jardin column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadJardin(1234); // WHERE cantidad_jardin = 1234
     * $query->filterByCantidadJardin(array(12, 34)); // WHERE cantidad_jardin IN (12, 34)
     * $query->filterByCantidadJardin(array('min' => 12)); // WHERE cantidad_jardin > 12
     * </code>
     *
     * @param     mixed $cantidadJardin The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCantidadJardin($cantidadJardin = null, $comparison = null)
    {
        if (is_array($cantidadJardin)) {
            $useMinMax = false;
            if (isset($cantidadJardin['min'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_JARDIN, $cantidadJardin['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadJardin['max'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_JARDIN, $cantidadJardin['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CANTIDAD_JARDIN, $cantidadJardin, $comparison);
    }

    /**
     * Filter the query on the cantidad_patio column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadPatio(1234); // WHERE cantidad_patio = 1234
     * $query->filterByCantidadPatio(array(12, 34)); // WHERE cantidad_patio IN (12, 34)
     * $query->filterByCantidadPatio(array('min' => 12)); // WHERE cantidad_patio > 12
     * </code>
     *
     * @param     mixed $cantidadPatio The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCantidadPatio($cantidadPatio = null, $comparison = null)
    {
        if (is_array($cantidadPatio)) {
            $useMinMax = false;
            if (isset($cantidadPatio['min'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_PATIO, $cantidadPatio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadPatio['max'])) {
                $this->addUsingAlias(PropiedadPeer::CANTIDAD_PATIO, $cantidadPatio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CANTIDAD_PATIO, $cantidadPatio, $comparison);
    }

    /**
     * Filter the query on the lavanderia column
     *
     * Example usage:
     * <code>
     * $query->filterByLavanderia(true); // WHERE lavanderia = true
     * $query->filterByLavanderia('yes'); // WHERE lavanderia = true
     * </code>
     *
     * @param     boolean|string $lavanderia The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByLavanderia($lavanderia = null, $comparison = null)
    {
        if (is_string($lavanderia)) {
            $lavanderia = in_array(strtolower($lavanderia), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(PropiedadPeer::LAVANDERIA, $lavanderia, $comparison);
    }

    /**
     * Filter the query on the estado column
     *
     * Example usage:
     * <code>
     * $query->filterByEstado('fooValue');   // WHERE estado = 'fooValue'
     * $query->filterByEstado('%fooValue%'); // WHERE estado LIKE '%fooValue%'
     * </code>
     *
     * @param     string $estado The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByEstado($estado = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($estado)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $estado)) {
                $estado = str_replace('*', '%', $estado);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::ESTADO, $estado, $comparison);
    }

    /**
     * Filter the query on the amenidades column
     *
     * Example usage:
     * <code>
     * $query->filterByAmenidades('fooValue');   // WHERE amenidades = 'fooValue'
     * $query->filterByAmenidades('%fooValue%'); // WHERE amenidades LIKE '%fooValue%'
     * </code>
     *
     * @param     string $amenidades The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByAmenidades($amenidades = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($amenidades)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $amenidades)) {
                $amenidades = str_replace('*', '%', $amenidades);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::AMENIDADES, $amenidades, $comparison);
    }

    /**
     * Filter the query on the moneda_id column
     *
     * Example usage:
     * <code>
     * $query->filterByMonedaId(1234); // WHERE moneda_id = 1234
     * $query->filterByMonedaId(array(12, 34)); // WHERE moneda_id IN (12, 34)
     * $query->filterByMonedaId(array('min' => 12)); // WHERE moneda_id > 12
     * </code>
     *
     * @see       filterByMoneda()
     *
     * @param     mixed $monedaId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByMonedaId($monedaId = null, $comparison = null)
    {
        if (is_array($monedaId)) {
            $useMinMax = false;
            if (isset($monedaId['min'])) {
                $this->addUsingAlias(PropiedadPeer::MONEDA_ID, $monedaId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($monedaId['max'])) {
                $this->addUsingAlias(PropiedadPeer::MONEDA_ID, $monedaId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::MONEDA_ID, $monedaId, $comparison);
    }

    /**
     * Filter the query on the precio column
     *
     * Example usage:
     * <code>
     * $query->filterByPrecio(1234); // WHERE precio = 1234
     * $query->filterByPrecio(array(12, 34)); // WHERE precio IN (12, 34)
     * $query->filterByPrecio(array('min' => 12)); // WHERE precio > 12
     * </code>
     *
     * @param     mixed $precio The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByPrecio($precio = null, $comparison = null)
    {
        if (is_array($precio)) {
            $useMinMax = false;
            if (isset($precio['min'])) {
                $this->addUsingAlias(PropiedadPeer::PRECIO, $precio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($precio['max'])) {
                $this->addUsingAlias(PropiedadPeer::PRECIO, $precio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::PRECIO, $precio, $comparison);
    }

    /**
     * Filter the query on the negociable column
     *
     * Example usage:
     * <code>
     * $query->filterByNegociable(true); // WHERE negociable = true
     * $query->filterByNegociable('yes'); // WHERE negociable = true
     * </code>
     *
     * @param     boolean|string $negociable The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByNegociable($negociable = null, $comparison = null)
    {
        if (is_string($negociable)) {
            $negociable = in_array(strtolower($negociable), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(PropiedadPeer::NEGOCIABLE, $negociable, $comparison);
    }

    /**
     * Filter the query on the incluye_gastos_escritura column
     *
     * Example usage:
     * <code>
     * $query->filterByIncluyeGastosEscritura(true); // WHERE incluye_gastos_escritura = true
     * $query->filterByIncluyeGastosEscritura('yes'); // WHERE incluye_gastos_escritura = true
     * </code>
     *
     * @param     boolean|string $incluyeGastosEscritura The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByIncluyeGastosEscritura($incluyeGastosEscritura = null, $comparison = null)
    {
        if (is_string($incluyeGastosEscritura)) {
            $incluye_gastos_escritura = in_array(strtolower($incluyeGastosEscritura), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(PropiedadPeer::INCLUYE_GASTOS_ESCRITURA, $incluyeGastosEscritura, $comparison);
    }

    /**
     * Filter the query on the anio_construccion column
     *
     * Example usage:
     * <code>
     * $query->filterByAnioConstruccion(1234); // WHERE anio_construccion = 1234
     * $query->filterByAnioConstruccion(array(12, 34)); // WHERE anio_construccion IN (12, 34)
     * $query->filterByAnioConstruccion(array('min' => 12)); // WHERE anio_construccion > 12
     * </code>
     *
     * @param     mixed $anioConstruccion The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByAnioConstruccion($anioConstruccion = null, $comparison = null)
    {
        if (is_array($anioConstruccion)) {
            $useMinMax = false;
            if (isset($anioConstruccion['min'])) {
                $this->addUsingAlias(PropiedadPeer::ANIO_CONSTRUCCION, $anioConstruccion['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($anioConstruccion['max'])) {
                $this->addUsingAlias(PropiedadPeer::ANIO_CONSTRUCCION, $anioConstruccion['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::ANIO_CONSTRUCCION, $anioConstruccion, $comparison);
    }

    /**
     * Filter the query on the mantenimiento_mensual column
     *
     * Example usage:
     * <code>
     * $query->filterByMantenimientoMensual(1234); // WHERE mantenimiento_mensual = 1234
     * $query->filterByMantenimientoMensual(array(12, 34)); // WHERE mantenimiento_mensual IN (12, 34)
     * $query->filterByMantenimientoMensual(array('min' => 12)); // WHERE mantenimiento_mensual > 12
     * </code>
     *
     * @param     mixed $mantenimientoMensual The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByMantenimientoMensual($mantenimientoMensual = null, $comparison = null)
    {
        if (is_array($mantenimientoMensual)) {
            $useMinMax = false;
            if (isset($mantenimientoMensual['min'])) {
                $this->addUsingAlias(PropiedadPeer::MANTENIMIENTO_MENSUAL, $mantenimientoMensual['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($mantenimientoMensual['max'])) {
                $this->addUsingAlias(PropiedadPeer::MANTENIMIENTO_MENSUAL, $mantenimientoMensual['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::MANTENIMIENTO_MENSUAL, $mantenimientoMensual, $comparison);
    }

    /**
     * Filter the query on the iusi_semestral column
     *
     * Example usage:
     * <code>
     * $query->filterByIusiSemestral(1234); // WHERE iusi_semestral = 1234
     * $query->filterByIusiSemestral(array(12, 34)); // WHERE iusi_semestral IN (12, 34)
     * $query->filterByIusiSemestral(array('min' => 12)); // WHERE iusi_semestral > 12
     * </code>
     *
     * @param     mixed $iusiSemestral The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByIusiSemestral($iusiSemestral = null, $comparison = null)
    {
        if (is_array($iusiSemestral)) {
            $useMinMax = false;
            if (isset($iusiSemestral['min'])) {
                $this->addUsingAlias(PropiedadPeer::IUSI_SEMESTRAL, $iusiSemestral['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($iusiSemestral['max'])) {
                $this->addUsingAlias(PropiedadPeer::IUSI_SEMESTRAL, $iusiSemestral['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::IUSI_SEMESTRAL, $iusiSemestral, $comparison);
    }

    /**
     * Filter the query on the valor_avaluo column
     *
     * Example usage:
     * <code>
     * $query->filterByValorAvaluo(1234); // WHERE valor_avaluo = 1234
     * $query->filterByValorAvaluo(array(12, 34)); // WHERE valor_avaluo IN (12, 34)
     * $query->filterByValorAvaluo(array('min' => 12)); // WHERE valor_avaluo > 12
     * </code>
     *
     * @param     mixed $valorAvaluo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByValorAvaluo($valorAvaluo = null, $comparison = null)
    {
        if (is_array($valorAvaluo)) {
            $useMinMax = false;
            if (isset($valorAvaluo['min'])) {
                $this->addUsingAlias(PropiedadPeer::VALOR_AVALUO, $valorAvaluo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($valorAvaluo['max'])) {
                $this->addUsingAlias(PropiedadPeer::VALOR_AVALUO, $valorAvaluo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::VALOR_AVALUO, $valorAvaluo, $comparison);
    }

    /**
     * Filter the query on the mi_comision column
     *
     * Example usage:
     * <code>
     * $query->filterByMiComision(1234); // WHERE mi_comision = 1234
     * $query->filterByMiComision(array(12, 34)); // WHERE mi_comision IN (12, 34)
     * $query->filterByMiComision(array('min' => 12)); // WHERE mi_comision > 12
     * </code>
     *
     * @param     mixed $miComision The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByMiComision($miComision = null, $comparison = null)
    {
        if (is_array($miComision)) {
            $useMinMax = false;
            if (isset($miComision['min'])) {
                $this->addUsingAlias(PropiedadPeer::MI_COMISION, $miComision['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($miComision['max'])) {
                $this->addUsingAlias(PropiedadPeer::MI_COMISION, $miComision['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::MI_COMISION, $miComision, $comparison);
    }

    /**
     * Filter the query on the comision_compartida column
     *
     * Example usage:
     * <code>
     * $query->filterByComisionCompartida(1234); // WHERE comision_compartida = 1234
     * $query->filterByComisionCompartida(array(12, 34)); // WHERE comision_compartida IN (12, 34)
     * $query->filterByComisionCompartida(array('min' => 12)); // WHERE comision_compartida > 12
     * </code>
     *
     * @param     mixed $comisionCompartida The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByComisionCompartida($comisionCompartida = null, $comparison = null)
    {
        if (is_array($comisionCompartida)) {
            $useMinMax = false;
            if (isset($comisionCompartida['min'])) {
                $this->addUsingAlias(PropiedadPeer::COMISION_COMPARTIDA, $comisionCompartida['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($comisionCompartida['max'])) {
                $this->addUsingAlias(PropiedadPeer::COMISION_COMPARTIDA, $comisionCompartida['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::COMISION_COMPARTIDA, $comisionCompartida, $comparison);
    }

    /**
     * Filter the query on the nombre_cliente column
     *
     * Example usage:
     * <code>
     * $query->filterByNombreCliente('fooValue');   // WHERE nombre_cliente = 'fooValue'
     * $query->filterByNombreCliente('%fooValue%'); // WHERE nombre_cliente LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nombreCliente The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByNombreCliente($nombreCliente = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nombreCliente)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nombreCliente)) {
                $nombreCliente = str_replace('*', '%', $nombreCliente);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::NOMBRE_CLIENTE, $nombreCliente, $comparison);
    }

    /**
     * Filter the query on the correo_cliente column
     *
     * Example usage:
     * <code>
     * $query->filterByCorreoCliente('fooValue');   // WHERE correo_cliente = 'fooValue'
     * $query->filterByCorreoCliente('%fooValue%'); // WHERE correo_cliente LIKE '%fooValue%'
     * </code>
     *
     * @param     string $correoCliente The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCorreoCliente($correoCliente = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($correoCliente)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $correoCliente)) {
                $correoCliente = str_replace('*', '%', $correoCliente);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CORREO_CLIENTE, $correoCliente, $comparison);
    }

    /**
     * Filter the query on the telefono_cliente column
     *
     * Example usage:
     * <code>
     * $query->filterByTelefonoCliente('fooValue');   // WHERE telefono_cliente = 'fooValue'
     * $query->filterByTelefonoCliente('%fooValue%'); // WHERE telefono_cliente LIKE '%fooValue%'
     * </code>
     *
     * @param     string $telefonoCliente The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByTelefonoCliente($telefonoCliente = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($telefonoCliente)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $telefonoCliente)) {
                $telefonoCliente = str_replace('*', '%', $telefonoCliente);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::TELEFONO_CLIENTE, $telefonoCliente, $comparison);
    }

    /**
     * Filter the query on the departamento_id column
     *
     * Example usage:
     * <code>
     * $query->filterByDepartamentoId(1234); // WHERE departamento_id = 1234
     * $query->filterByDepartamentoId(array(12, 34)); // WHERE departamento_id IN (12, 34)
     * $query->filterByDepartamentoId(array('min' => 12)); // WHERE departamento_id > 12
     * </code>
     *
     * @see       filterByDepartamento()
     *
     * @param     mixed $departamentoId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByDepartamentoId($departamentoId = null, $comparison = null)
    {
        if (is_array($departamentoId)) {
            $useMinMax = false;
            if (isset($departamentoId['min'])) {
                $this->addUsingAlias(PropiedadPeer::DEPARTAMENTO_ID, $departamentoId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($departamentoId['max'])) {
                $this->addUsingAlias(PropiedadPeer::DEPARTAMENTO_ID, $departamentoId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::DEPARTAMENTO_ID, $departamentoId, $comparison);
    }

    /**
     * Filter the query on the municipio_id column
     *
     * Example usage:
     * <code>
     * $query->filterByMunicipioId(1234); // WHERE municipio_id = 1234
     * $query->filterByMunicipioId(array(12, 34)); // WHERE municipio_id IN (12, 34)
     * $query->filterByMunicipioId(array('min' => 12)); // WHERE municipio_id > 12
     * </code>
     *
     * @see       filterByMunicipio()
     *
     * @param     mixed $municipioId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByMunicipioId($municipioId = null, $comparison = null)
    {
        if (is_array($municipioId)) {
            $useMinMax = false;
            if (isset($municipioId['min'])) {
                $this->addUsingAlias(PropiedadPeer::MUNICIPIO_ID, $municipioId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($municipioId['max'])) {
                $this->addUsingAlias(PropiedadPeer::MUNICIPIO_ID, $municipioId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::MUNICIPIO_ID, $municipioId, $comparison);
    }

    /**
     * Filter the query on the zona column
     *
     * Example usage:
     * <code>
     * $query->filterByZona('fooValue');   // WHERE zona = 'fooValue'
     * $query->filterByZona('%fooValue%'); // WHERE zona LIKE '%fooValue%'
     * </code>
     *
     * @param     string $zona The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByZona($zona = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($zona)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $zona)) {
                $zona = str_replace('*', '%', $zona);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::ZONA, $zona, $comparison);
    }

    /**
     * Filter the query on the carretera_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCarreteraId(1234); // WHERE carretera_id = 1234
     * $query->filterByCarreteraId(array(12, 34)); // WHERE carretera_id IN (12, 34)
     * $query->filterByCarreteraId(array('min' => 12)); // WHERE carretera_id > 12
     * </code>
     *
     * @see       filterByCarretera()
     *
     * @param     mixed $carreteraId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCarreteraId($carreteraId = null, $comparison = null)
    {
        if (is_array($carreteraId)) {
            $useMinMax = false;
            if (isset($carreteraId['min'])) {
                $this->addUsingAlias(PropiedadPeer::CARRETERA_ID, $carreteraId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($carreteraId['max'])) {
                $this->addUsingAlias(PropiedadPeer::CARRETERA_ID, $carreteraId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CARRETERA_ID, $carreteraId, $comparison);
    }

    /**
     * Filter the query on the km column
     *
     * Example usage:
     * <code>
     * $query->filterByKm('fooValue');   // WHERE km = 'fooValue'
     * $query->filterByKm('%fooValue%'); // WHERE km LIKE '%fooValue%'
     * </code>
     *
     * @param     string $km The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByKm($km = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($km)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $km)) {
                $km = str_replace('*', '%', $km);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::KM, $km, $comparison);
    }

    /**
     * Filter the query on the direccion column
     *
     * Example usage:
     * <code>
     * $query->filterByDireccion('fooValue');   // WHERE direccion = 'fooValue'
     * $query->filterByDireccion('%fooValue%'); // WHERE direccion LIKE '%fooValue%'
     * </code>
     *
     * @param     string $direccion The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByDireccion($direccion = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($direccion)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $direccion)) {
                $direccion = str_replace('*', '%', $direccion);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::DIRECCION, $direccion, $comparison);
    }

    /**
     * Filter the query on the seguridad column
     *
     * Example usage:
     * <code>
     * $query->filterBySeguridad(1234); // WHERE seguridad = 1234
     * $query->filterBySeguridad(array(12, 34)); // WHERE seguridad IN (12, 34)
     * $query->filterBySeguridad(array('min' => 12)); // WHERE seguridad > 12
     * </code>
     *
     * @param     mixed $seguridad The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterBySeguridad($seguridad = null, $comparison = null)
    {
        if (is_array($seguridad)) {
            $useMinMax = false;
            if (isset($seguridad['min'])) {
                $this->addUsingAlias(PropiedadPeer::SEGURIDAD, $seguridad['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($seguridad['max'])) {
                $this->addUsingAlias(PropiedadPeer::SEGURIDAD, $seguridad['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::SEGURIDAD, $seguridad, $comparison);
    }

    /**
     * Filter the query on the accesos column
     *
     * Example usage:
     * <code>
     * $query->filterByAccesos(1234); // WHERE accesos = 1234
     * $query->filterByAccesos(array(12, 34)); // WHERE accesos IN (12, 34)
     * $query->filterByAccesos(array('min' => 12)); // WHERE accesos > 12
     * </code>
     *
     * @param     mixed $accesos The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByAccesos($accesos = null, $comparison = null)
    {
        if (is_array($accesos)) {
            $useMinMax = false;
            if (isset($accesos['min'])) {
                $this->addUsingAlias(PropiedadPeer::ACCESOS, $accesos['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($accesos['max'])) {
                $this->addUsingAlias(PropiedadPeer::ACCESOS, $accesos['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::ACCESOS, $accesos, $comparison);
    }

    /**
     * Filter the query on the agua column
     *
     * Example usage:
     * <code>
     * $query->filterByAgua(1234); // WHERE agua = 1234
     * $query->filterByAgua(array(12, 34)); // WHERE agua IN (12, 34)
     * $query->filterByAgua(array('min' => 12)); // WHERE agua > 12
     * </code>
     *
     * @param     mixed $agua The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByAgua($agua = null, $comparison = null)
    {
        if (is_array($agua)) {
            $useMinMax = false;
            if (isset($agua['min'])) {
                $this->addUsingAlias(PropiedadPeer::AGUA, $agua['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($agua['max'])) {
                $this->addUsingAlias(PropiedadPeer::AGUA, $agua['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::AGUA, $agua, $comparison);
    }

    /**
     * Filter the query on the transporte_publico column
     *
     * Example usage:
     * <code>
     * $query->filterByTransportePublico(1234); // WHERE transporte_publico = 1234
     * $query->filterByTransportePublico(array(12, 34)); // WHERE transporte_publico IN (12, 34)
     * $query->filterByTransportePublico(array('min' => 12)); // WHERE transporte_publico > 12
     * </code>
     *
     * @param     mixed $transportePublico The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByTransportePublico($transportePublico = null, $comparison = null)
    {
        if (is_array($transportePublico)) {
            $useMinMax = false;
            if (isset($transportePublico['min'])) {
                $this->addUsingAlias(PropiedadPeer::TRANSPORTE_PUBLICO, $transportePublico['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($transportePublico['max'])) {
                $this->addUsingAlias(PropiedadPeer::TRANSPORTE_PUBLICO, $transportePublico['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::TRANSPORTE_PUBLICO, $transportePublico, $comparison);
    }

    /**
     * Filter the query on the transito_vehicular column
     *
     * Example usage:
     * <code>
     * $query->filterByTransitoVehicular(1234); // WHERE transito_vehicular = 1234
     * $query->filterByTransitoVehicular(array(12, 34)); // WHERE transito_vehicular IN (12, 34)
     * $query->filterByTransitoVehicular(array('min' => 12)); // WHERE transito_vehicular > 12
     * </code>
     *
     * @param     mixed $transitoVehicular The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByTransitoVehicular($transitoVehicular = null, $comparison = null)
    {
        if (is_array($transitoVehicular)) {
            $useMinMax = false;
            if (isset($transitoVehicular['min'])) {
                $this->addUsingAlias(PropiedadPeer::TRANSITO_VEHICULAR, $transitoVehicular['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($transitoVehicular['max'])) {
                $this->addUsingAlias(PropiedadPeer::TRANSITO_VEHICULAR, $transitoVehicular['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::TRANSITO_VEHICULAR, $transitoVehicular, $comparison);
    }

    /**
     * Filter the query on the comunidades_colidantes column
     *
     * Example usage:
     * <code>
     * $query->filterByComunidadesColidantes(1234); // WHERE comunidades_colidantes = 1234
     * $query->filterByComunidadesColidantes(array(12, 34)); // WHERE comunidades_colidantes IN (12, 34)
     * $query->filterByComunidadesColidantes(array('min' => 12)); // WHERE comunidades_colidantes > 12
     * </code>
     *
     * @param     mixed $comunidadesColidantes The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByComunidadesColidantes($comunidadesColidantes = null, $comparison = null)
    {
        if (is_array($comunidadesColidantes)) {
            $useMinMax = false;
            if (isset($comunidadesColidantes['min'])) {
                $this->addUsingAlias(PropiedadPeer::COMUNIDADES_COLIDANTES, $comunidadesColidantes['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($comunidadesColidantes['max'])) {
                $this->addUsingAlias(PropiedadPeer::COMUNIDADES_COLIDANTES, $comunidadesColidantes['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::COMUNIDADES_COLIDANTES, $comunidadesColidantes, $comparison);
    }

    /**
     * Filter the query on the areas_recreacion column
     *
     * Example usage:
     * <code>
     * $query->filterByAreasRecreacion(1234); // WHERE areas_recreacion = 1234
     * $query->filterByAreasRecreacion(array(12, 34)); // WHERE areas_recreacion IN (12, 34)
     * $query->filterByAreasRecreacion(array('min' => 12)); // WHERE areas_recreacion > 12
     * </code>
     *
     * @param     mixed $areasRecreacion The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByAreasRecreacion($areasRecreacion = null, $comparison = null)
    {
        if (is_array($areasRecreacion)) {
            $useMinMax = false;
            if (isset($areasRecreacion['min'])) {
                $this->addUsingAlias(PropiedadPeer::AREAS_RECREACION, $areasRecreacion['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($areasRecreacion['max'])) {
                $this->addUsingAlias(PropiedadPeer::AREAS_RECREACION, $areasRecreacion['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::AREAS_RECREACION, $areasRecreacion, $comparison);
    }

    /**
     * Filter the query on the forma_pago column
     *
     * Example usage:
     * <code>
     * $query->filterByFormaPago('fooValue');   // WHERE forma_pago = 'fooValue'
     * $query->filterByFormaPago('%fooValue%'); // WHERE forma_pago LIKE '%fooValue%'
     * </code>
     *
     * @param     string $formaPago The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByFormaPago($formaPago = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($formaPago)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $formaPago)) {
                $formaPago = str_replace('*', '%', $formaPago);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::FORMA_PAGO, $formaPago, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(PropiedadPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(PropiedadPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(PropiedadPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(PropiedadPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query on the tiene_luz column
     *
     * Example usage:
     * <code>
     * $query->filterByTieneLuz(true); // WHERE tiene_luz = true
     * $query->filterByTieneLuz('yes'); // WHERE tiene_luz = true
     * </code>
     *
     * @param     boolean|string $tieneLuz The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByTieneLuz($tieneLuz = null, $comparison = null)
    {
        if (is_string($tieneLuz)) {
            $tiene_luz = in_array(strtolower($tieneLuz), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(PropiedadPeer::TIENE_LUZ, $tieneLuz, $comparison);
    }

    /**
     * Filter the query on the tiene_agua column
     *
     * Example usage:
     * <code>
     * $query->filterByTieneAgua(true); // WHERE tiene_agua = true
     * $query->filterByTieneAgua('yes'); // WHERE tiene_agua = true
     * </code>
     *
     * @param     boolean|string $tieneAgua The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByTieneAgua($tieneAgua = null, $comparison = null)
    {
        if (is_string($tieneAgua)) {
            $tiene_agua = in_array(strtolower($tieneAgua), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(PropiedadPeer::TIENE_AGUA, $tieneAgua, $comparison);
    }

    /**
     * Filter the query on the niveles column
     *
     * Example usage:
     * <code>
     * $query->filterByNiveles(1234); // WHERE niveles = 1234
     * $query->filterByNiveles(array(12, 34)); // WHERE niveles IN (12, 34)
     * $query->filterByNiveles(array('min' => 12)); // WHERE niveles > 12
     * </code>
     *
     * @param     mixed $niveles The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByNiveles($niveles = null, $comparison = null)
    {
        if (is_array($niveles)) {
            $useMinMax = false;
            if (isset($niveles['min'])) {
                $this->addUsingAlias(PropiedadPeer::NIVELES, $niveles['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($niveles['max'])) {
                $this->addUsingAlias(PropiedadPeer::NIVELES, $niveles['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::NIVELES, $niveles, $comparison);
    }

    /**
     * Filter the query on the area column
     *
     * Example usage:
     * <code>
     * $query->filterByArea(1234); // WHERE area = 1234
     * $query->filterByArea(array(12, 34)); // WHERE area IN (12, 34)
     * $query->filterByArea(array('min' => 12)); // WHERE area > 12
     * </code>
     *
     * @param     mixed $area The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByArea($area = null, $comparison = null)
    {
        if (is_array($area)) {
            $useMinMax = false;
            if (isset($area['min'])) {
                $this->addUsingAlias(PropiedadPeer::AREA, $area['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($area['max'])) {
                $this->addUsingAlias(PropiedadPeer::AREA, $area['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::AREA, $area, $comparison);
    }

    /**
     * Filter the query on the area_x column
     *
     * Example usage:
     * <code>
     * $query->filterByAreaX(1234); // WHERE area_x = 1234
     * $query->filterByAreaX(array(12, 34)); // WHERE area_x IN (12, 34)
     * $query->filterByAreaX(array('min' => 12)); // WHERE area_x > 12
     * </code>
     *
     * @param     mixed $areaX The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByAreaX($areaX = null, $comparison = null)
    {
        if (is_array($areaX)) {
            $useMinMax = false;
            if (isset($areaX['min'])) {
                $this->addUsingAlias(PropiedadPeer::AREA_X, $areaX['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($areaX['max'])) {
                $this->addUsingAlias(PropiedadPeer::AREA_X, $areaX['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::AREA_X, $areaX, $comparison);
    }

    /**
     * Filter the query on the area_y column
     *
     * Example usage:
     * <code>
     * $query->filterByAreaY(1234); // WHERE area_y = 1234
     * $query->filterByAreaY(array(12, 34)); // WHERE area_y IN (12, 34)
     * $query->filterByAreaY(array('min' => 12)); // WHERE area_y > 12
     * </code>
     *
     * @param     mixed $areaY The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function filterByAreaY($areaY = null, $comparison = null)
    {
        if (is_array($areaY)) {
            $useMinMax = false;
            if (isset($areaY['min'])) {
                $this->addUsingAlias(PropiedadPeer::AREA_Y, $areaY['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($areaY['max'])) {
                $this->addUsingAlias(PropiedadPeer::AREA_Y, $areaY['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PropiedadPeer::AREA_Y, $areaY, $comparison);
    }

    /**
     * Filter the query by a related Moneda object
     *
     * @param   Moneda|PropelObjectCollection $moneda The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PropiedadQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByMoneda($moneda, $comparison = null)
    {
        if ($moneda instanceof Moneda) {
            return $this
                ->addUsingAlias(PropiedadPeer::MONEDA_ID, $moneda->getId(), $comparison);
        } elseif ($moneda instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(PropiedadPeer::MONEDA_ID, $moneda->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByMoneda() only accepts arguments of type Moneda or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Moneda relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function joinMoneda($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Moneda');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Moneda');
        }

        return $this;
    }

    /**
     * Use the Moneda relation Moneda object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   MonedaQuery A secondary query class using the current class as primary query
     */
    public function useMonedaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinMoneda($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Moneda', 'MonedaQuery');
    }

    /**
     * Filter the query by a related Departamento object
     *
     * @param   Departamento|PropelObjectCollection $departamento The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PropiedadQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDepartamento($departamento, $comparison = null)
    {
        if ($departamento instanceof Departamento) {
            return $this
                ->addUsingAlias(PropiedadPeer::DEPARTAMENTO_ID, $departamento->getId(), $comparison);
        } elseif ($departamento instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(PropiedadPeer::DEPARTAMENTO_ID, $departamento->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByDepartamento() only accepts arguments of type Departamento or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Departamento relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function joinDepartamento($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Departamento');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Departamento');
        }

        return $this;
    }

    /**
     * Use the Departamento relation Departamento object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DepartamentoQuery A secondary query class using the current class as primary query
     */
    public function useDepartamentoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinDepartamento($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Departamento', 'DepartamentoQuery');
    }

    /**
     * Filter the query by a related Municipio object
     *
     * @param   Municipio|PropelObjectCollection $municipio The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PropiedadQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByMunicipio($municipio, $comparison = null)
    {
        if ($municipio instanceof Municipio) {
            return $this
                ->addUsingAlias(PropiedadPeer::MUNICIPIO_ID, $municipio->getId(), $comparison);
        } elseif ($municipio instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(PropiedadPeer::MUNICIPIO_ID, $municipio->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByMunicipio() only accepts arguments of type Municipio or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Municipio relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function joinMunicipio($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Municipio');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Municipio');
        }

        return $this;
    }

    /**
     * Use the Municipio relation Municipio object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   MunicipioQuery A secondary query class using the current class as primary query
     */
    public function useMunicipioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinMunicipio($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Municipio', 'MunicipioQuery');
    }

    /**
     * Filter the query by a related Carretera object
     *
     * @param   Carretera|PropelObjectCollection $carretera The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PropiedadQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByCarretera($carretera, $comparison = null)
    {
        if ($carretera instanceof Carretera) {
            return $this
                ->addUsingAlias(PropiedadPeer::CARRETERA_ID, $carretera->getId(), $comparison);
        } elseif ($carretera instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(PropiedadPeer::CARRETERA_ID, $carretera->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByCarretera() only accepts arguments of type Carretera or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Carretera relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function joinCarretera($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Carretera');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Carretera');
        }

        return $this;
    }

    /**
     * Use the Carretera relation Carretera object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   CarreteraQuery A secondary query class using the current class as primary query
     */
    public function useCarreteraQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinCarretera($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Carretera', 'CarreteraQuery');
    }

    /**
     * Filter the query by a related PropiedadImagen object
     *
     * @param   PropiedadImagen|PropelObjectCollection $propiedadImagen  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PropiedadQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPropiedadImagen($propiedadImagen, $comparison = null)
    {
        if ($propiedadImagen instanceof PropiedadImagen) {
            return $this
                ->addUsingAlias(PropiedadPeer::ID, $propiedadImagen->getPropiedadId(), $comparison);
        } elseif ($propiedadImagen instanceof PropelObjectCollection) {
            return $this
                ->usePropiedadImagenQuery()
                ->filterByPrimaryKeys($propiedadImagen->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByPropiedadImagen() only accepts arguments of type PropiedadImagen or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the PropiedadImagen relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function joinPropiedadImagen($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('PropiedadImagen');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'PropiedadImagen');
        }

        return $this;
    }

    /**
     * Use the PropiedadImagen relation PropiedadImagen object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PropiedadImagenQuery A secondary query class using the current class as primary query
     */
    public function usePropiedadImagenQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinPropiedadImagen($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'PropiedadImagen', 'PropiedadImagenQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Propiedad $propiedad Object to remove from the list of results
     *
     * @return PropiedadQuery The current query, for fluid interface
     */
    public function prune($propiedad = null)
    {
        if ($propiedad) {
            $this->addUsingAlias(PropiedadPeer::ID, $propiedad->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
