<?php


/**
 * Base static class for performing query and update operations on the 'propiedad' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 01/07/18 00:15:26
 *
 * @package propel.generator.lib.model.om
 */
abstract class BasePropiedadPeer
{

    /** the default database name for this class */
    const DATABASE_NAME = 'propel';

    /** the table name for this class */
    const TABLE_NAME = 'propiedad';

    /** the related Propel class for this table */
    const OM_CLASS = 'Propiedad';

    /** the related TableMap class for this table */
    const TM_CLASS = 'PropiedadTableMap';

    /** The total number of columns. */
    const NUM_COLUMNS = 54;

    /** The number of lazy-loaded columns. */
    const NUM_LAZY_LOAD_COLUMNS = 0;

    /** The number of columns to hydrate (NUM_COLUMNS - NUM_LAZY_LOAD_COLUMNS) */
    const NUM_HYDRATE_COLUMNS = 54;

    /** the column name for the ID field */
    const ID = 'propiedad.ID';

    /** the column name for the TIPO_OPERACION field */
    const TIPO_OPERACION = 'propiedad.TIPO_OPERACION';

    /** the column name for the TIPO_INMUEBLE field */
    const TIPO_INMUEBLE = 'propiedad.TIPO_INMUEBLE';

    /** the column name for the CANTIDAD_HABITACION field */
    const CANTIDAD_HABITACION = 'propiedad.CANTIDAD_HABITACION';

    /** the column name for the CANTIDAD_BANIO field */
    const CANTIDAD_BANIO = 'propiedad.CANTIDAD_BANIO';

    /** the column name for the CANTIDAD_PARQUEO field */
    const CANTIDAD_PARQUEO = 'propiedad.CANTIDAD_PARQUEO';

    /** the column name for the CANTIDAD_COMEDOR field */
    const CANTIDAD_COMEDOR = 'propiedad.CANTIDAD_COMEDOR';

    /** the column name for the CANTIDAD_SALA field */
    const CANTIDAD_SALA = 'propiedad.CANTIDAD_SALA';

    /** the column name for the CANTIDAD_COCINA field */
    const CANTIDAD_COCINA = 'propiedad.CANTIDAD_COCINA';

    /** the column name for the DORMITORIO_SERVICIO field */
    const DORMITORIO_SERVICIO = 'propiedad.DORMITORIO_SERVICIO';

    /** the column name for the ESTUDIO field */
    const ESTUDIO = 'propiedad.ESTUDIO';

    /** the column name for the CISTERNA field */
    const CISTERNA = 'propiedad.CISTERNA';

    /** the column name for the CANTIDAD_JARDIN field */
    const CANTIDAD_JARDIN = 'propiedad.CANTIDAD_JARDIN';

    /** the column name for the CANTIDAD_PATIO field */
    const CANTIDAD_PATIO = 'propiedad.CANTIDAD_PATIO';

    /** the column name for the LAVANDERIA field */
    const LAVANDERIA = 'propiedad.LAVANDERIA';

    /** the column name for the ESTADO field */
    const ESTADO = 'propiedad.ESTADO';

    /** the column name for the AMENIDADES field */
    const AMENIDADES = 'propiedad.AMENIDADES';

    /** the column name for the MONEDA_ID field */
    const MONEDA_ID = 'propiedad.MONEDA_ID';

    /** the column name for the PRECIO field */
    const PRECIO = 'propiedad.PRECIO';

    /** the column name for the NEGOCIABLE field */
    const NEGOCIABLE = 'propiedad.NEGOCIABLE';

    /** the column name for the INCLUYE_GASTOS_ESCRITURA field */
    const INCLUYE_GASTOS_ESCRITURA = 'propiedad.INCLUYE_GASTOS_ESCRITURA';

    /** the column name for the ANIO_CONSTRUCCION field */
    const ANIO_CONSTRUCCION = 'propiedad.ANIO_CONSTRUCCION';

    /** the column name for the MANTENIMIENTO_MENSUAL field */
    const MANTENIMIENTO_MENSUAL = 'propiedad.MANTENIMIENTO_MENSUAL';

    /** the column name for the IUSI_SEMESTRAL field */
    const IUSI_SEMESTRAL = 'propiedad.IUSI_SEMESTRAL';

    /** the column name for the VALOR_AVALUO field */
    const VALOR_AVALUO = 'propiedad.VALOR_AVALUO';

    /** the column name for the MI_COMISION field */
    const MI_COMISION = 'propiedad.MI_COMISION';

    /** the column name for the COMISION_COMPARTIDA field */
    const COMISION_COMPARTIDA = 'propiedad.COMISION_COMPARTIDA';

    /** the column name for the NOMBRE_CLIENTE field */
    const NOMBRE_CLIENTE = 'propiedad.NOMBRE_CLIENTE';

    /** the column name for the CORREO_CLIENTE field */
    const CORREO_CLIENTE = 'propiedad.CORREO_CLIENTE';

    /** the column name for the TELEFONO_CLIENTE field */
    const TELEFONO_CLIENTE = 'propiedad.TELEFONO_CLIENTE';

    /** the column name for the DEPARTAMENTO_ID field */
    const DEPARTAMENTO_ID = 'propiedad.DEPARTAMENTO_ID';

    /** the column name for the MUNICIPIO_ID field */
    const MUNICIPIO_ID = 'propiedad.MUNICIPIO_ID';

    /** the column name for the ZONA field */
    const ZONA = 'propiedad.ZONA';

    /** the column name for the CARRETERA_ID field */
    const CARRETERA_ID = 'propiedad.CARRETERA_ID';

    /** the column name for the KM field */
    const KM = 'propiedad.KM';

    /** the column name for the DIRECCION field */
    const DIRECCION = 'propiedad.DIRECCION';

    /** the column name for the SEGURIDAD field */
    const SEGURIDAD = 'propiedad.SEGURIDAD';

    /** the column name for the ACCESOS field */
    const ACCESOS = 'propiedad.ACCESOS';

    /** the column name for the AGUA field */
    const AGUA = 'propiedad.AGUA';

    /** the column name for the TRANSPORTE_PUBLICO field */
    const TRANSPORTE_PUBLICO = 'propiedad.TRANSPORTE_PUBLICO';

    /** the column name for the TRANSITO_VEHICULAR field */
    const TRANSITO_VEHICULAR = 'propiedad.TRANSITO_VEHICULAR';

    /** the column name for the COMUNIDADES_COLIDANTES field */
    const COMUNIDADES_COLIDANTES = 'propiedad.COMUNIDADES_COLIDANTES';

    /** the column name for the AREAS_RECREACION field */
    const AREAS_RECREACION = 'propiedad.AREAS_RECREACION';

    /** the column name for the FORMA_PAGO field */
    const FORMA_PAGO = 'propiedad.FORMA_PAGO';

    /** the column name for the CREATED_AT field */
    const CREATED_AT = 'propiedad.CREATED_AT';

    /** the column name for the UPDATED_AT field */
    const UPDATED_AT = 'propiedad.UPDATED_AT';

    /** the column name for the CREATED_BY field */
    const CREATED_BY = 'propiedad.CREATED_BY';

    /** the column name for the UPDATED_BY field */
    const UPDATED_BY = 'propiedad.UPDATED_BY';

    /** the column name for the TIENE_LUZ field */
    const TIENE_LUZ = 'propiedad.TIENE_LUZ';

    /** the column name for the TIENE_AGUA field */
    const TIENE_AGUA = 'propiedad.TIENE_AGUA';

    /** the column name for the NIVELES field */
    const NIVELES = 'propiedad.NIVELES';

    /** the column name for the AREA field */
    const AREA = 'propiedad.AREA';

    /** the column name for the AREA_X field */
    const AREA_X = 'propiedad.AREA_X';

    /** the column name for the AREA_Y field */
    const AREA_Y = 'propiedad.AREA_Y';

    /** The default string format for model objects of the related table **/
    const DEFAULT_STRING_FORMAT = 'YAML';

    /**
     * An identiy map to hold any loaded instances of Propiedad objects.
     * This must be public so that other peer classes can access this when hydrating from JOIN
     * queries.
     * @var        array Propiedad[]
     */
    public static $instances = array();


    /**
     * holds an array of fieldnames
     *
     * first dimension keys are the type constants
     * e.g. PropiedadPeer::$fieldNames[PropiedadPeer::TYPE_PHPNAME][0] = 'Id'
     */
    protected static $fieldNames = array (
        BasePeer::TYPE_PHPNAME => array ('Id', 'TipoOperacion', 'TipoInmueble', 'CantidadHabitacion', 'CantidadBanio', 'CantidadParqueo', 'CantidadComedor', 'CantidadSala', 'CantidadCocina', 'DormitorioServicio', 'Estudio', 'Cisterna', 'CantidadJardin', 'CantidadPatio', 'Lavanderia', 'Estado', 'Amenidades', 'MonedaId', 'Precio', 'Negociable', 'IncluyeGastosEscritura', 'AnioConstruccion', 'MantenimientoMensual', 'IusiSemestral', 'ValorAvaluo', 'MiComision', 'ComisionCompartida', 'NombreCliente', 'CorreoCliente', 'TelefonoCliente', 'DepartamentoId', 'MunicipioId', 'Zona', 'CarreteraId', 'Km', 'Direccion', 'Seguridad', 'Accesos', 'Agua', 'TransportePublico', 'TransitoVehicular', 'ComunidadesColidantes', 'AreasRecreacion', 'FormaPago', 'CreatedAt', 'UpdatedAt', 'CreatedBy', 'UpdatedBy', 'TieneLuz', 'TieneAgua', 'Niveles', 'Area', 'AreaX', 'AreaY', ),
        BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'tipoOperacion', 'tipoInmueble', 'cantidadHabitacion', 'cantidadBanio', 'cantidadParqueo', 'cantidadComedor', 'cantidadSala', 'cantidadCocina', 'dormitorioServicio', 'estudio', 'cisterna', 'cantidadJardin', 'cantidadPatio', 'lavanderia', 'estado', 'amenidades', 'monedaId', 'precio', 'negociable', 'incluyeGastosEscritura', 'anioConstruccion', 'mantenimientoMensual', 'iusiSemestral', 'valorAvaluo', 'miComision', 'comisionCompartida', 'nombreCliente', 'correoCliente', 'telefonoCliente', 'departamentoId', 'municipioId', 'zona', 'carreteraId', 'km', 'direccion', 'seguridad', 'accesos', 'agua', 'transportePublico', 'transitoVehicular', 'comunidadesColidantes', 'areasRecreacion', 'formaPago', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'tieneLuz', 'tieneAgua', 'niveles', 'area', 'areaX', 'areaY', ),
        BasePeer::TYPE_COLNAME => array (PropiedadPeer::ID, PropiedadPeer::TIPO_OPERACION, PropiedadPeer::TIPO_INMUEBLE, PropiedadPeer::CANTIDAD_HABITACION, PropiedadPeer::CANTIDAD_BANIO, PropiedadPeer::CANTIDAD_PARQUEO, PropiedadPeer::CANTIDAD_COMEDOR, PropiedadPeer::CANTIDAD_SALA, PropiedadPeer::CANTIDAD_COCINA, PropiedadPeer::DORMITORIO_SERVICIO, PropiedadPeer::ESTUDIO, PropiedadPeer::CISTERNA, PropiedadPeer::CANTIDAD_JARDIN, PropiedadPeer::CANTIDAD_PATIO, PropiedadPeer::LAVANDERIA, PropiedadPeer::ESTADO, PropiedadPeer::AMENIDADES, PropiedadPeer::MONEDA_ID, PropiedadPeer::PRECIO, PropiedadPeer::NEGOCIABLE, PropiedadPeer::INCLUYE_GASTOS_ESCRITURA, PropiedadPeer::ANIO_CONSTRUCCION, PropiedadPeer::MANTENIMIENTO_MENSUAL, PropiedadPeer::IUSI_SEMESTRAL, PropiedadPeer::VALOR_AVALUO, PropiedadPeer::MI_COMISION, PropiedadPeer::COMISION_COMPARTIDA, PropiedadPeer::NOMBRE_CLIENTE, PropiedadPeer::CORREO_CLIENTE, PropiedadPeer::TELEFONO_CLIENTE, PropiedadPeer::DEPARTAMENTO_ID, PropiedadPeer::MUNICIPIO_ID, PropiedadPeer::ZONA, PropiedadPeer::CARRETERA_ID, PropiedadPeer::KM, PropiedadPeer::DIRECCION, PropiedadPeer::SEGURIDAD, PropiedadPeer::ACCESOS, PropiedadPeer::AGUA, PropiedadPeer::TRANSPORTE_PUBLICO, PropiedadPeer::TRANSITO_VEHICULAR, PropiedadPeer::COMUNIDADES_COLIDANTES, PropiedadPeer::AREAS_RECREACION, PropiedadPeer::FORMA_PAGO, PropiedadPeer::CREATED_AT, PropiedadPeer::UPDATED_AT, PropiedadPeer::CREATED_BY, PropiedadPeer::UPDATED_BY, PropiedadPeer::TIENE_LUZ, PropiedadPeer::TIENE_AGUA, PropiedadPeer::NIVELES, PropiedadPeer::AREA, PropiedadPeer::AREA_X, PropiedadPeer::AREA_Y, ),
        BasePeer::TYPE_RAW_COLNAME => array ('ID', 'TIPO_OPERACION', 'TIPO_INMUEBLE', 'CANTIDAD_HABITACION', 'CANTIDAD_BANIO', 'CANTIDAD_PARQUEO', 'CANTIDAD_COMEDOR', 'CANTIDAD_SALA', 'CANTIDAD_COCINA', 'DORMITORIO_SERVICIO', 'ESTUDIO', 'CISTERNA', 'CANTIDAD_JARDIN', 'CANTIDAD_PATIO', 'LAVANDERIA', 'ESTADO', 'AMENIDADES', 'MONEDA_ID', 'PRECIO', 'NEGOCIABLE', 'INCLUYE_GASTOS_ESCRITURA', 'ANIO_CONSTRUCCION', 'MANTENIMIENTO_MENSUAL', 'IUSI_SEMESTRAL', 'VALOR_AVALUO', 'MI_COMISION', 'COMISION_COMPARTIDA', 'NOMBRE_CLIENTE', 'CORREO_CLIENTE', 'TELEFONO_CLIENTE', 'DEPARTAMENTO_ID', 'MUNICIPIO_ID', 'ZONA', 'CARRETERA_ID', 'KM', 'DIRECCION', 'SEGURIDAD', 'ACCESOS', 'AGUA', 'TRANSPORTE_PUBLICO', 'TRANSITO_VEHICULAR', 'COMUNIDADES_COLIDANTES', 'AREAS_RECREACION', 'FORMA_PAGO', 'CREATED_AT', 'UPDATED_AT', 'CREATED_BY', 'UPDATED_BY', 'TIENE_LUZ', 'TIENE_AGUA', 'NIVELES', 'AREA', 'AREA_X', 'AREA_Y', ),
        BasePeer::TYPE_FIELDNAME => array ('id', 'tipo_operacion', 'tipo_inmueble', 'cantidad_habitacion', 'cantidad_banio', 'cantidad_parqueo', 'cantidad_comedor', 'cantidad_sala', 'cantidad_cocina', 'dormitorio_servicio', 'estudio', 'cisterna', 'cantidad_jardin', 'cantidad_patio', 'lavanderia', 'estado', 'amenidades', 'moneda_id', 'precio', 'negociable', 'incluye_gastos_escritura', 'anio_construccion', 'mantenimiento_mensual', 'iusi_semestral', 'valor_avaluo', 'mi_comision', 'comision_compartida', 'nombre_cliente', 'correo_cliente', 'telefono_cliente', 'departamento_id', 'municipio_id', 'zona', 'carretera_id', 'km', 'direccion', 'seguridad', 'accesos', 'agua', 'transporte_publico', 'transito_vehicular', 'comunidades_colidantes', 'areas_recreacion', 'forma_pago', 'created_at', 'updated_at', 'created_by', 'updated_by', 'tiene_luz', 'tiene_agua', 'niveles', 'area', 'area_x', 'area_y', ),
        BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, )
    );

    /**
     * holds an array of keys for quick access to the fieldnames array
     *
     * first dimension keys are the type constants
     * e.g. PropiedadPeer::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
     */
    protected static $fieldKeys = array (
        BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'TipoOperacion' => 1, 'TipoInmueble' => 2, 'CantidadHabitacion' => 3, 'CantidadBanio' => 4, 'CantidadParqueo' => 5, 'CantidadComedor' => 6, 'CantidadSala' => 7, 'CantidadCocina' => 8, 'DormitorioServicio' => 9, 'Estudio' => 10, 'Cisterna' => 11, 'CantidadJardin' => 12, 'CantidadPatio' => 13, 'Lavanderia' => 14, 'Estado' => 15, 'Amenidades' => 16, 'MonedaId' => 17, 'Precio' => 18, 'Negociable' => 19, 'IncluyeGastosEscritura' => 20, 'AnioConstruccion' => 21, 'MantenimientoMensual' => 22, 'IusiSemestral' => 23, 'ValorAvaluo' => 24, 'MiComision' => 25, 'ComisionCompartida' => 26, 'NombreCliente' => 27, 'CorreoCliente' => 28, 'TelefonoCliente' => 29, 'DepartamentoId' => 30, 'MunicipioId' => 31, 'Zona' => 32, 'CarreteraId' => 33, 'Km' => 34, 'Direccion' => 35, 'Seguridad' => 36, 'Accesos' => 37, 'Agua' => 38, 'TransportePublico' => 39, 'TransitoVehicular' => 40, 'ComunidadesColidantes' => 41, 'AreasRecreacion' => 42, 'FormaPago' => 43, 'CreatedAt' => 44, 'UpdatedAt' => 45, 'CreatedBy' => 46, 'UpdatedBy' => 47, 'TieneLuz' => 48, 'TieneAgua' => 49, 'Niveles' => 50, 'Area' => 51, 'AreaX' => 52, 'AreaY' => 53, ),
        BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'tipoOperacion' => 1, 'tipoInmueble' => 2, 'cantidadHabitacion' => 3, 'cantidadBanio' => 4, 'cantidadParqueo' => 5, 'cantidadComedor' => 6, 'cantidadSala' => 7, 'cantidadCocina' => 8, 'dormitorioServicio' => 9, 'estudio' => 10, 'cisterna' => 11, 'cantidadJardin' => 12, 'cantidadPatio' => 13, 'lavanderia' => 14, 'estado' => 15, 'amenidades' => 16, 'monedaId' => 17, 'precio' => 18, 'negociable' => 19, 'incluyeGastosEscritura' => 20, 'anioConstruccion' => 21, 'mantenimientoMensual' => 22, 'iusiSemestral' => 23, 'valorAvaluo' => 24, 'miComision' => 25, 'comisionCompartida' => 26, 'nombreCliente' => 27, 'correoCliente' => 28, 'telefonoCliente' => 29, 'departamentoId' => 30, 'municipioId' => 31, 'zona' => 32, 'carreteraId' => 33, 'km' => 34, 'direccion' => 35, 'seguridad' => 36, 'accesos' => 37, 'agua' => 38, 'transportePublico' => 39, 'transitoVehicular' => 40, 'comunidadesColidantes' => 41, 'areasRecreacion' => 42, 'formaPago' => 43, 'createdAt' => 44, 'updatedAt' => 45, 'createdBy' => 46, 'updatedBy' => 47, 'tieneLuz' => 48, 'tieneAgua' => 49, 'niveles' => 50, 'area' => 51, 'areaX' => 52, 'areaY' => 53, ),
        BasePeer::TYPE_COLNAME => array (PropiedadPeer::ID => 0, PropiedadPeer::TIPO_OPERACION => 1, PropiedadPeer::TIPO_INMUEBLE => 2, PropiedadPeer::CANTIDAD_HABITACION => 3, PropiedadPeer::CANTIDAD_BANIO => 4, PropiedadPeer::CANTIDAD_PARQUEO => 5, PropiedadPeer::CANTIDAD_COMEDOR => 6, PropiedadPeer::CANTIDAD_SALA => 7, PropiedadPeer::CANTIDAD_COCINA => 8, PropiedadPeer::DORMITORIO_SERVICIO => 9, PropiedadPeer::ESTUDIO => 10, PropiedadPeer::CISTERNA => 11, PropiedadPeer::CANTIDAD_JARDIN => 12, PropiedadPeer::CANTIDAD_PATIO => 13, PropiedadPeer::LAVANDERIA => 14, PropiedadPeer::ESTADO => 15, PropiedadPeer::AMENIDADES => 16, PropiedadPeer::MONEDA_ID => 17, PropiedadPeer::PRECIO => 18, PropiedadPeer::NEGOCIABLE => 19, PropiedadPeer::INCLUYE_GASTOS_ESCRITURA => 20, PropiedadPeer::ANIO_CONSTRUCCION => 21, PropiedadPeer::MANTENIMIENTO_MENSUAL => 22, PropiedadPeer::IUSI_SEMESTRAL => 23, PropiedadPeer::VALOR_AVALUO => 24, PropiedadPeer::MI_COMISION => 25, PropiedadPeer::COMISION_COMPARTIDA => 26, PropiedadPeer::NOMBRE_CLIENTE => 27, PropiedadPeer::CORREO_CLIENTE => 28, PropiedadPeer::TELEFONO_CLIENTE => 29, PropiedadPeer::DEPARTAMENTO_ID => 30, PropiedadPeer::MUNICIPIO_ID => 31, PropiedadPeer::ZONA => 32, PropiedadPeer::CARRETERA_ID => 33, PropiedadPeer::KM => 34, PropiedadPeer::DIRECCION => 35, PropiedadPeer::SEGURIDAD => 36, PropiedadPeer::ACCESOS => 37, PropiedadPeer::AGUA => 38, PropiedadPeer::TRANSPORTE_PUBLICO => 39, PropiedadPeer::TRANSITO_VEHICULAR => 40, PropiedadPeer::COMUNIDADES_COLIDANTES => 41, PropiedadPeer::AREAS_RECREACION => 42, PropiedadPeer::FORMA_PAGO => 43, PropiedadPeer::CREATED_AT => 44, PropiedadPeer::UPDATED_AT => 45, PropiedadPeer::CREATED_BY => 46, PropiedadPeer::UPDATED_BY => 47, PropiedadPeer::TIENE_LUZ => 48, PropiedadPeer::TIENE_AGUA => 49, PropiedadPeer::NIVELES => 50, PropiedadPeer::AREA => 51, PropiedadPeer::AREA_X => 52, PropiedadPeer::AREA_Y => 53, ),
        BasePeer::TYPE_RAW_COLNAME => array ('ID' => 0, 'TIPO_OPERACION' => 1, 'TIPO_INMUEBLE' => 2, 'CANTIDAD_HABITACION' => 3, 'CANTIDAD_BANIO' => 4, 'CANTIDAD_PARQUEO' => 5, 'CANTIDAD_COMEDOR' => 6, 'CANTIDAD_SALA' => 7, 'CANTIDAD_COCINA' => 8, 'DORMITORIO_SERVICIO' => 9, 'ESTUDIO' => 10, 'CISTERNA' => 11, 'CANTIDAD_JARDIN' => 12, 'CANTIDAD_PATIO' => 13, 'LAVANDERIA' => 14, 'ESTADO' => 15, 'AMENIDADES' => 16, 'MONEDA_ID' => 17, 'PRECIO' => 18, 'NEGOCIABLE' => 19, 'INCLUYE_GASTOS_ESCRITURA' => 20, 'ANIO_CONSTRUCCION' => 21, 'MANTENIMIENTO_MENSUAL' => 22, 'IUSI_SEMESTRAL' => 23, 'VALOR_AVALUO' => 24, 'MI_COMISION' => 25, 'COMISION_COMPARTIDA' => 26, 'NOMBRE_CLIENTE' => 27, 'CORREO_CLIENTE' => 28, 'TELEFONO_CLIENTE' => 29, 'DEPARTAMENTO_ID' => 30, 'MUNICIPIO_ID' => 31, 'ZONA' => 32, 'CARRETERA_ID' => 33, 'KM' => 34, 'DIRECCION' => 35, 'SEGURIDAD' => 36, 'ACCESOS' => 37, 'AGUA' => 38, 'TRANSPORTE_PUBLICO' => 39, 'TRANSITO_VEHICULAR' => 40, 'COMUNIDADES_COLIDANTES' => 41, 'AREAS_RECREACION' => 42, 'FORMA_PAGO' => 43, 'CREATED_AT' => 44, 'UPDATED_AT' => 45, 'CREATED_BY' => 46, 'UPDATED_BY' => 47, 'TIENE_LUZ' => 48, 'TIENE_AGUA' => 49, 'NIVELES' => 50, 'AREA' => 51, 'AREA_X' => 52, 'AREA_Y' => 53, ),
        BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'tipo_operacion' => 1, 'tipo_inmueble' => 2, 'cantidad_habitacion' => 3, 'cantidad_banio' => 4, 'cantidad_parqueo' => 5, 'cantidad_comedor' => 6, 'cantidad_sala' => 7, 'cantidad_cocina' => 8, 'dormitorio_servicio' => 9, 'estudio' => 10, 'cisterna' => 11, 'cantidad_jardin' => 12, 'cantidad_patio' => 13, 'lavanderia' => 14, 'estado' => 15, 'amenidades' => 16, 'moneda_id' => 17, 'precio' => 18, 'negociable' => 19, 'incluye_gastos_escritura' => 20, 'anio_construccion' => 21, 'mantenimiento_mensual' => 22, 'iusi_semestral' => 23, 'valor_avaluo' => 24, 'mi_comision' => 25, 'comision_compartida' => 26, 'nombre_cliente' => 27, 'correo_cliente' => 28, 'telefono_cliente' => 29, 'departamento_id' => 30, 'municipio_id' => 31, 'zona' => 32, 'carretera_id' => 33, 'km' => 34, 'direccion' => 35, 'seguridad' => 36, 'accesos' => 37, 'agua' => 38, 'transporte_publico' => 39, 'transito_vehicular' => 40, 'comunidades_colidantes' => 41, 'areas_recreacion' => 42, 'forma_pago' => 43, 'created_at' => 44, 'updated_at' => 45, 'created_by' => 46, 'updated_by' => 47, 'tiene_luz' => 48, 'tiene_agua' => 49, 'niveles' => 50, 'area' => 51, 'area_x' => 52, 'area_y' => 53, ),
        BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, )
    );

    /**
     * Translates a fieldname to another type
     *
     * @param      string $name field name
     * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
     * @param      string $toType   One of the class type constants
     * @return string          translated name of the field.
     * @throws PropelException - if the specified name could not be found in the fieldname mappings.
     */
    public static function translateFieldName($name, $fromType, $toType)
    {
        $toNames = PropiedadPeer::getFieldNames($toType);
        $key = isset(PropiedadPeer::$fieldKeys[$fromType][$name]) ? PropiedadPeer::$fieldKeys[$fromType][$name] : null;
        if ($key === null) {
            throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(PropiedadPeer::$fieldKeys[$fromType], true));
        }

        return $toNames[$key];
    }

    /**
     * Returns an array of field names.
     *
     * @param      string $type The type of fieldnames to return:
     *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
     * @return array           A list of field names
     * @throws PropelException - if the type is not valid.
     */
    public static function getFieldNames($type = BasePeer::TYPE_PHPNAME)
    {
        if (!array_key_exists($type, PropiedadPeer::$fieldNames)) {
            throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
        }

        return PropiedadPeer::$fieldNames[$type];
    }

    /**
     * Convenience method which changes table.column to alias.column.
     *
     * Using this method you can maintain SQL abstraction while using column aliases.
     * <code>
     *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
     *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
     * </code>
     * @param      string $alias The alias for the current table.
     * @param      string $column The column name for current table. (i.e. PropiedadPeer::COLUMN_NAME).
     * @return string
     */
    public static function alias($alias, $column)
    {
        return str_replace(PropiedadPeer::TABLE_NAME.'.', $alias.'.', $column);
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * Note: any columns that were marked with lazyLoad="true" in the
     * XML schema will not be added to the select list and only loaded
     * on demand.
     *
     * @param      Criteria $criteria object containing the columns to add.
     * @param      string   $alias    optional table alias
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function addSelectColumns(Criteria $criteria, $alias = null)
    {
        if (null === $alias) {
            $criteria->addSelectColumn(PropiedadPeer::ID);
            $criteria->addSelectColumn(PropiedadPeer::TIPO_OPERACION);
            $criteria->addSelectColumn(PropiedadPeer::TIPO_INMUEBLE);
            $criteria->addSelectColumn(PropiedadPeer::CANTIDAD_HABITACION);
            $criteria->addSelectColumn(PropiedadPeer::CANTIDAD_BANIO);
            $criteria->addSelectColumn(PropiedadPeer::CANTIDAD_PARQUEO);
            $criteria->addSelectColumn(PropiedadPeer::CANTIDAD_COMEDOR);
            $criteria->addSelectColumn(PropiedadPeer::CANTIDAD_SALA);
            $criteria->addSelectColumn(PropiedadPeer::CANTIDAD_COCINA);
            $criteria->addSelectColumn(PropiedadPeer::DORMITORIO_SERVICIO);
            $criteria->addSelectColumn(PropiedadPeer::ESTUDIO);
            $criteria->addSelectColumn(PropiedadPeer::CISTERNA);
            $criteria->addSelectColumn(PropiedadPeer::CANTIDAD_JARDIN);
            $criteria->addSelectColumn(PropiedadPeer::CANTIDAD_PATIO);
            $criteria->addSelectColumn(PropiedadPeer::LAVANDERIA);
            $criteria->addSelectColumn(PropiedadPeer::ESTADO);
            $criteria->addSelectColumn(PropiedadPeer::AMENIDADES);
            $criteria->addSelectColumn(PropiedadPeer::MONEDA_ID);
            $criteria->addSelectColumn(PropiedadPeer::PRECIO);
            $criteria->addSelectColumn(PropiedadPeer::NEGOCIABLE);
            $criteria->addSelectColumn(PropiedadPeer::INCLUYE_GASTOS_ESCRITURA);
            $criteria->addSelectColumn(PropiedadPeer::ANIO_CONSTRUCCION);
            $criteria->addSelectColumn(PropiedadPeer::MANTENIMIENTO_MENSUAL);
            $criteria->addSelectColumn(PropiedadPeer::IUSI_SEMESTRAL);
            $criteria->addSelectColumn(PropiedadPeer::VALOR_AVALUO);
            $criteria->addSelectColumn(PropiedadPeer::MI_COMISION);
            $criteria->addSelectColumn(PropiedadPeer::COMISION_COMPARTIDA);
            $criteria->addSelectColumn(PropiedadPeer::NOMBRE_CLIENTE);
            $criteria->addSelectColumn(PropiedadPeer::CORREO_CLIENTE);
            $criteria->addSelectColumn(PropiedadPeer::TELEFONO_CLIENTE);
            $criteria->addSelectColumn(PropiedadPeer::DEPARTAMENTO_ID);
            $criteria->addSelectColumn(PropiedadPeer::MUNICIPIO_ID);
            $criteria->addSelectColumn(PropiedadPeer::ZONA);
            $criteria->addSelectColumn(PropiedadPeer::CARRETERA_ID);
            $criteria->addSelectColumn(PropiedadPeer::KM);
            $criteria->addSelectColumn(PropiedadPeer::DIRECCION);
            $criteria->addSelectColumn(PropiedadPeer::SEGURIDAD);
            $criteria->addSelectColumn(PropiedadPeer::ACCESOS);
            $criteria->addSelectColumn(PropiedadPeer::AGUA);
            $criteria->addSelectColumn(PropiedadPeer::TRANSPORTE_PUBLICO);
            $criteria->addSelectColumn(PropiedadPeer::TRANSITO_VEHICULAR);
            $criteria->addSelectColumn(PropiedadPeer::COMUNIDADES_COLIDANTES);
            $criteria->addSelectColumn(PropiedadPeer::AREAS_RECREACION);
            $criteria->addSelectColumn(PropiedadPeer::FORMA_PAGO);
            $criteria->addSelectColumn(PropiedadPeer::CREATED_AT);
            $criteria->addSelectColumn(PropiedadPeer::UPDATED_AT);
            $criteria->addSelectColumn(PropiedadPeer::CREATED_BY);
            $criteria->addSelectColumn(PropiedadPeer::UPDATED_BY);
            $criteria->addSelectColumn(PropiedadPeer::TIENE_LUZ);
            $criteria->addSelectColumn(PropiedadPeer::TIENE_AGUA);
            $criteria->addSelectColumn(PropiedadPeer::NIVELES);
            $criteria->addSelectColumn(PropiedadPeer::AREA);
            $criteria->addSelectColumn(PropiedadPeer::AREA_X);
            $criteria->addSelectColumn(PropiedadPeer::AREA_Y);
        } else {
            $criteria->addSelectColumn($alias . '.ID');
            $criteria->addSelectColumn($alias . '.TIPO_OPERACION');
            $criteria->addSelectColumn($alias . '.TIPO_INMUEBLE');
            $criteria->addSelectColumn($alias . '.CANTIDAD_HABITACION');
            $criteria->addSelectColumn($alias . '.CANTIDAD_BANIO');
            $criteria->addSelectColumn($alias . '.CANTIDAD_PARQUEO');
            $criteria->addSelectColumn($alias . '.CANTIDAD_COMEDOR');
            $criteria->addSelectColumn($alias . '.CANTIDAD_SALA');
            $criteria->addSelectColumn($alias . '.CANTIDAD_COCINA');
            $criteria->addSelectColumn($alias . '.DORMITORIO_SERVICIO');
            $criteria->addSelectColumn($alias . '.ESTUDIO');
            $criteria->addSelectColumn($alias . '.CISTERNA');
            $criteria->addSelectColumn($alias . '.CANTIDAD_JARDIN');
            $criteria->addSelectColumn($alias . '.CANTIDAD_PATIO');
            $criteria->addSelectColumn($alias . '.LAVANDERIA');
            $criteria->addSelectColumn($alias . '.ESTADO');
            $criteria->addSelectColumn($alias . '.AMENIDADES');
            $criteria->addSelectColumn($alias . '.MONEDA_ID');
            $criteria->addSelectColumn($alias . '.PRECIO');
            $criteria->addSelectColumn($alias . '.NEGOCIABLE');
            $criteria->addSelectColumn($alias . '.INCLUYE_GASTOS_ESCRITURA');
            $criteria->addSelectColumn($alias . '.ANIO_CONSTRUCCION');
            $criteria->addSelectColumn($alias . '.MANTENIMIENTO_MENSUAL');
            $criteria->addSelectColumn($alias . '.IUSI_SEMESTRAL');
            $criteria->addSelectColumn($alias . '.VALOR_AVALUO');
            $criteria->addSelectColumn($alias . '.MI_COMISION');
            $criteria->addSelectColumn($alias . '.COMISION_COMPARTIDA');
            $criteria->addSelectColumn($alias . '.NOMBRE_CLIENTE');
            $criteria->addSelectColumn($alias . '.CORREO_CLIENTE');
            $criteria->addSelectColumn($alias . '.TELEFONO_CLIENTE');
            $criteria->addSelectColumn($alias . '.DEPARTAMENTO_ID');
            $criteria->addSelectColumn($alias . '.MUNICIPIO_ID');
            $criteria->addSelectColumn($alias . '.ZONA');
            $criteria->addSelectColumn($alias . '.CARRETERA_ID');
            $criteria->addSelectColumn($alias . '.KM');
            $criteria->addSelectColumn($alias . '.DIRECCION');
            $criteria->addSelectColumn($alias . '.SEGURIDAD');
            $criteria->addSelectColumn($alias . '.ACCESOS');
            $criteria->addSelectColumn($alias . '.AGUA');
            $criteria->addSelectColumn($alias . '.TRANSPORTE_PUBLICO');
            $criteria->addSelectColumn($alias . '.TRANSITO_VEHICULAR');
            $criteria->addSelectColumn($alias . '.COMUNIDADES_COLIDANTES');
            $criteria->addSelectColumn($alias . '.AREAS_RECREACION');
            $criteria->addSelectColumn($alias . '.FORMA_PAGO');
            $criteria->addSelectColumn($alias . '.CREATED_AT');
            $criteria->addSelectColumn($alias . '.UPDATED_AT');
            $criteria->addSelectColumn($alias . '.CREATED_BY');
            $criteria->addSelectColumn($alias . '.UPDATED_BY');
            $criteria->addSelectColumn($alias . '.TIENE_LUZ');
            $criteria->addSelectColumn($alias . '.TIENE_AGUA');
            $criteria->addSelectColumn($alias . '.NIVELES');
            $criteria->addSelectColumn($alias . '.AREA');
            $criteria->addSelectColumn($alias . '.AREA_X');
            $criteria->addSelectColumn($alias . '.AREA_Y');
        }
    }

    /**
     * Returns the number of rows matching criteria.
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @return int Number of matching rows.
     */
    public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
    {
        // we may modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            PropiedadPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME); // Set the correct dbName

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        // BasePeer returns a PDOStatement
        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }
    /**
     * Selects one object from the DB.
     *
     * @param      Criteria $criteria object used to create the SELECT statement.
     * @param      PropelPDO $con
     * @return                 Propiedad
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
    {
        $critcopy = clone $criteria;
        $critcopy->setLimit(1);
        $objects = PropiedadPeer::doSelect($critcopy, $con);
        if ($objects) {
            return $objects[0];
        }

        return null;
    }
    /**
     * Selects several row from the DB.
     *
     * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
     * @param      PropelPDO $con
     * @return array           Array of selected Objects
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelect(Criteria $criteria, PropelPDO $con = null)
    {
        return PropiedadPeer::populateObjects(PropiedadPeer::doSelectStmt($criteria, $con));
    }
    /**
     * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
     *
     * Use this method directly if you want to work with an executed statement durirectly (for example
     * to perform your own object hydration).
     *
     * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
     * @param      PropelPDO $con The connection to use
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     * @return PDOStatement The executed PDOStatement object.
     * @see        BasePeer::doSelect()
     */
    public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        if (!$criteria->hasSelectClause()) {
            $criteria = clone $criteria;
            PropiedadPeer::addSelectColumns($criteria);
        }

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);
        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }


        // BasePeer returns a PDOStatement
        return BasePeer::doSelect($criteria, $con);
    }
    /**
     * Adds an object to the instance pool.
     *
     * Propel keeps cached copies of objects in an instance pool when they are retrieved
     * from the database.  In some cases -- especially when you override doSelect*()
     * methods in your stub classes -- you may need to explicitly add objects
     * to the cache in order to ensure that the same objects are always returned by doSelect*()
     * and retrieveByPK*() calls.
     *
     * @param      Propiedad $obj A Propiedad object.
     * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
     */
    public static function addInstanceToPool($obj, $key = null)
    {
        if (Propel::isInstancePoolingEnabled()) {
            if ($key === null) {
                $key = (string) $obj->getId();
            } // if key === null
            PropiedadPeer::$instances[$key] = $obj;
        }
    }

    /**
     * Removes an object from the instance pool.
     *
     * Propel keeps cached copies of objects in an instance pool when they are retrieved
     * from the database.  In some cases -- especially when you override doDelete
     * methods in your stub classes -- you may need to explicitly remove objects
     * from the cache in order to prevent returning objects that no longer exist.
     *
     * @param      mixed $value A Propiedad object or a primary key value.
     *
     * @return void
     * @throws PropelException - if the value is invalid.
     */
    public static function removeInstanceFromPool($value)
    {
        if (Propel::isInstancePoolingEnabled() && $value !== null) {
            if (is_object($value) && $value instanceof Propiedad) {
                $key = (string) $value->getId();
            } elseif (is_scalar($value)) {
                // assume we've been passed a primary key
                $key = (string) $value;
            } else {
                $e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Propiedad object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
                throw $e;
            }

            unset(PropiedadPeer::$instances[$key]);
        }
    } // removeInstanceFromPool()

    /**
     * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
     *
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, a serialize()d version of the primary key will be returned.
     *
     * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
     * @return   Propiedad Found object or null if 1) no instance exists for specified key or 2) instance pooling has been disabled.
     * @see        getPrimaryKeyHash()
     */
    public static function getInstanceFromPool($key)
    {
        if (Propel::isInstancePoolingEnabled()) {
            if (isset(PropiedadPeer::$instances[$key])) {
                return PropiedadPeer::$instances[$key];
            }
        }

        return null; // just to be explicit
    }

    /**
     * Clear the instance pool.
     *
     * @return void
     */
    public static function clearInstancePool()
    {
        PropiedadPeer::$instances = array();
    }

    /**
     * Method to invalidate the instance pool of all tables related to propiedad
     * by a foreign key with ON DELETE CASCADE
     */
    public static function clearRelatedInstancePool()
    {
    }

    /**
     * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
     *
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, a serialize()d version of the primary key will be returned.
     *
     * @param      array $row PropelPDO resultset row.
     * @param      int $startcol The 0-based offset for reading from the resultset row.
     * @return string A string version of PK or null if the components of primary key in result array are all null.
     */
    public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
    {
        // If the PK cannot be derived from the row, return null.
        if ($row[$startcol] === null) {
            return null;
        }

        return (string) $row[$startcol];
    }

    /**
     * Retrieves the primary key from the DB resultset row
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, an array of the primary key columns will be returned.
     *
     * @param      array $row PropelPDO resultset row.
     * @param      int $startcol The 0-based offset for reading from the resultset row.
     * @return mixed The primary key of the row
     */
    public static function getPrimaryKeyFromRow($row, $startcol = 0)
    {

        return (int) $row[$startcol];
    }

    /**
     * The returned array will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function populateObjects(PDOStatement $stmt)
    {
        $results = array();

        // set the class once to avoid overhead in the loop
        $cls = PropiedadPeer::getOMClass();
        // populate the object(s)
        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key = PropiedadPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj = PropiedadPeer::getInstanceFromPool($key))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj->hydrate($row, 0, true); // rehydrate
                $results[] = $obj;
            } else {
                $obj = new $cls();
                $obj->hydrate($row);
                $results[] = $obj;
                PropiedadPeer::addInstanceToPool($obj, $key);
            } // if key exists
        }
        $stmt->closeCursor();

        return $results;
    }
    /**
     * Populates an object of the default type or an object that inherit from the default.
     *
     * @param      array $row PropelPDO resultset row.
     * @param      int $startcol The 0-based offset for reading from the resultset row.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     * @return array (Propiedad object, last column rank)
     */
    public static function populateObject($row, $startcol = 0)
    {
        $key = PropiedadPeer::getPrimaryKeyHashFromRow($row, $startcol);
        if (null !== ($obj = PropiedadPeer::getInstanceFromPool($key))) {
            // We no longer rehydrate the object, since this can cause data loss.
            // See http://www.propelorm.org/ticket/509
            // $obj->hydrate($row, $startcol, true); // rehydrate
            $col = $startcol + PropiedadPeer::NUM_HYDRATE_COLUMNS;
        } else {
            $cls = PropiedadPeer::OM_CLASS;
            $obj = new $cls();
            $col = $obj->hydrate($row, $startcol);
            PropiedadPeer::addInstanceToPool($obj, $key);
        }

        return array($obj, $col);
    }


    /**
     * Returns the number of rows matching criteria, joining the related Moneda table
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return int Number of matching rows.
     */
    public static function doCountJoinMoneda(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        // we're going to modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            PropiedadPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria->addJoin(PropiedadPeer::MONEDA_ID, MonedaPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }


    /**
     * Returns the number of rows matching criteria, joining the related Departamento table
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return int Number of matching rows.
     */
    public static function doCountJoinDepartamento(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        // we're going to modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            PropiedadPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria->addJoin(PropiedadPeer::DEPARTAMENTO_ID, DepartamentoPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }


    /**
     * Returns the number of rows matching criteria, joining the related Municipio table
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return int Number of matching rows.
     */
    public static function doCountJoinMunicipio(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        // we're going to modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            PropiedadPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria->addJoin(PropiedadPeer::MUNICIPIO_ID, MunicipioPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }


    /**
     * Returns the number of rows matching criteria, joining the related Carretera table
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return int Number of matching rows.
     */
    public static function doCountJoinCarretera(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        // we're going to modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            PropiedadPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria->addJoin(PropiedadPeer::CARRETERA_ID, CarreteraPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }


    /**
     * Selects a collection of Propiedad objects pre-filled with their Moneda objects.
     * @param      Criteria  $criteria
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return array           Array of Propiedad objects.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectJoinMoneda(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $criteria = clone $criteria;

        // Set the correct dbName if it has not been overridden
        if ($criteria->getDbName() == Propel::getDefaultDB()) {
            $criteria->setDbName(PropiedadPeer::DATABASE_NAME);
        }

        PropiedadPeer::addSelectColumns($criteria);
        $startcol = PropiedadPeer::NUM_HYDRATE_COLUMNS;
        MonedaPeer::addSelectColumns($criteria);

        $criteria->addJoin(PropiedadPeer::MONEDA_ID, MonedaPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doSelect($criteria, $con);
        $results = array();

        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key1 = PropiedadPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj1 = PropiedadPeer::getInstanceFromPool($key1))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj1->hydrate($row, 0, true); // rehydrate
            } else {

                $cls = PropiedadPeer::getOMClass();

                $obj1 = new $cls();
                $obj1->hydrate($row);
                PropiedadPeer::addInstanceToPool($obj1, $key1);
            } // if $obj1 already loaded

            $key2 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol);
            if ($key2 !== null) {
                $obj2 = MonedaPeer::getInstanceFromPool($key2);
                if (!$obj2) {

                    $cls = MonedaPeer::getOMClass();

                    $obj2 = new $cls();
                    $obj2->hydrate($row, $startcol);
                    MonedaPeer::addInstanceToPool($obj2, $key2);
                } // if obj2 already loaded

                // Add the $obj1 (Propiedad) to $obj2 (Moneda)
                $obj2->addPropiedad($obj1);

            } // if joined row was not null

            $results[] = $obj1;
        }
        $stmt->closeCursor();

        return $results;
    }


    /**
     * Selects a collection of Propiedad objects pre-filled with their Departamento objects.
     * @param      Criteria  $criteria
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return array           Array of Propiedad objects.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectJoinDepartamento(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $criteria = clone $criteria;

        // Set the correct dbName if it has not been overridden
        if ($criteria->getDbName() == Propel::getDefaultDB()) {
            $criteria->setDbName(PropiedadPeer::DATABASE_NAME);
        }

        PropiedadPeer::addSelectColumns($criteria);
        $startcol = PropiedadPeer::NUM_HYDRATE_COLUMNS;
        DepartamentoPeer::addSelectColumns($criteria);

        $criteria->addJoin(PropiedadPeer::DEPARTAMENTO_ID, DepartamentoPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doSelect($criteria, $con);
        $results = array();

        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key1 = PropiedadPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj1 = PropiedadPeer::getInstanceFromPool($key1))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj1->hydrate($row, 0, true); // rehydrate
            } else {

                $cls = PropiedadPeer::getOMClass();

                $obj1 = new $cls();
                $obj1->hydrate($row);
                PropiedadPeer::addInstanceToPool($obj1, $key1);
            } // if $obj1 already loaded

            $key2 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol);
            if ($key2 !== null) {
                $obj2 = DepartamentoPeer::getInstanceFromPool($key2);
                if (!$obj2) {

                    $cls = DepartamentoPeer::getOMClass();

                    $obj2 = new $cls();
                    $obj2->hydrate($row, $startcol);
                    DepartamentoPeer::addInstanceToPool($obj2, $key2);
                } // if obj2 already loaded

                // Add the $obj1 (Propiedad) to $obj2 (Departamento)
                $obj2->addPropiedad($obj1);

            } // if joined row was not null

            $results[] = $obj1;
        }
        $stmt->closeCursor();

        return $results;
    }


    /**
     * Selects a collection of Propiedad objects pre-filled with their Municipio objects.
     * @param      Criteria  $criteria
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return array           Array of Propiedad objects.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectJoinMunicipio(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $criteria = clone $criteria;

        // Set the correct dbName if it has not been overridden
        if ($criteria->getDbName() == Propel::getDefaultDB()) {
            $criteria->setDbName(PropiedadPeer::DATABASE_NAME);
        }

        PropiedadPeer::addSelectColumns($criteria);
        $startcol = PropiedadPeer::NUM_HYDRATE_COLUMNS;
        MunicipioPeer::addSelectColumns($criteria);

        $criteria->addJoin(PropiedadPeer::MUNICIPIO_ID, MunicipioPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doSelect($criteria, $con);
        $results = array();

        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key1 = PropiedadPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj1 = PropiedadPeer::getInstanceFromPool($key1))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj1->hydrate($row, 0, true); // rehydrate
            } else {

                $cls = PropiedadPeer::getOMClass();

                $obj1 = new $cls();
                $obj1->hydrate($row);
                PropiedadPeer::addInstanceToPool($obj1, $key1);
            } // if $obj1 already loaded

            $key2 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol);
            if ($key2 !== null) {
                $obj2 = MunicipioPeer::getInstanceFromPool($key2);
                if (!$obj2) {

                    $cls = MunicipioPeer::getOMClass();

                    $obj2 = new $cls();
                    $obj2->hydrate($row, $startcol);
                    MunicipioPeer::addInstanceToPool($obj2, $key2);
                } // if obj2 already loaded

                // Add the $obj1 (Propiedad) to $obj2 (Municipio)
                $obj2->addPropiedad($obj1);

            } // if joined row was not null

            $results[] = $obj1;
        }
        $stmt->closeCursor();

        return $results;
    }


    /**
     * Selects a collection of Propiedad objects pre-filled with their Carretera objects.
     * @param      Criteria  $criteria
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return array           Array of Propiedad objects.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectJoinCarretera(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $criteria = clone $criteria;

        // Set the correct dbName if it has not been overridden
        if ($criteria->getDbName() == Propel::getDefaultDB()) {
            $criteria->setDbName(PropiedadPeer::DATABASE_NAME);
        }

        PropiedadPeer::addSelectColumns($criteria);
        $startcol = PropiedadPeer::NUM_HYDRATE_COLUMNS;
        CarreteraPeer::addSelectColumns($criteria);

        $criteria->addJoin(PropiedadPeer::CARRETERA_ID, CarreteraPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doSelect($criteria, $con);
        $results = array();

        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key1 = PropiedadPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj1 = PropiedadPeer::getInstanceFromPool($key1))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj1->hydrate($row, 0, true); // rehydrate
            } else {

                $cls = PropiedadPeer::getOMClass();

                $obj1 = new $cls();
                $obj1->hydrate($row);
                PropiedadPeer::addInstanceToPool($obj1, $key1);
            } // if $obj1 already loaded

            $key2 = CarreteraPeer::getPrimaryKeyHashFromRow($row, $startcol);
            if ($key2 !== null) {
                $obj2 = CarreteraPeer::getInstanceFromPool($key2);
                if (!$obj2) {

                    $cls = CarreteraPeer::getOMClass();

                    $obj2 = new $cls();
                    $obj2->hydrate($row, $startcol);
                    CarreteraPeer::addInstanceToPool($obj2, $key2);
                } // if obj2 already loaded

                // Add the $obj1 (Propiedad) to $obj2 (Carretera)
                $obj2->addPropiedad($obj1);

            } // if joined row was not null

            $results[] = $obj1;
        }
        $stmt->closeCursor();

        return $results;
    }


    /**
     * Returns the number of rows matching criteria, joining all related tables
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return int Number of matching rows.
     */
    public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        // we're going to modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            PropiedadPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria->addJoin(PropiedadPeer::MONEDA_ID, MonedaPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::DEPARTAMENTO_ID, DepartamentoPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::MUNICIPIO_ID, MunicipioPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::CARRETERA_ID, CarreteraPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }

    /**
     * Selects a collection of Propiedad objects pre-filled with all related objects.
     *
     * @param      Criteria  $criteria
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return array           Array of Propiedad objects.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $criteria = clone $criteria;

        // Set the correct dbName if it has not been overridden
        if ($criteria->getDbName() == Propel::getDefaultDB()) {
            $criteria->setDbName(PropiedadPeer::DATABASE_NAME);
        }

        PropiedadPeer::addSelectColumns($criteria);
        $startcol2 = PropiedadPeer::NUM_HYDRATE_COLUMNS;

        MonedaPeer::addSelectColumns($criteria);
        $startcol3 = $startcol2 + MonedaPeer::NUM_HYDRATE_COLUMNS;

        DepartamentoPeer::addSelectColumns($criteria);
        $startcol4 = $startcol3 + DepartamentoPeer::NUM_HYDRATE_COLUMNS;

        MunicipioPeer::addSelectColumns($criteria);
        $startcol5 = $startcol4 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

        CarreteraPeer::addSelectColumns($criteria);
        $startcol6 = $startcol5 + CarreteraPeer::NUM_HYDRATE_COLUMNS;

        $criteria->addJoin(PropiedadPeer::MONEDA_ID, MonedaPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::DEPARTAMENTO_ID, DepartamentoPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::MUNICIPIO_ID, MunicipioPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::CARRETERA_ID, CarreteraPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doSelect($criteria, $con);
        $results = array();

        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key1 = PropiedadPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj1 = PropiedadPeer::getInstanceFromPool($key1))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj1->hydrate($row, 0, true); // rehydrate
            } else {
                $cls = PropiedadPeer::getOMClass();

                $obj1 = new $cls();
                $obj1->hydrate($row);
                PropiedadPeer::addInstanceToPool($obj1, $key1);
            } // if obj1 already loaded

            // Add objects for joined Moneda rows

            $key2 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol2);
            if ($key2 !== null) {
                $obj2 = MonedaPeer::getInstanceFromPool($key2);
                if (!$obj2) {

                    $cls = MonedaPeer::getOMClass();

                    $obj2 = new $cls();
                    $obj2->hydrate($row, $startcol2);
                    MonedaPeer::addInstanceToPool($obj2, $key2);
                } // if obj2 loaded

                // Add the $obj1 (Propiedad) to the collection in $obj2 (Moneda)
                $obj2->addPropiedad($obj1);
            } // if joined row not null

            // Add objects for joined Departamento rows

            $key3 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
            if ($key3 !== null) {
                $obj3 = DepartamentoPeer::getInstanceFromPool($key3);
                if (!$obj3) {

                    $cls = DepartamentoPeer::getOMClass();

                    $obj3 = new $cls();
                    $obj3->hydrate($row, $startcol3);
                    DepartamentoPeer::addInstanceToPool($obj3, $key3);
                } // if obj3 loaded

                // Add the $obj1 (Propiedad) to the collection in $obj3 (Departamento)
                $obj3->addPropiedad($obj1);
            } // if joined row not null

            // Add objects for joined Municipio rows

            $key4 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol4);
            if ($key4 !== null) {
                $obj4 = MunicipioPeer::getInstanceFromPool($key4);
                if (!$obj4) {

                    $cls = MunicipioPeer::getOMClass();

                    $obj4 = new $cls();
                    $obj4->hydrate($row, $startcol4);
                    MunicipioPeer::addInstanceToPool($obj4, $key4);
                } // if obj4 loaded

                // Add the $obj1 (Propiedad) to the collection in $obj4 (Municipio)
                $obj4->addPropiedad($obj1);
            } // if joined row not null

            // Add objects for joined Carretera rows

            $key5 = CarreteraPeer::getPrimaryKeyHashFromRow($row, $startcol5);
            if ($key5 !== null) {
                $obj5 = CarreteraPeer::getInstanceFromPool($key5);
                if (!$obj5) {

                    $cls = CarreteraPeer::getOMClass();

                    $obj5 = new $cls();
                    $obj5->hydrate($row, $startcol5);
                    CarreteraPeer::addInstanceToPool($obj5, $key5);
                } // if obj5 loaded

                // Add the $obj1 (Propiedad) to the collection in $obj5 (Carretera)
                $obj5->addPropiedad($obj1);
            } // if joined row not null

            $results[] = $obj1;
        }
        $stmt->closeCursor();

        return $results;
    }


    /**
     * Returns the number of rows matching criteria, joining the related Moneda table
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return int Number of matching rows.
     */
    public static function doCountJoinAllExceptMoneda(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        // we're going to modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            PropiedadPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY should not affect count

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria->addJoin(PropiedadPeer::DEPARTAMENTO_ID, DepartamentoPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::MUNICIPIO_ID, MunicipioPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::CARRETERA_ID, CarreteraPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }


    /**
     * Returns the number of rows matching criteria, joining the related Departamento table
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return int Number of matching rows.
     */
    public static function doCountJoinAllExceptDepartamento(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        // we're going to modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            PropiedadPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY should not affect count

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria->addJoin(PropiedadPeer::MONEDA_ID, MonedaPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::MUNICIPIO_ID, MunicipioPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::CARRETERA_ID, CarreteraPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }


    /**
     * Returns the number of rows matching criteria, joining the related Municipio table
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return int Number of matching rows.
     */
    public static function doCountJoinAllExceptMunicipio(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        // we're going to modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            PropiedadPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY should not affect count

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria->addJoin(PropiedadPeer::MONEDA_ID, MonedaPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::DEPARTAMENTO_ID, DepartamentoPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::CARRETERA_ID, CarreteraPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }


    /**
     * Returns the number of rows matching criteria, joining the related Carretera table
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return int Number of matching rows.
     */
    public static function doCountJoinAllExceptCarretera(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        // we're going to modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            PropiedadPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY should not affect count

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria->addJoin(PropiedadPeer::MONEDA_ID, MonedaPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::DEPARTAMENTO_ID, DepartamentoPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::MUNICIPIO_ID, MunicipioPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }

        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }


    /**
     * Selects a collection of Propiedad objects pre-filled with all related objects except Moneda.
     *
     * @param      Criteria  $criteria
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return array           Array of Propiedad objects.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectJoinAllExceptMoneda(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $criteria = clone $criteria;

        // Set the correct dbName if it has not been overridden
        // $criteria->getDbName() will return the same object if not set to another value
        // so == check is okay and faster
        if ($criteria->getDbName() == Propel::getDefaultDB()) {
            $criteria->setDbName(PropiedadPeer::DATABASE_NAME);
        }

        PropiedadPeer::addSelectColumns($criteria);
        $startcol2 = PropiedadPeer::NUM_HYDRATE_COLUMNS;

        DepartamentoPeer::addSelectColumns($criteria);
        $startcol3 = $startcol2 + DepartamentoPeer::NUM_HYDRATE_COLUMNS;

        MunicipioPeer::addSelectColumns($criteria);
        $startcol4 = $startcol3 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

        CarreteraPeer::addSelectColumns($criteria);
        $startcol5 = $startcol4 + CarreteraPeer::NUM_HYDRATE_COLUMNS;

        $criteria->addJoin(PropiedadPeer::DEPARTAMENTO_ID, DepartamentoPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::MUNICIPIO_ID, MunicipioPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::CARRETERA_ID, CarreteraPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }


        $stmt = BasePeer::doSelect($criteria, $con);
        $results = array();

        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key1 = PropiedadPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj1 = PropiedadPeer::getInstanceFromPool($key1))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj1->hydrate($row, 0, true); // rehydrate
            } else {
                $cls = PropiedadPeer::getOMClass();

                $obj1 = new $cls();
                $obj1->hydrate($row);
                PropiedadPeer::addInstanceToPool($obj1, $key1);
            } // if obj1 already loaded

                // Add objects for joined Departamento rows

                $key2 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol2);
                if ($key2 !== null) {
                    $obj2 = DepartamentoPeer::getInstanceFromPool($key2);
                    if (!$obj2) {

                        $cls = DepartamentoPeer::getOMClass();

                    $obj2 = new $cls();
                    $obj2->hydrate($row, $startcol2);
                    DepartamentoPeer::addInstanceToPool($obj2, $key2);
                } // if $obj2 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj2 (Departamento)
                $obj2->addPropiedad($obj1);

            } // if joined row is not null

                // Add objects for joined Municipio rows

                $key3 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol3);
                if ($key3 !== null) {
                    $obj3 = MunicipioPeer::getInstanceFromPool($key3);
                    if (!$obj3) {

                        $cls = MunicipioPeer::getOMClass();

                    $obj3 = new $cls();
                    $obj3->hydrate($row, $startcol3);
                    MunicipioPeer::addInstanceToPool($obj3, $key3);
                } // if $obj3 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj3 (Municipio)
                $obj3->addPropiedad($obj1);

            } // if joined row is not null

                // Add objects for joined Carretera rows

                $key4 = CarreteraPeer::getPrimaryKeyHashFromRow($row, $startcol4);
                if ($key4 !== null) {
                    $obj4 = CarreteraPeer::getInstanceFromPool($key4);
                    if (!$obj4) {

                        $cls = CarreteraPeer::getOMClass();

                    $obj4 = new $cls();
                    $obj4->hydrate($row, $startcol4);
                    CarreteraPeer::addInstanceToPool($obj4, $key4);
                } // if $obj4 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj4 (Carretera)
                $obj4->addPropiedad($obj1);

            } // if joined row is not null

            $results[] = $obj1;
        }
        $stmt->closeCursor();

        return $results;
    }


    /**
     * Selects a collection of Propiedad objects pre-filled with all related objects except Departamento.
     *
     * @param      Criteria  $criteria
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return array           Array of Propiedad objects.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectJoinAllExceptDepartamento(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $criteria = clone $criteria;

        // Set the correct dbName if it has not been overridden
        // $criteria->getDbName() will return the same object if not set to another value
        // so == check is okay and faster
        if ($criteria->getDbName() == Propel::getDefaultDB()) {
            $criteria->setDbName(PropiedadPeer::DATABASE_NAME);
        }

        PropiedadPeer::addSelectColumns($criteria);
        $startcol2 = PropiedadPeer::NUM_HYDRATE_COLUMNS;

        MonedaPeer::addSelectColumns($criteria);
        $startcol3 = $startcol2 + MonedaPeer::NUM_HYDRATE_COLUMNS;

        MunicipioPeer::addSelectColumns($criteria);
        $startcol4 = $startcol3 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

        CarreteraPeer::addSelectColumns($criteria);
        $startcol5 = $startcol4 + CarreteraPeer::NUM_HYDRATE_COLUMNS;

        $criteria->addJoin(PropiedadPeer::MONEDA_ID, MonedaPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::MUNICIPIO_ID, MunicipioPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::CARRETERA_ID, CarreteraPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }


        $stmt = BasePeer::doSelect($criteria, $con);
        $results = array();

        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key1 = PropiedadPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj1 = PropiedadPeer::getInstanceFromPool($key1))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj1->hydrate($row, 0, true); // rehydrate
            } else {
                $cls = PropiedadPeer::getOMClass();

                $obj1 = new $cls();
                $obj1->hydrate($row);
                PropiedadPeer::addInstanceToPool($obj1, $key1);
            } // if obj1 already loaded

                // Add objects for joined Moneda rows

                $key2 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol2);
                if ($key2 !== null) {
                    $obj2 = MonedaPeer::getInstanceFromPool($key2);
                    if (!$obj2) {

                        $cls = MonedaPeer::getOMClass();

                    $obj2 = new $cls();
                    $obj2->hydrate($row, $startcol2);
                    MonedaPeer::addInstanceToPool($obj2, $key2);
                } // if $obj2 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj2 (Moneda)
                $obj2->addPropiedad($obj1);

            } // if joined row is not null

                // Add objects for joined Municipio rows

                $key3 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol3);
                if ($key3 !== null) {
                    $obj3 = MunicipioPeer::getInstanceFromPool($key3);
                    if (!$obj3) {

                        $cls = MunicipioPeer::getOMClass();

                    $obj3 = new $cls();
                    $obj3->hydrate($row, $startcol3);
                    MunicipioPeer::addInstanceToPool($obj3, $key3);
                } // if $obj3 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj3 (Municipio)
                $obj3->addPropiedad($obj1);

            } // if joined row is not null

                // Add objects for joined Carretera rows

                $key4 = CarreteraPeer::getPrimaryKeyHashFromRow($row, $startcol4);
                if ($key4 !== null) {
                    $obj4 = CarreteraPeer::getInstanceFromPool($key4);
                    if (!$obj4) {

                        $cls = CarreteraPeer::getOMClass();

                    $obj4 = new $cls();
                    $obj4->hydrate($row, $startcol4);
                    CarreteraPeer::addInstanceToPool($obj4, $key4);
                } // if $obj4 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj4 (Carretera)
                $obj4->addPropiedad($obj1);

            } // if joined row is not null

            $results[] = $obj1;
        }
        $stmt->closeCursor();

        return $results;
    }


    /**
     * Selects a collection of Propiedad objects pre-filled with all related objects except Municipio.
     *
     * @param      Criteria  $criteria
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return array           Array of Propiedad objects.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectJoinAllExceptMunicipio(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $criteria = clone $criteria;

        // Set the correct dbName if it has not been overridden
        // $criteria->getDbName() will return the same object if not set to another value
        // so == check is okay and faster
        if ($criteria->getDbName() == Propel::getDefaultDB()) {
            $criteria->setDbName(PropiedadPeer::DATABASE_NAME);
        }

        PropiedadPeer::addSelectColumns($criteria);
        $startcol2 = PropiedadPeer::NUM_HYDRATE_COLUMNS;

        MonedaPeer::addSelectColumns($criteria);
        $startcol3 = $startcol2 + MonedaPeer::NUM_HYDRATE_COLUMNS;

        DepartamentoPeer::addSelectColumns($criteria);
        $startcol4 = $startcol3 + DepartamentoPeer::NUM_HYDRATE_COLUMNS;

        CarreteraPeer::addSelectColumns($criteria);
        $startcol5 = $startcol4 + CarreteraPeer::NUM_HYDRATE_COLUMNS;

        $criteria->addJoin(PropiedadPeer::MONEDA_ID, MonedaPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::DEPARTAMENTO_ID, DepartamentoPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::CARRETERA_ID, CarreteraPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }


        $stmt = BasePeer::doSelect($criteria, $con);
        $results = array();

        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key1 = PropiedadPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj1 = PropiedadPeer::getInstanceFromPool($key1))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj1->hydrate($row, 0, true); // rehydrate
            } else {
                $cls = PropiedadPeer::getOMClass();

                $obj1 = new $cls();
                $obj1->hydrate($row);
                PropiedadPeer::addInstanceToPool($obj1, $key1);
            } // if obj1 already loaded

                // Add objects for joined Moneda rows

                $key2 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol2);
                if ($key2 !== null) {
                    $obj2 = MonedaPeer::getInstanceFromPool($key2);
                    if (!$obj2) {

                        $cls = MonedaPeer::getOMClass();

                    $obj2 = new $cls();
                    $obj2->hydrate($row, $startcol2);
                    MonedaPeer::addInstanceToPool($obj2, $key2);
                } // if $obj2 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj2 (Moneda)
                $obj2->addPropiedad($obj1);

            } // if joined row is not null

                // Add objects for joined Departamento rows

                $key3 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
                if ($key3 !== null) {
                    $obj3 = DepartamentoPeer::getInstanceFromPool($key3);
                    if (!$obj3) {

                        $cls = DepartamentoPeer::getOMClass();

                    $obj3 = new $cls();
                    $obj3->hydrate($row, $startcol3);
                    DepartamentoPeer::addInstanceToPool($obj3, $key3);
                } // if $obj3 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj3 (Departamento)
                $obj3->addPropiedad($obj1);

            } // if joined row is not null

                // Add objects for joined Carretera rows

                $key4 = CarreteraPeer::getPrimaryKeyHashFromRow($row, $startcol4);
                if ($key4 !== null) {
                    $obj4 = CarreteraPeer::getInstanceFromPool($key4);
                    if (!$obj4) {

                        $cls = CarreteraPeer::getOMClass();

                    $obj4 = new $cls();
                    $obj4->hydrate($row, $startcol4);
                    CarreteraPeer::addInstanceToPool($obj4, $key4);
                } // if $obj4 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj4 (Carretera)
                $obj4->addPropiedad($obj1);

            } // if joined row is not null

            $results[] = $obj1;
        }
        $stmt->closeCursor();

        return $results;
    }


    /**
     * Selects a collection of Propiedad objects pre-filled with all related objects except Carretera.
     *
     * @param      Criteria  $criteria
     * @param      PropelPDO $con
     * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
     * @return array           Array of Propiedad objects.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectJoinAllExceptCarretera(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $criteria = clone $criteria;

        // Set the correct dbName if it has not been overridden
        // $criteria->getDbName() will return the same object if not set to another value
        // so == check is okay and faster
        if ($criteria->getDbName() == Propel::getDefaultDB()) {
            $criteria->setDbName(PropiedadPeer::DATABASE_NAME);
        }

        PropiedadPeer::addSelectColumns($criteria);
        $startcol2 = PropiedadPeer::NUM_HYDRATE_COLUMNS;

        MonedaPeer::addSelectColumns($criteria);
        $startcol3 = $startcol2 + MonedaPeer::NUM_HYDRATE_COLUMNS;

        DepartamentoPeer::addSelectColumns($criteria);
        $startcol4 = $startcol3 + DepartamentoPeer::NUM_HYDRATE_COLUMNS;

        MunicipioPeer::addSelectColumns($criteria);
        $startcol5 = $startcol4 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

        $criteria->addJoin(PropiedadPeer::MONEDA_ID, MonedaPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::DEPARTAMENTO_ID, DepartamentoPeer::ID, $join_behavior);

        $criteria->addJoin(PropiedadPeer::MUNICIPIO_ID, MunicipioPeer::ID, $join_behavior);

        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BasePropiedadPeer', $criteria, $con);
        }


        $stmt = BasePeer::doSelect($criteria, $con);
        $results = array();

        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key1 = PropiedadPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj1 = PropiedadPeer::getInstanceFromPool($key1))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj1->hydrate($row, 0, true); // rehydrate
            } else {
                $cls = PropiedadPeer::getOMClass();

                $obj1 = new $cls();
                $obj1->hydrate($row);
                PropiedadPeer::addInstanceToPool($obj1, $key1);
            } // if obj1 already loaded

                // Add objects for joined Moneda rows

                $key2 = MonedaPeer::getPrimaryKeyHashFromRow($row, $startcol2);
                if ($key2 !== null) {
                    $obj2 = MonedaPeer::getInstanceFromPool($key2);
                    if (!$obj2) {

                        $cls = MonedaPeer::getOMClass();

                    $obj2 = new $cls();
                    $obj2->hydrate($row, $startcol2);
                    MonedaPeer::addInstanceToPool($obj2, $key2);
                } // if $obj2 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj2 (Moneda)
                $obj2->addPropiedad($obj1);

            } // if joined row is not null

                // Add objects for joined Departamento rows

                $key3 = DepartamentoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
                if ($key3 !== null) {
                    $obj3 = DepartamentoPeer::getInstanceFromPool($key3);
                    if (!$obj3) {

                        $cls = DepartamentoPeer::getOMClass();

                    $obj3 = new $cls();
                    $obj3->hydrate($row, $startcol3);
                    DepartamentoPeer::addInstanceToPool($obj3, $key3);
                } // if $obj3 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj3 (Departamento)
                $obj3->addPropiedad($obj1);

            } // if joined row is not null

                // Add objects for joined Municipio rows

                $key4 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol4);
                if ($key4 !== null) {
                    $obj4 = MunicipioPeer::getInstanceFromPool($key4);
                    if (!$obj4) {

                        $cls = MunicipioPeer::getOMClass();

                    $obj4 = new $cls();
                    $obj4->hydrate($row, $startcol4);
                    MunicipioPeer::addInstanceToPool($obj4, $key4);
                } // if $obj4 already loaded

                // Add the $obj1 (Propiedad) to the collection in $obj4 (Municipio)
                $obj4->addPropiedad($obj1);

            } // if joined row is not null

            $results[] = $obj1;
        }
        $stmt->closeCursor();

        return $results;
    }

    /**
     * Returns the TableMap related to this peer.
     * This method is not needed for general use but a specific application could have a need.
     * @return TableMap
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function getTableMap()
    {
        return Propel::getDatabaseMap(PropiedadPeer::DATABASE_NAME)->getTable(PropiedadPeer::TABLE_NAME);
    }

    /**
     * Add a TableMap instance to the database for this peer class.
     */
    public static function buildTableMap()
    {
      $dbMap = Propel::getDatabaseMap(BasePropiedadPeer::DATABASE_NAME);
      if (!$dbMap->hasTable(BasePropiedadPeer::TABLE_NAME)) {
        $dbMap->addTableObject(new PropiedadTableMap());
      }
    }

    /**
     * The class that the Peer will make instances of.
     *
     *
     * @return string ClassName
     */
    public static function getOMClass()
    {
        return PropiedadPeer::OM_CLASS;
    }

    /**
     * Performs an INSERT on the database, given a Propiedad or Criteria object.
     *
     * @param      mixed $values Criteria or Propiedad object containing data that is used to create the INSERT statement.
     * @param      PropelPDO $con the PropelPDO connection to use
     * @return mixed           The new primary key.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doInsert($values, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        if ($values instanceof Criteria) {
            $criteria = clone $values; // rename for clarity
        } else {
            $criteria = $values->buildCriteria(); // build Criteria from Propiedad object
        }

        if ($criteria->containsKey(PropiedadPeer::ID) && $criteria->keyContainsValue(PropiedadPeer::ID) ) {
            throw new PropelException('Cannot insert a value for auto-increment primary key ('.PropiedadPeer::ID.')');
        }


        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        try {
            // use transaction because $criteria could contain info
            // for more than one table (I guess, conceivably)
            $con->beginTransaction();
            $pk = BasePeer::doInsert($criteria, $con);
            $con->commit();
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }

        return $pk;
    }

    /**
     * Performs an UPDATE on the database, given a Propiedad or Criteria object.
     *
     * @param      mixed $values Criteria or Propiedad object containing data that is used to create the UPDATE statement.
     * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
     * @return int             The number of affected rows (if supported by underlying database driver).
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doUpdate($values, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $selectCriteria = new Criteria(PropiedadPeer::DATABASE_NAME);

        if ($values instanceof Criteria) {
            $criteria = clone $values; // rename for clarity

            $comparison = $criteria->getComparison(PropiedadPeer::ID);
            $value = $criteria->remove(PropiedadPeer::ID);
            if ($value) {
                $selectCriteria->add(PropiedadPeer::ID, $value, $comparison);
            } else {
                $selectCriteria->setPrimaryTableName(PropiedadPeer::TABLE_NAME);
            }

        } else { // $values is Propiedad object
            $criteria = $values->buildCriteria(); // gets full criteria
            $selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
        }

        // set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        return BasePeer::doUpdate($selectCriteria, $criteria, $con);
    }

    /**
     * Deletes all rows from the propiedad table.
     *
     * @param      PropelPDO $con the connection to use
     * @return int             The number of affected rows (if supported by underlying database driver).
     * @throws PropelException
     */
    public static function doDeleteAll(PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }
        $affectedRows = 0; // initialize var to track total num of affected rows
        try {
            // use transaction because $criteria could contain info
            // for more than one table or we could emulating ON DELETE CASCADE, etc.
            $con->beginTransaction();
            $affectedRows += BasePeer::doDeleteAll(PropiedadPeer::TABLE_NAME, $con, PropiedadPeer::DATABASE_NAME);
            // Because this db requires some delete cascade/set null emulation, we have to
            // clear the cached instance *after* the emulation has happened (since
            // instances get re-added by the select statement contained therein).
            PropiedadPeer::clearInstancePool();
            PropiedadPeer::clearRelatedInstancePool();
            $con->commit();

            return $affectedRows;
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs a DELETE on the database, given a Propiedad or Criteria object OR a primary key value.
     *
     * @param      mixed $values Criteria or Propiedad object or primary key or array of primary keys
     *              which is used to create the DELETE statement
     * @param      PropelPDO $con the connection to use
     * @return int The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
     *				if supported by native driver or if emulated using Propel.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
     public static function doDelete($values, PropelPDO $con = null)
     {
        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        if ($values instanceof Criteria) {
            // invalidate the cache for all objects of this type, since we have no
            // way of knowing (without running a query) what objects should be invalidated
            // from the cache based on this Criteria.
            PropiedadPeer::clearInstancePool();
            // rename for clarity
            $criteria = clone $values;
        } elseif ($values instanceof Propiedad) { // it's a model object
            // invalidate the cache for this single object
            PropiedadPeer::removeInstanceFromPool($values);
            // create criteria based on pk values
            $criteria = $values->buildPkeyCriteria();
        } else { // it's a primary key, or an array of pks
            $criteria = new Criteria(PropiedadPeer::DATABASE_NAME);
            $criteria->add(PropiedadPeer::ID, (array) $values, Criteria::IN);
            // invalidate the cache for this object(s)
            foreach ((array) $values as $singleval) {
                PropiedadPeer::removeInstanceFromPool($singleval);
            }
        }

        // Set the correct dbName
        $criteria->setDbName(PropiedadPeer::DATABASE_NAME);

        $affectedRows = 0; // initialize var to track total num of affected rows

        try {
            // use transaction because $criteria could contain info
            // for more than one table or we could emulating ON DELETE CASCADE, etc.
            $con->beginTransaction();

            $affectedRows += BasePeer::doDelete($criteria, $con);
            PropiedadPeer::clearRelatedInstancePool();
            $con->commit();

            return $affectedRows;
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Validates all modified columns of given Propiedad object.
     * If parameter $columns is either a single column name or an array of column names
     * than only those columns are validated.
     *
     * NOTICE: This does not apply to primary or foreign keys for now.
     *
     * @param      Propiedad $obj The object to validate.
     * @param      mixed $cols Column name or array of column names.
     *
     * @return mixed TRUE if all columns are valid or the error message of the first invalid column.
     */
    public static function doValidate($obj, $cols = null)
    {
        $columns = array();

        if ($cols) {
            $dbMap = Propel::getDatabaseMap(PropiedadPeer::DATABASE_NAME);
            $tableMap = $dbMap->getTable(PropiedadPeer::TABLE_NAME);

            if (! is_array($cols)) {
                $cols = array($cols);
            }

            foreach ($cols as $colName) {
                if ($tableMap->hasColumn($colName)) {
                    $get = 'get' . $tableMap->getColumn($colName)->getPhpName();
                    $columns[$colName] = $obj->$get();
                }
            }
        } else {

        }

        return BasePeer::doValidate(PropiedadPeer::DATABASE_NAME, PropiedadPeer::TABLE_NAME, $columns);
    }

    /**
     * Retrieve a single object by pkey.
     *
     * @param      int $pk the primary key.
     * @param      PropelPDO $con the connection to use
     * @return Propiedad
     */
    public static function retrieveByPK($pk, PropelPDO $con = null)
    {

        if (null !== ($obj = PropiedadPeer::getInstanceFromPool((string) $pk))) {
            return $obj;
        }

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria = new Criteria(PropiedadPeer::DATABASE_NAME);
        $criteria->add(PropiedadPeer::ID, $pk);

        $v = PropiedadPeer::doSelect($criteria, $con);

        return !empty($v) > 0 ? $v[0] : null;
    }

    /**
     * Retrieve multiple objects by pkey.
     *
     * @param      array $pks List of primary keys
     * @param      PropelPDO $con the connection to use
     * @return Propiedad[]
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function retrieveByPKs($pks, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $objs = null;
        if (empty($pks)) {
            $objs = array();
        } else {
            $criteria = new Criteria(PropiedadPeer::DATABASE_NAME);
            $criteria->add(PropiedadPeer::ID, $pks, Criteria::IN);
            $objs = PropiedadPeer::doSelect($criteria, $con);
        }

        return $objs;
    }

    // symfony behavior

    /**
     * Returns an array of arrays that contain columns in each unique index.
     *
     * @return array
     */
    static public function getUniqueColumnNames()
    {
      return array();
    }

    // symfony_behaviors behavior

    /**
     * Returns the name of the hook to call from inside the supplied method.
     *
     * @param string $method The calling method
     *
     * @return string A hook name for {@link sfMixer}
     *
     * @throws LogicException If the method name is not recognized
     */
    static private function getMixerPreSelectHook($method)
    {
      if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
      {
        return sprintf('BasePropiedadPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
      }

      throw new LogicException(sprintf('Unrecognized function "%s"', $method));
    }

} // BasePropiedadPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BasePropiedadPeer::buildTableMap();

