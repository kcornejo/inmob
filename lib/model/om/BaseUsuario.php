<?php


/**
 * Base class that represents a row from the 'usuario' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Mon Feb  5 12:49:09 2018
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseUsuario extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'UsuarioPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        UsuarioPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the usuario field.
     * @var        string
     */
    protected $usuario;

    /**
     * The value for the clave field.
     * @var        string
     */
    protected $clave;

    /**
     * The value for the correo field.
     * @var        string
     */
    protected $correo;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * The value for the created_by field.
     * @var        string
     */
    protected $created_by;

    /**
     * The value for the updated_by field.
     * @var        string
     */
    protected $updated_by;

    /**
     * The value for the activo field.
     * Note: this column has a database default value of: true
     * @var        boolean
     */
    protected $activo;

    /**
     * The value for the email field.
     * @var        string
     */
    protected $email;

    /**
     * The value for the numero_telefono field.
     * @var        string
     */
    protected $numero_telefono;

    /**
     * The value for the perfil_id field.
     * @var        int
     */
    protected $perfil_id;

    /**
     * The value for the administrador field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $administrador;

    /**
     * The value for the nombre_completo field.
     * @var        string
     */
    protected $nombre_completo;

    /**
     * @var        Perfil
     */
    protected $aPerfil;

    /**
     * @var        PropelObjectCollection|Negocio[] Collection to store aggregation of Negocio objects.
     */
    protected $collNegociosRelatedByUsuarioReq;
    protected $collNegociosRelatedByUsuarioReqPartial;

    /**
     * @var        PropelObjectCollection|Negocio[] Collection to store aggregation of Negocio objects.
     */
    protected $collNegociosRelatedByUsuarioProp;
    protected $collNegociosRelatedByUsuarioPropPartial;

    /**
     * @var        PropelObjectCollection|Requerimiento[] Collection to store aggregation of Requerimiento objects.
     */
    protected $collRequerimientos;
    protected $collRequerimientosPartial;

    /**
     * @var        PropelObjectCollection|Propiedad[] Collection to store aggregation of Propiedad objects.
     */
    protected $collPropiedads;
    protected $collPropiedadsPartial;

    /**
     * @var        PropelObjectCollection|Token[] Collection to store aggregation of Token objects.
     */
    protected $collTokens;
    protected $collTokensPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $negociosRelatedByUsuarioReqScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $negociosRelatedByUsuarioPropScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $requerimientosScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $propiedadsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $tokensScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->activo = true;
        $this->administrador = false;
    }

    /**
     * Initializes internal state of BaseUsuario object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [usuario] column value.
     *
     * @return string
     */
    public function getUsuario()
    {
        return $this->usuario;
    }

    /**
     * Get the [clave] column value.
     *
     * @return string
     */
    public function getClave()
    {
        return $this->clave;
    }

    /**
     * Get the [correo] column value.
     *
     * @return string
     */
    public function getCorreo()
    {
        return $this->correo;
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->updated_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [created_by] column value.
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->created_by;
    }

    /**
     * Get the [updated_by] column value.
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->updated_by;
    }

    /**
     * Get the [activo] column value.
     *
     * @return boolean
     */
    public function getActivo()
    {
        return $this->activo;
    }

    /**
     * Get the [email] column value.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Get the [numero_telefono] column value.
     *
     * @return string
     */
    public function getNumeroTelefono()
    {
        return $this->numero_telefono;
    }

    /**
     * Get the [perfil_id] column value.
     *
     * @return int
     */
    public function getPerfilId()
    {
        return $this->perfil_id;
    }

    /**
     * Get the [administrador] column value.
     *
     * @return boolean
     */
    public function getAdministrador()
    {
        return $this->administrador;
    }

    /**
     * Get the [nombre_completo] column value.
     *
     * @return string
     */
    public function getNombreCompleto()
    {
        return $this->nombre_completo;
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = UsuarioPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [usuario] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setUsuario($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->usuario !== $v) {
            $this->usuario = $v;
            $this->modifiedColumns[] = UsuarioPeer::USUARIO;
        }


        return $this;
    } // setUsuario()

    /**
     * Set the value of [clave] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setClave($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->clave !== $v) {
            $this->clave = $v;
            $this->modifiedColumns[] = UsuarioPeer::CLAVE;
        }


        return $this;
    } // setClave()

    /**
     * Set the value of [correo] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setCorreo($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->correo !== $v) {
            $this->correo = $v;
            $this->modifiedColumns[] = UsuarioPeer::CORREO;
        }


        return $this;
    } // setCorreo()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Usuario The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = UsuarioPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Usuario The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = UsuarioPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Set the value of [created_by] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setCreatedBy($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->created_by !== $v) {
            $this->created_by = $v;
            $this->modifiedColumns[] = UsuarioPeer::CREATED_BY;
        }


        return $this;
    } // setCreatedBy()

    /**
     * Set the value of [updated_by] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setUpdatedBy($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->updated_by !== $v) {
            $this->updated_by = $v;
            $this->modifiedColumns[] = UsuarioPeer::UPDATED_BY;
        }


        return $this;
    } // setUpdatedBy()

    /**
     * Sets the value of the [activo] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setActivo($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->activo !== $v) {
            $this->activo = $v;
            $this->modifiedColumns[] = UsuarioPeer::ACTIVO;
        }


        return $this;
    } // setActivo()

    /**
     * Set the value of [email] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setEmail($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->email !== $v) {
            $this->email = $v;
            $this->modifiedColumns[] = UsuarioPeer::EMAIL;
        }


        return $this;
    } // setEmail()

    /**
     * Set the value of [numero_telefono] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setNumeroTelefono($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->numero_telefono !== $v) {
            $this->numero_telefono = $v;
            $this->modifiedColumns[] = UsuarioPeer::NUMERO_TELEFONO;
        }


        return $this;
    } // setNumeroTelefono()

    /**
     * Set the value of [perfil_id] column.
     *
     * @param int $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setPerfilId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->perfil_id !== $v) {
            $this->perfil_id = $v;
            $this->modifiedColumns[] = UsuarioPeer::PERFIL_ID;
        }

        if ($this->aPerfil !== null && $this->aPerfil->getId() !== $v) {
            $this->aPerfil = null;
        }


        return $this;
    } // setPerfilId()

    /**
     * Sets the value of the [administrador] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setAdministrador($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->administrador !== $v) {
            $this->administrador = $v;
            $this->modifiedColumns[] = UsuarioPeer::ADMINISTRADOR;
        }


        return $this;
    } // setAdministrador()

    /**
     * Set the value of [nombre_completo] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setNombreCompleto($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->nombre_completo !== $v) {
            $this->nombre_completo = $v;
            $this->modifiedColumns[] = UsuarioPeer::NOMBRE_COMPLETO;
        }


        return $this;
    } // setNombreCompleto()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->activo !== true) {
                return false;
            }

            if ($this->administrador !== false) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->usuario = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->clave = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->correo = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->created_at = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->updated_at = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->created_by = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->updated_by = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->activo = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
            $this->email = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->numero_telefono = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->perfil_id = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
            $this->administrador = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
            $this->nombre_completo = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 14; // 14 = UsuarioPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Usuario object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->aPerfil !== null && $this->perfil_id !== $this->aPerfil->getId()) {
            $this->aPerfil = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = UsuarioPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->aPerfil = null;
            $this->collNegociosRelatedByUsuarioReq = null;

            $this->collNegociosRelatedByUsuarioProp = null;

            $this->collRequerimientos = null;

            $this->collPropiedads = null;

            $this->collTokens = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = UsuarioQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseUsuario:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseUsuario:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseUsuario:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(UsuarioPeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(UsuarioPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseUsuario:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                UsuarioPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aPerfil !== null) {
                if ($this->aPerfil->isModified() || $this->aPerfil->isNew()) {
                    $affectedRows += $this->aPerfil->save($con);
                }
                $this->setPerfil($this->aPerfil);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->negociosRelatedByUsuarioReqScheduledForDeletion !== null) {
                if (!$this->negociosRelatedByUsuarioReqScheduledForDeletion->isEmpty()) {
                    NegocioQuery::create()
                        ->filterByPrimaryKeys($this->negociosRelatedByUsuarioReqScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->negociosRelatedByUsuarioReqScheduledForDeletion = null;
                }
            }

            if ($this->collNegociosRelatedByUsuarioReq !== null) {
                foreach ($this->collNegociosRelatedByUsuarioReq as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->negociosRelatedByUsuarioPropScheduledForDeletion !== null) {
                if (!$this->negociosRelatedByUsuarioPropScheduledForDeletion->isEmpty()) {
                    NegocioQuery::create()
                        ->filterByPrimaryKeys($this->negociosRelatedByUsuarioPropScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->negociosRelatedByUsuarioPropScheduledForDeletion = null;
                }
            }

            if ($this->collNegociosRelatedByUsuarioProp !== null) {
                foreach ($this->collNegociosRelatedByUsuarioProp as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->requerimientosScheduledForDeletion !== null) {
                if (!$this->requerimientosScheduledForDeletion->isEmpty()) {
                    foreach ($this->requerimientosScheduledForDeletion as $requerimiento) {
                        // need to save related object because we set the relation to null
                        $requerimiento->save($con);
                    }
                    $this->requerimientosScheduledForDeletion = null;
                }
            }

            if ($this->collRequerimientos !== null) {
                foreach ($this->collRequerimientos as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->propiedadsScheduledForDeletion !== null) {
                if (!$this->propiedadsScheduledForDeletion->isEmpty()) {
                    foreach ($this->propiedadsScheduledForDeletion as $propiedad) {
                        // need to save related object because we set the relation to null
                        $propiedad->save($con);
                    }
                    $this->propiedadsScheduledForDeletion = null;
                }
            }

            if ($this->collPropiedads !== null) {
                foreach ($this->collPropiedads as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->tokensScheduledForDeletion !== null) {
                if (!$this->tokensScheduledForDeletion->isEmpty()) {
                    TokenQuery::create()
                        ->filterByPrimaryKeys($this->tokensScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->tokensScheduledForDeletion = null;
                }
            }

            if ($this->collTokens !== null) {
                foreach ($this->collTokens as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = UsuarioPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . UsuarioPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(UsuarioPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(UsuarioPeer::USUARIO)) {
            $modifiedColumns[':p' . $index++]  = '`USUARIO`';
        }
        if ($this->isColumnModified(UsuarioPeer::CLAVE)) {
            $modifiedColumns[':p' . $index++]  = '`CLAVE`';
        }
        if ($this->isColumnModified(UsuarioPeer::CORREO)) {
            $modifiedColumns[':p' . $index++]  = '`CORREO`';
        }
        if ($this->isColumnModified(UsuarioPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(UsuarioPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }
        if ($this->isColumnModified(UsuarioPeer::CREATED_BY)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_BY`';
        }
        if ($this->isColumnModified(UsuarioPeer::UPDATED_BY)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_BY`';
        }
        if ($this->isColumnModified(UsuarioPeer::ACTIVO)) {
            $modifiedColumns[':p' . $index++]  = '`ACTIVO`';
        }
        if ($this->isColumnModified(UsuarioPeer::EMAIL)) {
            $modifiedColumns[':p' . $index++]  = '`EMAIL`';
        }
        if ($this->isColumnModified(UsuarioPeer::NUMERO_TELEFONO)) {
            $modifiedColumns[':p' . $index++]  = '`NUMERO_TELEFONO`';
        }
        if ($this->isColumnModified(UsuarioPeer::PERFIL_ID)) {
            $modifiedColumns[':p' . $index++]  = '`PERFIL_ID`';
        }
        if ($this->isColumnModified(UsuarioPeer::ADMINISTRADOR)) {
            $modifiedColumns[':p' . $index++]  = '`ADMINISTRADOR`';
        }
        if ($this->isColumnModified(UsuarioPeer::NOMBRE_COMPLETO)) {
            $modifiedColumns[':p' . $index++]  = '`NOMBRE_COMPLETO`';
        }

        $sql = sprintf(
            'INSERT INTO `usuario` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`USUARIO`':
                        $stmt->bindValue($identifier, $this->usuario, PDO::PARAM_STR);
                        break;
                    case '`CLAVE`':
                        $stmt->bindValue($identifier, $this->clave, PDO::PARAM_STR);
                        break;
                    case '`CORREO`':
                        $stmt->bindValue($identifier, $this->correo, PDO::PARAM_STR);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                    case '`CREATED_BY`':
                        $stmt->bindValue($identifier, $this->created_by, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_BY`':
                        $stmt->bindValue($identifier, $this->updated_by, PDO::PARAM_STR);
                        break;
                    case '`ACTIVO`':
                        $stmt->bindValue($identifier, (int) $this->activo, PDO::PARAM_INT);
                        break;
                    case '`EMAIL`':
                        $stmt->bindValue($identifier, $this->email, PDO::PARAM_STR);
                        break;
                    case '`NUMERO_TELEFONO`':
                        $stmt->bindValue($identifier, $this->numero_telefono, PDO::PARAM_STR);
                        break;
                    case '`PERFIL_ID`':
                        $stmt->bindValue($identifier, $this->perfil_id, PDO::PARAM_INT);
                        break;
                    case '`ADMINISTRADOR`':
                        $stmt->bindValue($identifier, (int) $this->administrador, PDO::PARAM_INT);
                        break;
                    case '`NOMBRE_COMPLETO`':
                        $stmt->bindValue($identifier, $this->nombre_completo, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aPerfil !== null) {
                if (!$this->aPerfil->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aPerfil->getValidationFailures());
                }
            }


            if (($retval = UsuarioPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collNegociosRelatedByUsuarioReq !== null) {
                    foreach ($this->collNegociosRelatedByUsuarioReq as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collNegociosRelatedByUsuarioProp !== null) {
                    foreach ($this->collNegociosRelatedByUsuarioProp as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collRequerimientos !== null) {
                    foreach ($this->collRequerimientos as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collPropiedads !== null) {
                    foreach ($this->collPropiedads as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collTokens !== null) {
                    foreach ($this->collTokens as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getUsuario();
                break;
            case 2:
                return $this->getClave();
                break;
            case 3:
                return $this->getCorreo();
                break;
            case 4:
                return $this->getCreatedAt();
                break;
            case 5:
                return $this->getUpdatedAt();
                break;
            case 6:
                return $this->getCreatedBy();
                break;
            case 7:
                return $this->getUpdatedBy();
                break;
            case 8:
                return $this->getActivo();
                break;
            case 9:
                return $this->getEmail();
                break;
            case 10:
                return $this->getNumeroTelefono();
                break;
            case 11:
                return $this->getPerfilId();
                break;
            case 12:
                return $this->getAdministrador();
                break;
            case 13:
                return $this->getNombreCompleto();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Usuario'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Usuario'][$this->getPrimaryKey()] = true;
        $keys = UsuarioPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getUsuario(),
            $keys[2] => $this->getClave(),
            $keys[3] => $this->getCorreo(),
            $keys[4] => $this->getCreatedAt(),
            $keys[5] => $this->getUpdatedAt(),
            $keys[6] => $this->getCreatedBy(),
            $keys[7] => $this->getUpdatedBy(),
            $keys[8] => $this->getActivo(),
            $keys[9] => $this->getEmail(),
            $keys[10] => $this->getNumeroTelefono(),
            $keys[11] => $this->getPerfilId(),
            $keys[12] => $this->getAdministrador(),
            $keys[13] => $this->getNombreCompleto(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->aPerfil) {
                $result['Perfil'] = $this->aPerfil->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->collNegociosRelatedByUsuarioReq) {
                $result['NegociosRelatedByUsuarioReq'] = $this->collNegociosRelatedByUsuarioReq->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collNegociosRelatedByUsuarioProp) {
                $result['NegociosRelatedByUsuarioProp'] = $this->collNegociosRelatedByUsuarioProp->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collRequerimientos) {
                $result['Requerimientos'] = $this->collRequerimientos->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collPropiedads) {
                $result['Propiedads'] = $this->collPropiedads->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collTokens) {
                $result['Tokens'] = $this->collTokens->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setUsuario($value);
                break;
            case 2:
                $this->setClave($value);
                break;
            case 3:
                $this->setCorreo($value);
                break;
            case 4:
                $this->setCreatedAt($value);
                break;
            case 5:
                $this->setUpdatedAt($value);
                break;
            case 6:
                $this->setCreatedBy($value);
                break;
            case 7:
                $this->setUpdatedBy($value);
                break;
            case 8:
                $this->setActivo($value);
                break;
            case 9:
                $this->setEmail($value);
                break;
            case 10:
                $this->setNumeroTelefono($value);
                break;
            case 11:
                $this->setPerfilId($value);
                break;
            case 12:
                $this->setAdministrador($value);
                break;
            case 13:
                $this->setNombreCompleto($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = UsuarioPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setUsuario($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setClave($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setCorreo($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setCreatedAt($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setUpdatedAt($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setCreatedBy($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setUpdatedBy($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setActivo($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setEmail($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setNumeroTelefono($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setPerfilId($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setAdministrador($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setNombreCompleto($arr[$keys[13]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(UsuarioPeer::DATABASE_NAME);

        if ($this->isColumnModified(UsuarioPeer::ID)) $criteria->add(UsuarioPeer::ID, $this->id);
        if ($this->isColumnModified(UsuarioPeer::USUARIO)) $criteria->add(UsuarioPeer::USUARIO, $this->usuario);
        if ($this->isColumnModified(UsuarioPeer::CLAVE)) $criteria->add(UsuarioPeer::CLAVE, $this->clave);
        if ($this->isColumnModified(UsuarioPeer::CORREO)) $criteria->add(UsuarioPeer::CORREO, $this->correo);
        if ($this->isColumnModified(UsuarioPeer::CREATED_AT)) $criteria->add(UsuarioPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(UsuarioPeer::UPDATED_AT)) $criteria->add(UsuarioPeer::UPDATED_AT, $this->updated_at);
        if ($this->isColumnModified(UsuarioPeer::CREATED_BY)) $criteria->add(UsuarioPeer::CREATED_BY, $this->created_by);
        if ($this->isColumnModified(UsuarioPeer::UPDATED_BY)) $criteria->add(UsuarioPeer::UPDATED_BY, $this->updated_by);
        if ($this->isColumnModified(UsuarioPeer::ACTIVO)) $criteria->add(UsuarioPeer::ACTIVO, $this->activo);
        if ($this->isColumnModified(UsuarioPeer::EMAIL)) $criteria->add(UsuarioPeer::EMAIL, $this->email);
        if ($this->isColumnModified(UsuarioPeer::NUMERO_TELEFONO)) $criteria->add(UsuarioPeer::NUMERO_TELEFONO, $this->numero_telefono);
        if ($this->isColumnModified(UsuarioPeer::PERFIL_ID)) $criteria->add(UsuarioPeer::PERFIL_ID, $this->perfil_id);
        if ($this->isColumnModified(UsuarioPeer::ADMINISTRADOR)) $criteria->add(UsuarioPeer::ADMINISTRADOR, $this->administrador);
        if ($this->isColumnModified(UsuarioPeer::NOMBRE_COMPLETO)) $criteria->add(UsuarioPeer::NOMBRE_COMPLETO, $this->nombre_completo);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
        $criteria->add(UsuarioPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Usuario (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setUsuario($this->getUsuario());
        $copyObj->setClave($this->getClave());
        $copyObj->setCorreo($this->getCorreo());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        $copyObj->setCreatedBy($this->getCreatedBy());
        $copyObj->setUpdatedBy($this->getUpdatedBy());
        $copyObj->setActivo($this->getActivo());
        $copyObj->setEmail($this->getEmail());
        $copyObj->setNumeroTelefono($this->getNumeroTelefono());
        $copyObj->setPerfilId($this->getPerfilId());
        $copyObj->setAdministrador($this->getAdministrador());
        $copyObj->setNombreCompleto($this->getNombreCompleto());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getNegociosRelatedByUsuarioReq() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addNegocioRelatedByUsuarioReq($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getNegociosRelatedByUsuarioProp() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addNegocioRelatedByUsuarioProp($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getRequerimientos() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addRequerimiento($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getPropiedads() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addPropiedad($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getTokens() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addToken($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Usuario Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return UsuarioPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new UsuarioPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a Perfil object.
     *
     * @param             Perfil $v
     * @return Usuario The current object (for fluent API support)
     * @throws PropelException
     */
    public function setPerfil(Perfil $v = null)
    {
        if ($v === null) {
            $this->setPerfilId(NULL);
        } else {
            $this->setPerfilId($v->getId());
        }

        $this->aPerfil = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Perfil object, it will not be re-added.
        if ($v !== null) {
            $v->addUsuario($this);
        }


        return $this;
    }


    /**
     * Get the associated Perfil object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Perfil The associated Perfil object.
     * @throws PropelException
     */
    public function getPerfil(PropelPDO $con = null)
    {
        if ($this->aPerfil === null && ($this->perfil_id !== null)) {
            $this->aPerfil = PerfilQuery::create()->findPk($this->perfil_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aPerfil->addUsuarios($this);
             */
        }

        return $this->aPerfil;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('NegocioRelatedByUsuarioReq' == $relationName) {
            $this->initNegociosRelatedByUsuarioReq();
        }
        if ('NegocioRelatedByUsuarioProp' == $relationName) {
            $this->initNegociosRelatedByUsuarioProp();
        }
        if ('Requerimiento' == $relationName) {
            $this->initRequerimientos();
        }
        if ('Propiedad' == $relationName) {
            $this->initPropiedads();
        }
        if ('Token' == $relationName) {
            $this->initTokens();
        }
    }

    /**
     * Clears out the collNegociosRelatedByUsuarioReq collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addNegociosRelatedByUsuarioReq()
     */
    public function clearNegociosRelatedByUsuarioReq()
    {
        $this->collNegociosRelatedByUsuarioReq = null; // important to set this to null since that means it is uninitialized
        $this->collNegociosRelatedByUsuarioReqPartial = null;
    }

    /**
     * reset is the collNegociosRelatedByUsuarioReq collection loaded partially
     *
     * @return void
     */
    public function resetPartialNegociosRelatedByUsuarioReq($v = true)
    {
        $this->collNegociosRelatedByUsuarioReqPartial = $v;
    }

    /**
     * Initializes the collNegociosRelatedByUsuarioReq collection.
     *
     * By default this just sets the collNegociosRelatedByUsuarioReq collection to an empty array (like clearcollNegociosRelatedByUsuarioReq());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initNegociosRelatedByUsuarioReq($overrideExisting = true)
    {
        if (null !== $this->collNegociosRelatedByUsuarioReq && !$overrideExisting) {
            return;
        }
        $this->collNegociosRelatedByUsuarioReq = new PropelObjectCollection();
        $this->collNegociosRelatedByUsuarioReq->setModel('Negocio');
    }

    /**
     * Gets an array of Negocio objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Negocio[] List of Negocio objects
     * @throws PropelException
     */
    public function getNegociosRelatedByUsuarioReq($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collNegociosRelatedByUsuarioReqPartial && !$this->isNew();
        if (null === $this->collNegociosRelatedByUsuarioReq || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collNegociosRelatedByUsuarioReq) {
                // return empty collection
                $this->initNegociosRelatedByUsuarioReq();
            } else {
                $collNegociosRelatedByUsuarioReq = NegocioQuery::create(null, $criteria)
                    ->filterByUsuarioRelatedByUsuarioReq($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collNegociosRelatedByUsuarioReqPartial && count($collNegociosRelatedByUsuarioReq)) {
                      $this->initNegociosRelatedByUsuarioReq(false);

                      foreach($collNegociosRelatedByUsuarioReq as $obj) {
                        if (false == $this->collNegociosRelatedByUsuarioReq->contains($obj)) {
                          $this->collNegociosRelatedByUsuarioReq->append($obj);
                        }
                      }

                      $this->collNegociosRelatedByUsuarioReqPartial = true;
                    }

                    return $collNegociosRelatedByUsuarioReq;
                }

                if($partial && $this->collNegociosRelatedByUsuarioReq) {
                    foreach($this->collNegociosRelatedByUsuarioReq as $obj) {
                        if($obj->isNew()) {
                            $collNegociosRelatedByUsuarioReq[] = $obj;
                        }
                    }
                }

                $this->collNegociosRelatedByUsuarioReq = $collNegociosRelatedByUsuarioReq;
                $this->collNegociosRelatedByUsuarioReqPartial = false;
            }
        }

        return $this->collNegociosRelatedByUsuarioReq;
    }

    /**
     * Sets a collection of NegocioRelatedByUsuarioReq objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $negociosRelatedByUsuarioReq A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setNegociosRelatedByUsuarioReq(PropelCollection $negociosRelatedByUsuarioReq, PropelPDO $con = null)
    {
        $this->negociosRelatedByUsuarioReqScheduledForDeletion = $this->getNegociosRelatedByUsuarioReq(new Criteria(), $con)->diff($negociosRelatedByUsuarioReq);

        foreach ($this->negociosRelatedByUsuarioReqScheduledForDeletion as $negocioRelatedByUsuarioReqRemoved) {
            $negocioRelatedByUsuarioReqRemoved->setUsuarioRelatedByUsuarioReq(null);
        }

        $this->collNegociosRelatedByUsuarioReq = null;
        foreach ($negociosRelatedByUsuarioReq as $negocioRelatedByUsuarioReq) {
            $this->addNegocioRelatedByUsuarioReq($negocioRelatedByUsuarioReq);
        }

        $this->collNegociosRelatedByUsuarioReq = $negociosRelatedByUsuarioReq;
        $this->collNegociosRelatedByUsuarioReqPartial = false;
    }

    /**
     * Returns the number of related Negocio objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Negocio objects.
     * @throws PropelException
     */
    public function countNegociosRelatedByUsuarioReq(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collNegociosRelatedByUsuarioReqPartial && !$this->isNew();
        if (null === $this->collNegociosRelatedByUsuarioReq || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collNegociosRelatedByUsuarioReq) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getNegociosRelatedByUsuarioReq());
                }
                $query = NegocioQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuarioRelatedByUsuarioReq($this)
                    ->count($con);
            }
        } else {
            return count($this->collNegociosRelatedByUsuarioReq);
        }
    }

    /**
     * Method called to associate a Negocio object to this object
     * through the Negocio foreign key attribute.
     *
     * @param    Negocio $l Negocio
     * @return Usuario The current object (for fluent API support)
     */
    public function addNegocioRelatedByUsuarioReq(Negocio $l)
    {
        if ($this->collNegociosRelatedByUsuarioReq === null) {
            $this->initNegociosRelatedByUsuarioReq();
            $this->collNegociosRelatedByUsuarioReqPartial = true;
        }
        if (!$this->collNegociosRelatedByUsuarioReq->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddNegocioRelatedByUsuarioReq($l);
        }

        return $this;
    }

    /**
     * @param	NegocioRelatedByUsuarioReq $negocioRelatedByUsuarioReq The negocioRelatedByUsuarioReq object to add.
     */
    protected function doAddNegocioRelatedByUsuarioReq($negocioRelatedByUsuarioReq)
    {
        $this->collNegociosRelatedByUsuarioReq[]= $negocioRelatedByUsuarioReq;
        $negocioRelatedByUsuarioReq->setUsuarioRelatedByUsuarioReq($this);
    }

    /**
     * @param	NegocioRelatedByUsuarioReq $negocioRelatedByUsuarioReq The negocioRelatedByUsuarioReq object to remove.
     */
    public function removeNegocioRelatedByUsuarioReq($negocioRelatedByUsuarioReq)
    {
        if ($this->getNegociosRelatedByUsuarioReq()->contains($negocioRelatedByUsuarioReq)) {
            $this->collNegociosRelatedByUsuarioReq->remove($this->collNegociosRelatedByUsuarioReq->search($negocioRelatedByUsuarioReq));
            if (null === $this->negociosRelatedByUsuarioReqScheduledForDeletion) {
                $this->negociosRelatedByUsuarioReqScheduledForDeletion = clone $this->collNegociosRelatedByUsuarioReq;
                $this->negociosRelatedByUsuarioReqScheduledForDeletion->clear();
            }
            $this->negociosRelatedByUsuarioReqScheduledForDeletion[]= $negocioRelatedByUsuarioReq;
            $negocioRelatedByUsuarioReq->setUsuarioRelatedByUsuarioReq(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related NegociosRelatedByUsuarioReq from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Negocio[] List of Negocio objects
     */
    public function getNegociosRelatedByUsuarioReqJoinRequerimiento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = NegocioQuery::create(null, $criteria);
        $query->joinWith('Requerimiento', $join_behavior);

        return $this->getNegociosRelatedByUsuarioReq($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related NegociosRelatedByUsuarioReq from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Negocio[] List of Negocio objects
     */
    public function getNegociosRelatedByUsuarioReqJoinPropiedad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = NegocioQuery::create(null, $criteria);
        $query->joinWith('Propiedad', $join_behavior);

        return $this->getNegociosRelatedByUsuarioReq($query, $con);
    }

    /**
     * Clears out the collNegociosRelatedByUsuarioProp collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addNegociosRelatedByUsuarioProp()
     */
    public function clearNegociosRelatedByUsuarioProp()
    {
        $this->collNegociosRelatedByUsuarioProp = null; // important to set this to null since that means it is uninitialized
        $this->collNegociosRelatedByUsuarioPropPartial = null;
    }

    /**
     * reset is the collNegociosRelatedByUsuarioProp collection loaded partially
     *
     * @return void
     */
    public function resetPartialNegociosRelatedByUsuarioProp($v = true)
    {
        $this->collNegociosRelatedByUsuarioPropPartial = $v;
    }

    /**
     * Initializes the collNegociosRelatedByUsuarioProp collection.
     *
     * By default this just sets the collNegociosRelatedByUsuarioProp collection to an empty array (like clearcollNegociosRelatedByUsuarioProp());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initNegociosRelatedByUsuarioProp($overrideExisting = true)
    {
        if (null !== $this->collNegociosRelatedByUsuarioProp && !$overrideExisting) {
            return;
        }
        $this->collNegociosRelatedByUsuarioProp = new PropelObjectCollection();
        $this->collNegociosRelatedByUsuarioProp->setModel('Negocio');
    }

    /**
     * Gets an array of Negocio objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Negocio[] List of Negocio objects
     * @throws PropelException
     */
    public function getNegociosRelatedByUsuarioProp($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collNegociosRelatedByUsuarioPropPartial && !$this->isNew();
        if (null === $this->collNegociosRelatedByUsuarioProp || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collNegociosRelatedByUsuarioProp) {
                // return empty collection
                $this->initNegociosRelatedByUsuarioProp();
            } else {
                $collNegociosRelatedByUsuarioProp = NegocioQuery::create(null, $criteria)
                    ->filterByUsuarioRelatedByUsuarioProp($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collNegociosRelatedByUsuarioPropPartial && count($collNegociosRelatedByUsuarioProp)) {
                      $this->initNegociosRelatedByUsuarioProp(false);

                      foreach($collNegociosRelatedByUsuarioProp as $obj) {
                        if (false == $this->collNegociosRelatedByUsuarioProp->contains($obj)) {
                          $this->collNegociosRelatedByUsuarioProp->append($obj);
                        }
                      }

                      $this->collNegociosRelatedByUsuarioPropPartial = true;
                    }

                    return $collNegociosRelatedByUsuarioProp;
                }

                if($partial && $this->collNegociosRelatedByUsuarioProp) {
                    foreach($this->collNegociosRelatedByUsuarioProp as $obj) {
                        if($obj->isNew()) {
                            $collNegociosRelatedByUsuarioProp[] = $obj;
                        }
                    }
                }

                $this->collNegociosRelatedByUsuarioProp = $collNegociosRelatedByUsuarioProp;
                $this->collNegociosRelatedByUsuarioPropPartial = false;
            }
        }

        return $this->collNegociosRelatedByUsuarioProp;
    }

    /**
     * Sets a collection of NegocioRelatedByUsuarioProp objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $negociosRelatedByUsuarioProp A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setNegociosRelatedByUsuarioProp(PropelCollection $negociosRelatedByUsuarioProp, PropelPDO $con = null)
    {
        $this->negociosRelatedByUsuarioPropScheduledForDeletion = $this->getNegociosRelatedByUsuarioProp(new Criteria(), $con)->diff($negociosRelatedByUsuarioProp);

        foreach ($this->negociosRelatedByUsuarioPropScheduledForDeletion as $negocioRelatedByUsuarioPropRemoved) {
            $negocioRelatedByUsuarioPropRemoved->setUsuarioRelatedByUsuarioProp(null);
        }

        $this->collNegociosRelatedByUsuarioProp = null;
        foreach ($negociosRelatedByUsuarioProp as $negocioRelatedByUsuarioProp) {
            $this->addNegocioRelatedByUsuarioProp($negocioRelatedByUsuarioProp);
        }

        $this->collNegociosRelatedByUsuarioProp = $negociosRelatedByUsuarioProp;
        $this->collNegociosRelatedByUsuarioPropPartial = false;
    }

    /**
     * Returns the number of related Negocio objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Negocio objects.
     * @throws PropelException
     */
    public function countNegociosRelatedByUsuarioProp(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collNegociosRelatedByUsuarioPropPartial && !$this->isNew();
        if (null === $this->collNegociosRelatedByUsuarioProp || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collNegociosRelatedByUsuarioProp) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getNegociosRelatedByUsuarioProp());
                }
                $query = NegocioQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuarioRelatedByUsuarioProp($this)
                    ->count($con);
            }
        } else {
            return count($this->collNegociosRelatedByUsuarioProp);
        }
    }

    /**
     * Method called to associate a Negocio object to this object
     * through the Negocio foreign key attribute.
     *
     * @param    Negocio $l Negocio
     * @return Usuario The current object (for fluent API support)
     */
    public function addNegocioRelatedByUsuarioProp(Negocio $l)
    {
        if ($this->collNegociosRelatedByUsuarioProp === null) {
            $this->initNegociosRelatedByUsuarioProp();
            $this->collNegociosRelatedByUsuarioPropPartial = true;
        }
        if (!$this->collNegociosRelatedByUsuarioProp->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddNegocioRelatedByUsuarioProp($l);
        }

        return $this;
    }

    /**
     * @param	NegocioRelatedByUsuarioProp $negocioRelatedByUsuarioProp The negocioRelatedByUsuarioProp object to add.
     */
    protected function doAddNegocioRelatedByUsuarioProp($negocioRelatedByUsuarioProp)
    {
        $this->collNegociosRelatedByUsuarioProp[]= $negocioRelatedByUsuarioProp;
        $negocioRelatedByUsuarioProp->setUsuarioRelatedByUsuarioProp($this);
    }

    /**
     * @param	NegocioRelatedByUsuarioProp $negocioRelatedByUsuarioProp The negocioRelatedByUsuarioProp object to remove.
     */
    public function removeNegocioRelatedByUsuarioProp($negocioRelatedByUsuarioProp)
    {
        if ($this->getNegociosRelatedByUsuarioProp()->contains($negocioRelatedByUsuarioProp)) {
            $this->collNegociosRelatedByUsuarioProp->remove($this->collNegociosRelatedByUsuarioProp->search($negocioRelatedByUsuarioProp));
            if (null === $this->negociosRelatedByUsuarioPropScheduledForDeletion) {
                $this->negociosRelatedByUsuarioPropScheduledForDeletion = clone $this->collNegociosRelatedByUsuarioProp;
                $this->negociosRelatedByUsuarioPropScheduledForDeletion->clear();
            }
            $this->negociosRelatedByUsuarioPropScheduledForDeletion[]= $negocioRelatedByUsuarioProp;
            $negocioRelatedByUsuarioProp->setUsuarioRelatedByUsuarioProp(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related NegociosRelatedByUsuarioProp from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Negocio[] List of Negocio objects
     */
    public function getNegociosRelatedByUsuarioPropJoinRequerimiento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = NegocioQuery::create(null, $criteria);
        $query->joinWith('Requerimiento', $join_behavior);

        return $this->getNegociosRelatedByUsuarioProp($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related NegociosRelatedByUsuarioProp from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Negocio[] List of Negocio objects
     */
    public function getNegociosRelatedByUsuarioPropJoinPropiedad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = NegocioQuery::create(null, $criteria);
        $query->joinWith('Propiedad', $join_behavior);

        return $this->getNegociosRelatedByUsuarioProp($query, $con);
    }

    /**
     * Clears out the collRequerimientos collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addRequerimientos()
     */
    public function clearRequerimientos()
    {
        $this->collRequerimientos = null; // important to set this to null since that means it is uninitialized
        $this->collRequerimientosPartial = null;
    }

    /**
     * reset is the collRequerimientos collection loaded partially
     *
     * @return void
     */
    public function resetPartialRequerimientos($v = true)
    {
        $this->collRequerimientosPartial = $v;
    }

    /**
     * Initializes the collRequerimientos collection.
     *
     * By default this just sets the collRequerimientos collection to an empty array (like clearcollRequerimientos());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initRequerimientos($overrideExisting = true)
    {
        if (null !== $this->collRequerimientos && !$overrideExisting) {
            return;
        }
        $this->collRequerimientos = new PropelObjectCollection();
        $this->collRequerimientos->setModel('Requerimiento');
    }

    /**
     * Gets an array of Requerimiento objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Requerimiento[] List of Requerimiento objects
     * @throws PropelException
     */
    public function getRequerimientos($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collRequerimientosPartial && !$this->isNew();
        if (null === $this->collRequerimientos || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collRequerimientos) {
                // return empty collection
                $this->initRequerimientos();
            } else {
                $collRequerimientos = RequerimientoQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collRequerimientosPartial && count($collRequerimientos)) {
                      $this->initRequerimientos(false);

                      foreach($collRequerimientos as $obj) {
                        if (false == $this->collRequerimientos->contains($obj)) {
                          $this->collRequerimientos->append($obj);
                        }
                      }

                      $this->collRequerimientosPartial = true;
                    }

                    return $collRequerimientos;
                }

                if($partial && $this->collRequerimientos) {
                    foreach($this->collRequerimientos as $obj) {
                        if($obj->isNew()) {
                            $collRequerimientos[] = $obj;
                        }
                    }
                }

                $this->collRequerimientos = $collRequerimientos;
                $this->collRequerimientosPartial = false;
            }
        }

        return $this->collRequerimientos;
    }

    /**
     * Sets a collection of Requerimiento objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $requerimientos A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setRequerimientos(PropelCollection $requerimientos, PropelPDO $con = null)
    {
        $this->requerimientosScheduledForDeletion = $this->getRequerimientos(new Criteria(), $con)->diff($requerimientos);

        foreach ($this->requerimientosScheduledForDeletion as $requerimientoRemoved) {
            $requerimientoRemoved->setUsuario(null);
        }

        $this->collRequerimientos = null;
        foreach ($requerimientos as $requerimiento) {
            $this->addRequerimiento($requerimiento);
        }

        $this->collRequerimientos = $requerimientos;
        $this->collRequerimientosPartial = false;
    }

    /**
     * Returns the number of related Requerimiento objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Requerimiento objects.
     * @throws PropelException
     */
    public function countRequerimientos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collRequerimientosPartial && !$this->isNew();
        if (null === $this->collRequerimientos || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collRequerimientos) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getRequerimientos());
                }
                $query = RequerimientoQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collRequerimientos);
        }
    }

    /**
     * Method called to associate a Requerimiento object to this object
     * through the Requerimiento foreign key attribute.
     *
     * @param    Requerimiento $l Requerimiento
     * @return Usuario The current object (for fluent API support)
     */
    public function addRequerimiento(Requerimiento $l)
    {
        if ($this->collRequerimientos === null) {
            $this->initRequerimientos();
            $this->collRequerimientosPartial = true;
        }
        if (!$this->collRequerimientos->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddRequerimiento($l);
        }

        return $this;
    }

    /**
     * @param	Requerimiento $requerimiento The requerimiento object to add.
     */
    protected function doAddRequerimiento($requerimiento)
    {
        $this->collRequerimientos[]= $requerimiento;
        $requerimiento->setUsuario($this);
    }

    /**
     * @param	Requerimiento $requerimiento The requerimiento object to remove.
     */
    public function removeRequerimiento($requerimiento)
    {
        if ($this->getRequerimientos()->contains($requerimiento)) {
            $this->collRequerimientos->remove($this->collRequerimientos->search($requerimiento));
            if (null === $this->requerimientosScheduledForDeletion) {
                $this->requerimientosScheduledForDeletion = clone $this->collRequerimientos;
                $this->requerimientosScheduledForDeletion->clear();
            }
            $this->requerimientosScheduledForDeletion[]= $requerimiento;
            $requerimiento->setUsuario(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related Requerimientos from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Requerimiento[] List of Requerimiento objects
     */
    public function getRequerimientosJoinMoneda($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = RequerimientoQuery::create(null, $criteria);
        $query->joinWith('Moneda', $join_behavior);

        return $this->getRequerimientos($query, $con);
    }

    /**
     * Clears out the collPropiedads collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addPropiedads()
     */
    public function clearPropiedads()
    {
        $this->collPropiedads = null; // important to set this to null since that means it is uninitialized
        $this->collPropiedadsPartial = null;
    }

    /**
     * reset is the collPropiedads collection loaded partially
     *
     * @return void
     */
    public function resetPartialPropiedads($v = true)
    {
        $this->collPropiedadsPartial = $v;
    }

    /**
     * Initializes the collPropiedads collection.
     *
     * By default this just sets the collPropiedads collection to an empty array (like clearcollPropiedads());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initPropiedads($overrideExisting = true)
    {
        if (null !== $this->collPropiedads && !$overrideExisting) {
            return;
        }
        $this->collPropiedads = new PropelObjectCollection();
        $this->collPropiedads->setModel('Propiedad');
    }

    /**
     * Gets an array of Propiedad objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Propiedad[] List of Propiedad objects
     * @throws PropelException
     */
    public function getPropiedads($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collPropiedadsPartial && !$this->isNew();
        if (null === $this->collPropiedads || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collPropiedads) {
                // return empty collection
                $this->initPropiedads();
            } else {
                $collPropiedads = PropiedadQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collPropiedadsPartial && count($collPropiedads)) {
                      $this->initPropiedads(false);

                      foreach($collPropiedads as $obj) {
                        if (false == $this->collPropiedads->contains($obj)) {
                          $this->collPropiedads->append($obj);
                        }
                      }

                      $this->collPropiedadsPartial = true;
                    }

                    return $collPropiedads;
                }

                if($partial && $this->collPropiedads) {
                    foreach($this->collPropiedads as $obj) {
                        if($obj->isNew()) {
                            $collPropiedads[] = $obj;
                        }
                    }
                }

                $this->collPropiedads = $collPropiedads;
                $this->collPropiedadsPartial = false;
            }
        }

        return $this->collPropiedads;
    }

    /**
     * Sets a collection of Propiedad objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $propiedads A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setPropiedads(PropelCollection $propiedads, PropelPDO $con = null)
    {
        $this->propiedadsScheduledForDeletion = $this->getPropiedads(new Criteria(), $con)->diff($propiedads);

        foreach ($this->propiedadsScheduledForDeletion as $propiedadRemoved) {
            $propiedadRemoved->setUsuario(null);
        }

        $this->collPropiedads = null;
        foreach ($propiedads as $propiedad) {
            $this->addPropiedad($propiedad);
        }

        $this->collPropiedads = $propiedads;
        $this->collPropiedadsPartial = false;
    }

    /**
     * Returns the number of related Propiedad objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Propiedad objects.
     * @throws PropelException
     */
    public function countPropiedads(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collPropiedadsPartial && !$this->isNew();
        if (null === $this->collPropiedads || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collPropiedads) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getPropiedads());
                }
                $query = PropiedadQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collPropiedads);
        }
    }

    /**
     * Method called to associate a Propiedad object to this object
     * through the Propiedad foreign key attribute.
     *
     * @param    Propiedad $l Propiedad
     * @return Usuario The current object (for fluent API support)
     */
    public function addPropiedad(Propiedad $l)
    {
        if ($this->collPropiedads === null) {
            $this->initPropiedads();
            $this->collPropiedadsPartial = true;
        }
        if (!$this->collPropiedads->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddPropiedad($l);
        }

        return $this;
    }

    /**
     * @param	Propiedad $propiedad The propiedad object to add.
     */
    protected function doAddPropiedad($propiedad)
    {
        $this->collPropiedads[]= $propiedad;
        $propiedad->setUsuario($this);
    }

    /**
     * @param	Propiedad $propiedad The propiedad object to remove.
     */
    public function removePropiedad($propiedad)
    {
        if ($this->getPropiedads()->contains($propiedad)) {
            $this->collPropiedads->remove($this->collPropiedads->search($propiedad));
            if (null === $this->propiedadsScheduledForDeletion) {
                $this->propiedadsScheduledForDeletion = clone $this->collPropiedads;
                $this->propiedadsScheduledForDeletion->clear();
            }
            $this->propiedadsScheduledForDeletion[]= $propiedad;
            $propiedad->setUsuario(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related Propiedads from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Propiedad[] List of Propiedad objects
     */
    public function getPropiedadsJoinMoneda($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = PropiedadQuery::create(null, $criteria);
        $query->joinWith('Moneda', $join_behavior);

        return $this->getPropiedads($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related Propiedads from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Propiedad[] List of Propiedad objects
     */
    public function getPropiedadsJoinDepartamento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = PropiedadQuery::create(null, $criteria);
        $query->joinWith('Departamento', $join_behavior);

        return $this->getPropiedads($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related Propiedads from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Propiedad[] List of Propiedad objects
     */
    public function getPropiedadsJoinMunicipio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = PropiedadQuery::create(null, $criteria);
        $query->joinWith('Municipio', $join_behavior);

        return $this->getPropiedads($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related Propiedads from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Propiedad[] List of Propiedad objects
     */
    public function getPropiedadsJoinCarretera($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = PropiedadQuery::create(null, $criteria);
        $query->joinWith('Carretera', $join_behavior);

        return $this->getPropiedads($query, $con);
    }

    /**
     * Clears out the collTokens collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addTokens()
     */
    public function clearTokens()
    {
        $this->collTokens = null; // important to set this to null since that means it is uninitialized
        $this->collTokensPartial = null;
    }

    /**
     * reset is the collTokens collection loaded partially
     *
     * @return void
     */
    public function resetPartialTokens($v = true)
    {
        $this->collTokensPartial = $v;
    }

    /**
     * Initializes the collTokens collection.
     *
     * By default this just sets the collTokens collection to an empty array (like clearcollTokens());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initTokens($overrideExisting = true)
    {
        if (null !== $this->collTokens && !$overrideExisting) {
            return;
        }
        $this->collTokens = new PropelObjectCollection();
        $this->collTokens->setModel('Token');
    }

    /**
     * Gets an array of Token objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Token[] List of Token objects
     * @throws PropelException
     */
    public function getTokens($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collTokensPartial && !$this->isNew();
        if (null === $this->collTokens || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collTokens) {
                // return empty collection
                $this->initTokens();
            } else {
                $collTokens = TokenQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collTokensPartial && count($collTokens)) {
                      $this->initTokens(false);

                      foreach($collTokens as $obj) {
                        if (false == $this->collTokens->contains($obj)) {
                          $this->collTokens->append($obj);
                        }
                      }

                      $this->collTokensPartial = true;
                    }

                    return $collTokens;
                }

                if($partial && $this->collTokens) {
                    foreach($this->collTokens as $obj) {
                        if($obj->isNew()) {
                            $collTokens[] = $obj;
                        }
                    }
                }

                $this->collTokens = $collTokens;
                $this->collTokensPartial = false;
            }
        }

        return $this->collTokens;
    }

    /**
     * Sets a collection of Token objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $tokens A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setTokens(PropelCollection $tokens, PropelPDO $con = null)
    {
        $this->tokensScheduledForDeletion = $this->getTokens(new Criteria(), $con)->diff($tokens);

        foreach ($this->tokensScheduledForDeletion as $tokenRemoved) {
            $tokenRemoved->setUsuario(null);
        }

        $this->collTokens = null;
        foreach ($tokens as $token) {
            $this->addToken($token);
        }

        $this->collTokens = $tokens;
        $this->collTokensPartial = false;
    }

    /**
     * Returns the number of related Token objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Token objects.
     * @throws PropelException
     */
    public function countTokens(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collTokensPartial && !$this->isNew();
        if (null === $this->collTokens || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collTokens) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getTokens());
                }
                $query = TokenQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collTokens);
        }
    }

    /**
     * Method called to associate a Token object to this object
     * through the Token foreign key attribute.
     *
     * @param    Token $l Token
     * @return Usuario The current object (for fluent API support)
     */
    public function addToken(Token $l)
    {
        if ($this->collTokens === null) {
            $this->initTokens();
            $this->collTokensPartial = true;
        }
        if (!$this->collTokens->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddToken($l);
        }

        return $this;
    }

    /**
     * @param	Token $token The token object to add.
     */
    protected function doAddToken($token)
    {
        $this->collTokens[]= $token;
        $token->setUsuario($this);
    }

    /**
     * @param	Token $token The token object to remove.
     */
    public function removeToken($token)
    {
        if ($this->getTokens()->contains($token)) {
            $this->collTokens->remove($this->collTokens->search($token));
            if (null === $this->tokensScheduledForDeletion) {
                $this->tokensScheduledForDeletion = clone $this->collTokens;
                $this->tokensScheduledForDeletion->clear();
            }
            $this->tokensScheduledForDeletion[]= $token;
            $token->setUsuario(null);
        }
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->usuario = null;
        $this->clave = null;
        $this->correo = null;
        $this->created_at = null;
        $this->updated_at = null;
        $this->created_by = null;
        $this->updated_by = null;
        $this->activo = null;
        $this->email = null;
        $this->numero_telefono = null;
        $this->perfil_id = null;
        $this->administrador = null;
        $this->nombre_completo = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->collNegociosRelatedByUsuarioReq) {
                foreach ($this->collNegociosRelatedByUsuarioReq as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collNegociosRelatedByUsuarioProp) {
                foreach ($this->collNegociosRelatedByUsuarioProp as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collRequerimientos) {
                foreach ($this->collRequerimientos as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collPropiedads) {
                foreach ($this->collPropiedads as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collTokens) {
                foreach ($this->collTokens as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->collNegociosRelatedByUsuarioReq instanceof PropelCollection) {
            $this->collNegociosRelatedByUsuarioReq->clearIterator();
        }
        $this->collNegociosRelatedByUsuarioReq = null;
        if ($this->collNegociosRelatedByUsuarioProp instanceof PropelCollection) {
            $this->collNegociosRelatedByUsuarioProp->clearIterator();
        }
        $this->collNegociosRelatedByUsuarioProp = null;
        if ($this->collRequerimientos instanceof PropelCollection) {
            $this->collRequerimientos->clearIterator();
        }
        $this->collRequerimientos = null;
        if ($this->collPropiedads instanceof PropelCollection) {
            $this->collPropiedads->clearIterator();
        }
        $this->collPropiedads = null;
        if ($this->collTokens instanceof PropelCollection) {
            $this->collTokens->clearIterator();
        }
        $this->collTokens = null;
        $this->aPerfil = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string The value of the 'usuario' column
     */
    public function __toString()
    {
        return (string) $this->getUsuario();
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseUsuario:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
