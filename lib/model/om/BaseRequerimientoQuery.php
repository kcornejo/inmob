<?php


/**
 * Base class that represents a query for the 'requerimiento' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan 26 12:36:05 2018
 *
 * @method RequerimientoQuery orderById($order = Criteria::ASC) Order by the id column
 * @method RequerimientoQuery orderByTipoOperacion($order = Criteria::ASC) Order by the tipo_operacion column
 * @method RequerimientoQuery orderByTipoInmueble($order = Criteria::ASC) Order by the tipo_inmueble column
 * @method RequerimientoQuery orderByCantidadHabitacion($order = Criteria::ASC) Order by the cantidad_habitacion column
 * @method RequerimientoQuery orderByCantidadBanio($order = Criteria::ASC) Order by the cantidad_banio column
 * @method RequerimientoQuery orderByCantidadParqueo($order = Criteria::ASC) Order by the cantidad_parqueo column
 * @method RequerimientoQuery orderByCantidadComedor($order = Criteria::ASC) Order by the cantidad_comedor column
 * @method RequerimientoQuery orderByCantidadSala($order = Criteria::ASC) Order by the cantidad_sala column
 * @method RequerimientoQuery orderByCantidadCocina($order = Criteria::ASC) Order by the cantidad_cocina column
 * @method RequerimientoQuery orderByDormitorioServicio($order = Criteria::ASC) Order by the dormitorio_servicio column
 * @method RequerimientoQuery orderByEstudio($order = Criteria::ASC) Order by the estudio column
 * @method RequerimientoQuery orderByCisterna($order = Criteria::ASC) Order by the cisterna column
 * @method RequerimientoQuery orderByCantidadJardin($order = Criteria::ASC) Order by the cantidad_jardin column
 * @method RequerimientoQuery orderByCantidadPatio($order = Criteria::ASC) Order by the cantidad_patio column
 * @method RequerimientoQuery orderByLavanderia($order = Criteria::ASC) Order by the lavanderia column
 * @method RequerimientoQuery orderByTieneLuz($order = Criteria::ASC) Order by the tiene_luz column
 * @method RequerimientoQuery orderByTieneAgua($order = Criteria::ASC) Order by the tiene_agua column
 * @method RequerimientoQuery orderByNiveles($order = Criteria::ASC) Order by the niveles column
 * @method RequerimientoQuery orderByArea($order = Criteria::ASC) Order by the area column
 * @method RequerimientoQuery orderByAreaX($order = Criteria::ASC) Order by the area_x column
 * @method RequerimientoQuery orderByAreaY($order = Criteria::ASC) Order by the area_y column
 * @method RequerimientoQuery orderByEstado($order = Criteria::ASC) Order by the estado column
 * @method RequerimientoQuery orderByAmenidades($order = Criteria::ASC) Order by the amenidades column
 * @method RequerimientoQuery orderByMonedaId($order = Criteria::ASC) Order by the moneda_id column
 * @method RequerimientoQuery orderByFormaPago($order = Criteria::ASC) Order by the forma_pago column
 * @method RequerimientoQuery orderByPresupuestoMin($order = Criteria::ASC) Order by the presupuesto_min column
 * @method RequerimientoQuery orderByPresupuestoMax($order = Criteria::ASC) Order by the presupuesto_max column
 * @method RequerimientoQuery orderByNombreCliente($order = Criteria::ASC) Order by the nombre_cliente column
 * @method RequerimientoQuery orderByCorreoCliente($order = Criteria::ASC) Order by the correo_cliente column
 * @method RequerimientoQuery orderByTelefonoCliente($order = Criteria::ASC) Order by the telefono_cliente column
 * @method RequerimientoQuery orderByEstatus($order = Criteria::ASC) Order by the estatus column
 * @method RequerimientoQuery orderByPrecalificacion($order = Criteria::ASC) Order by the precalificacion column
 * @method RequerimientoQuery orderByNucleoFamiliar($order = Criteria::ASC) Order by the nucleo_familiar column
 * @method RequerimientoQuery orderByIngresos($order = Criteria::ASC) Order by the ingresos column
 * @method RequerimientoQuery orderByEgresos($order = Criteria::ASC) Order by the egresos column
 * @method RequerimientoQuery orderByEnganche($order = Criteria::ASC) Order by the enganche column
 * @method RequerimientoQuery orderByTasaInteresAnual($order = Criteria::ASC) Order by the tasa_interes_anual column
 * @method RequerimientoQuery orderByPlazoEnAnios($order = Criteria::ASC) Order by the plazo_en_anios column
 * @method RequerimientoQuery orderByPlazoEnMeses($order = Criteria::ASC) Order by the plazo_en_meses column
 * @method RequerimientoQuery orderByMontoFinanciarMaximo($order = Criteria::ASC) Order by the monto_financiar_maximo column
 * @method RequerimientoQuery orderByCuotaTotalMensualMaxima($order = Criteria::ASC) Order by the cuota_total_mensual_maxima column
 * @method RequerimientoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method RequerimientoQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method RequerimientoQuery orderByCreatedBy($order = Criteria::ASC) Order by the created_by column
 * @method RequerimientoQuery orderByUpdatedBy($order = Criteria::ASC) Order by the updated_by column
 * @method RequerimientoQuery orderByUsuarioId($order = Criteria::ASC) Order by the usuario_id column
 *
 * @method RequerimientoQuery groupById() Group by the id column
 * @method RequerimientoQuery groupByTipoOperacion() Group by the tipo_operacion column
 * @method RequerimientoQuery groupByTipoInmueble() Group by the tipo_inmueble column
 * @method RequerimientoQuery groupByCantidadHabitacion() Group by the cantidad_habitacion column
 * @method RequerimientoQuery groupByCantidadBanio() Group by the cantidad_banio column
 * @method RequerimientoQuery groupByCantidadParqueo() Group by the cantidad_parqueo column
 * @method RequerimientoQuery groupByCantidadComedor() Group by the cantidad_comedor column
 * @method RequerimientoQuery groupByCantidadSala() Group by the cantidad_sala column
 * @method RequerimientoQuery groupByCantidadCocina() Group by the cantidad_cocina column
 * @method RequerimientoQuery groupByDormitorioServicio() Group by the dormitorio_servicio column
 * @method RequerimientoQuery groupByEstudio() Group by the estudio column
 * @method RequerimientoQuery groupByCisterna() Group by the cisterna column
 * @method RequerimientoQuery groupByCantidadJardin() Group by the cantidad_jardin column
 * @method RequerimientoQuery groupByCantidadPatio() Group by the cantidad_patio column
 * @method RequerimientoQuery groupByLavanderia() Group by the lavanderia column
 * @method RequerimientoQuery groupByTieneLuz() Group by the tiene_luz column
 * @method RequerimientoQuery groupByTieneAgua() Group by the tiene_agua column
 * @method RequerimientoQuery groupByNiveles() Group by the niveles column
 * @method RequerimientoQuery groupByArea() Group by the area column
 * @method RequerimientoQuery groupByAreaX() Group by the area_x column
 * @method RequerimientoQuery groupByAreaY() Group by the area_y column
 * @method RequerimientoQuery groupByEstado() Group by the estado column
 * @method RequerimientoQuery groupByAmenidades() Group by the amenidades column
 * @method RequerimientoQuery groupByMonedaId() Group by the moneda_id column
 * @method RequerimientoQuery groupByFormaPago() Group by the forma_pago column
 * @method RequerimientoQuery groupByPresupuestoMin() Group by the presupuesto_min column
 * @method RequerimientoQuery groupByPresupuestoMax() Group by the presupuesto_max column
 * @method RequerimientoQuery groupByNombreCliente() Group by the nombre_cliente column
 * @method RequerimientoQuery groupByCorreoCliente() Group by the correo_cliente column
 * @method RequerimientoQuery groupByTelefonoCliente() Group by the telefono_cliente column
 * @method RequerimientoQuery groupByEstatus() Group by the estatus column
 * @method RequerimientoQuery groupByPrecalificacion() Group by the precalificacion column
 * @method RequerimientoQuery groupByNucleoFamiliar() Group by the nucleo_familiar column
 * @method RequerimientoQuery groupByIngresos() Group by the ingresos column
 * @method RequerimientoQuery groupByEgresos() Group by the egresos column
 * @method RequerimientoQuery groupByEnganche() Group by the enganche column
 * @method RequerimientoQuery groupByTasaInteresAnual() Group by the tasa_interes_anual column
 * @method RequerimientoQuery groupByPlazoEnAnios() Group by the plazo_en_anios column
 * @method RequerimientoQuery groupByPlazoEnMeses() Group by the plazo_en_meses column
 * @method RequerimientoQuery groupByMontoFinanciarMaximo() Group by the monto_financiar_maximo column
 * @method RequerimientoQuery groupByCuotaTotalMensualMaxima() Group by the cuota_total_mensual_maxima column
 * @method RequerimientoQuery groupByCreatedAt() Group by the created_at column
 * @method RequerimientoQuery groupByUpdatedAt() Group by the updated_at column
 * @method RequerimientoQuery groupByCreatedBy() Group by the created_by column
 * @method RequerimientoQuery groupByUpdatedBy() Group by the updated_by column
 * @method RequerimientoQuery groupByUsuarioId() Group by the usuario_id column
 *
 * @method RequerimientoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method RequerimientoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method RequerimientoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method RequerimientoQuery leftJoinMoneda($relationAlias = null) Adds a LEFT JOIN clause to the query using the Moneda relation
 * @method RequerimientoQuery rightJoinMoneda($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Moneda relation
 * @method RequerimientoQuery innerJoinMoneda($relationAlias = null) Adds a INNER JOIN clause to the query using the Moneda relation
 *
 * @method RequerimientoQuery leftJoinUsuario($relationAlias = null) Adds a LEFT JOIN clause to the query using the Usuario relation
 * @method RequerimientoQuery rightJoinUsuario($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Usuario relation
 * @method RequerimientoQuery innerJoinUsuario($relationAlias = null) Adds a INNER JOIN clause to the query using the Usuario relation
 *
 * @method RequerimientoQuery leftJoinNegocio($relationAlias = null) Adds a LEFT JOIN clause to the query using the Negocio relation
 * @method RequerimientoQuery rightJoinNegocio($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Negocio relation
 * @method RequerimientoQuery innerJoinNegocio($relationAlias = null) Adds a INNER JOIN clause to the query using the Negocio relation
 *
 * @method RequerimientoQuery leftJoinDireccionRequerimiento($relationAlias = null) Adds a LEFT JOIN clause to the query using the DireccionRequerimiento relation
 * @method RequerimientoQuery rightJoinDireccionRequerimiento($relationAlias = null) Adds a RIGHT JOIN clause to the query using the DireccionRequerimiento relation
 * @method RequerimientoQuery innerJoinDireccionRequerimiento($relationAlias = null) Adds a INNER JOIN clause to the query using the DireccionRequerimiento relation
 *
 * @method Requerimiento findOne(PropelPDO $con = null) Return the first Requerimiento matching the query
 * @method Requerimiento findOneOrCreate(PropelPDO $con = null) Return the first Requerimiento matching the query, or a new Requerimiento object populated from the query conditions when no match is found
 *
 * @method Requerimiento findOneById(int $id) Return the first Requerimiento filtered by the id column
 * @method Requerimiento findOneByTipoOperacion(string $tipo_operacion) Return the first Requerimiento filtered by the tipo_operacion column
 * @method Requerimiento findOneByTipoInmueble(string $tipo_inmueble) Return the first Requerimiento filtered by the tipo_inmueble column
 * @method Requerimiento findOneByCantidadHabitacion(int $cantidad_habitacion) Return the first Requerimiento filtered by the cantidad_habitacion column
 * @method Requerimiento findOneByCantidadBanio(double $cantidad_banio) Return the first Requerimiento filtered by the cantidad_banio column
 * @method Requerimiento findOneByCantidadParqueo(int $cantidad_parqueo) Return the first Requerimiento filtered by the cantidad_parqueo column
 * @method Requerimiento findOneByCantidadComedor(int $cantidad_comedor) Return the first Requerimiento filtered by the cantidad_comedor column
 * @method Requerimiento findOneByCantidadSala(int $cantidad_sala) Return the first Requerimiento filtered by the cantidad_sala column
 * @method Requerimiento findOneByCantidadCocina(int $cantidad_cocina) Return the first Requerimiento filtered by the cantidad_cocina column
 * @method Requerimiento findOneByDormitorioServicio(boolean $dormitorio_servicio) Return the first Requerimiento filtered by the dormitorio_servicio column
 * @method Requerimiento findOneByEstudio(boolean $estudio) Return the first Requerimiento filtered by the estudio column
 * @method Requerimiento findOneByCisterna(boolean $cisterna) Return the first Requerimiento filtered by the cisterna column
 * @method Requerimiento findOneByCantidadJardin(int $cantidad_jardin) Return the first Requerimiento filtered by the cantidad_jardin column
 * @method Requerimiento findOneByCantidadPatio(int $cantidad_patio) Return the first Requerimiento filtered by the cantidad_patio column
 * @method Requerimiento findOneByLavanderia(boolean $lavanderia) Return the first Requerimiento filtered by the lavanderia column
 * @method Requerimiento findOneByTieneLuz(boolean $tiene_luz) Return the first Requerimiento filtered by the tiene_luz column
 * @method Requerimiento findOneByTieneAgua(boolean $tiene_agua) Return the first Requerimiento filtered by the tiene_agua column
 * @method Requerimiento findOneByNiveles(int $niveles) Return the first Requerimiento filtered by the niveles column
 * @method Requerimiento findOneByArea(double $area) Return the first Requerimiento filtered by the area column
 * @method Requerimiento findOneByAreaX(double $area_x) Return the first Requerimiento filtered by the area_x column
 * @method Requerimiento findOneByAreaY(double $area_y) Return the first Requerimiento filtered by the area_y column
 * @method Requerimiento findOneByEstado(string $estado) Return the first Requerimiento filtered by the estado column
 * @method Requerimiento findOneByAmenidades(string $amenidades) Return the first Requerimiento filtered by the amenidades column
 * @method Requerimiento findOneByMonedaId(int $moneda_id) Return the first Requerimiento filtered by the moneda_id column
 * @method Requerimiento findOneByFormaPago(string $forma_pago) Return the first Requerimiento filtered by the forma_pago column
 * @method Requerimiento findOneByPresupuestoMin(double $presupuesto_min) Return the first Requerimiento filtered by the presupuesto_min column
 * @method Requerimiento findOneByPresupuestoMax(double $presupuesto_max) Return the first Requerimiento filtered by the presupuesto_max column
 * @method Requerimiento findOneByNombreCliente(string $nombre_cliente) Return the first Requerimiento filtered by the nombre_cliente column
 * @method Requerimiento findOneByCorreoCliente(string $correo_cliente) Return the first Requerimiento filtered by the correo_cliente column
 * @method Requerimiento findOneByTelefonoCliente(string $telefono_cliente) Return the first Requerimiento filtered by the telefono_cliente column
 * @method Requerimiento findOneByEstatus(string $estatus) Return the first Requerimiento filtered by the estatus column
 * @method Requerimiento findOneByPrecalificacion(boolean $precalificacion) Return the first Requerimiento filtered by the precalificacion column
 * @method Requerimiento findOneByNucleoFamiliar(int $nucleo_familiar) Return the first Requerimiento filtered by the nucleo_familiar column
 * @method Requerimiento findOneByIngresos(double $ingresos) Return the first Requerimiento filtered by the ingresos column
 * @method Requerimiento findOneByEgresos(double $egresos) Return the first Requerimiento filtered by the egresos column
 * @method Requerimiento findOneByEnganche(double $enganche) Return the first Requerimiento filtered by the enganche column
 * @method Requerimiento findOneByTasaInteresAnual(double $tasa_interes_anual) Return the first Requerimiento filtered by the tasa_interes_anual column
 * @method Requerimiento findOneByPlazoEnAnios(double $plazo_en_anios) Return the first Requerimiento filtered by the plazo_en_anios column
 * @method Requerimiento findOneByPlazoEnMeses(double $plazo_en_meses) Return the first Requerimiento filtered by the plazo_en_meses column
 * @method Requerimiento findOneByMontoFinanciarMaximo(double $monto_financiar_maximo) Return the first Requerimiento filtered by the monto_financiar_maximo column
 * @method Requerimiento findOneByCuotaTotalMensualMaxima(double $cuota_total_mensual_maxima) Return the first Requerimiento filtered by the cuota_total_mensual_maxima column
 * @method Requerimiento findOneByCreatedAt(string $created_at) Return the first Requerimiento filtered by the created_at column
 * @method Requerimiento findOneByUpdatedAt(string $updated_at) Return the first Requerimiento filtered by the updated_at column
 * @method Requerimiento findOneByCreatedBy(string $created_by) Return the first Requerimiento filtered by the created_by column
 * @method Requerimiento findOneByUpdatedBy(string $updated_by) Return the first Requerimiento filtered by the updated_by column
 * @method Requerimiento findOneByUsuarioId(int $usuario_id) Return the first Requerimiento filtered by the usuario_id column
 *
 * @method array findById(int $id) Return Requerimiento objects filtered by the id column
 * @method array findByTipoOperacion(string $tipo_operacion) Return Requerimiento objects filtered by the tipo_operacion column
 * @method array findByTipoInmueble(string $tipo_inmueble) Return Requerimiento objects filtered by the tipo_inmueble column
 * @method array findByCantidadHabitacion(int $cantidad_habitacion) Return Requerimiento objects filtered by the cantidad_habitacion column
 * @method array findByCantidadBanio(double $cantidad_banio) Return Requerimiento objects filtered by the cantidad_banio column
 * @method array findByCantidadParqueo(int $cantidad_parqueo) Return Requerimiento objects filtered by the cantidad_parqueo column
 * @method array findByCantidadComedor(int $cantidad_comedor) Return Requerimiento objects filtered by the cantidad_comedor column
 * @method array findByCantidadSala(int $cantidad_sala) Return Requerimiento objects filtered by the cantidad_sala column
 * @method array findByCantidadCocina(int $cantidad_cocina) Return Requerimiento objects filtered by the cantidad_cocina column
 * @method array findByDormitorioServicio(boolean $dormitorio_servicio) Return Requerimiento objects filtered by the dormitorio_servicio column
 * @method array findByEstudio(boolean $estudio) Return Requerimiento objects filtered by the estudio column
 * @method array findByCisterna(boolean $cisterna) Return Requerimiento objects filtered by the cisterna column
 * @method array findByCantidadJardin(int $cantidad_jardin) Return Requerimiento objects filtered by the cantidad_jardin column
 * @method array findByCantidadPatio(int $cantidad_patio) Return Requerimiento objects filtered by the cantidad_patio column
 * @method array findByLavanderia(boolean $lavanderia) Return Requerimiento objects filtered by the lavanderia column
 * @method array findByTieneLuz(boolean $tiene_luz) Return Requerimiento objects filtered by the tiene_luz column
 * @method array findByTieneAgua(boolean $tiene_agua) Return Requerimiento objects filtered by the tiene_agua column
 * @method array findByNiveles(int $niveles) Return Requerimiento objects filtered by the niveles column
 * @method array findByArea(double $area) Return Requerimiento objects filtered by the area column
 * @method array findByAreaX(double $area_x) Return Requerimiento objects filtered by the area_x column
 * @method array findByAreaY(double $area_y) Return Requerimiento objects filtered by the area_y column
 * @method array findByEstado(string $estado) Return Requerimiento objects filtered by the estado column
 * @method array findByAmenidades(string $amenidades) Return Requerimiento objects filtered by the amenidades column
 * @method array findByMonedaId(int $moneda_id) Return Requerimiento objects filtered by the moneda_id column
 * @method array findByFormaPago(string $forma_pago) Return Requerimiento objects filtered by the forma_pago column
 * @method array findByPresupuestoMin(double $presupuesto_min) Return Requerimiento objects filtered by the presupuesto_min column
 * @method array findByPresupuestoMax(double $presupuesto_max) Return Requerimiento objects filtered by the presupuesto_max column
 * @method array findByNombreCliente(string $nombre_cliente) Return Requerimiento objects filtered by the nombre_cliente column
 * @method array findByCorreoCliente(string $correo_cliente) Return Requerimiento objects filtered by the correo_cliente column
 * @method array findByTelefonoCliente(string $telefono_cliente) Return Requerimiento objects filtered by the telefono_cliente column
 * @method array findByEstatus(string $estatus) Return Requerimiento objects filtered by the estatus column
 * @method array findByPrecalificacion(boolean $precalificacion) Return Requerimiento objects filtered by the precalificacion column
 * @method array findByNucleoFamiliar(int $nucleo_familiar) Return Requerimiento objects filtered by the nucleo_familiar column
 * @method array findByIngresos(double $ingresos) Return Requerimiento objects filtered by the ingresos column
 * @method array findByEgresos(double $egresos) Return Requerimiento objects filtered by the egresos column
 * @method array findByEnganche(double $enganche) Return Requerimiento objects filtered by the enganche column
 * @method array findByTasaInteresAnual(double $tasa_interes_anual) Return Requerimiento objects filtered by the tasa_interes_anual column
 * @method array findByPlazoEnAnios(double $plazo_en_anios) Return Requerimiento objects filtered by the plazo_en_anios column
 * @method array findByPlazoEnMeses(double $plazo_en_meses) Return Requerimiento objects filtered by the plazo_en_meses column
 * @method array findByMontoFinanciarMaximo(double $monto_financiar_maximo) Return Requerimiento objects filtered by the monto_financiar_maximo column
 * @method array findByCuotaTotalMensualMaxima(double $cuota_total_mensual_maxima) Return Requerimiento objects filtered by the cuota_total_mensual_maxima column
 * @method array findByCreatedAt(string $created_at) Return Requerimiento objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Requerimiento objects filtered by the updated_at column
 * @method array findByCreatedBy(string $created_by) Return Requerimiento objects filtered by the created_by column
 * @method array findByUpdatedBy(string $updated_by) Return Requerimiento objects filtered by the updated_by column
 * @method array findByUsuarioId(int $usuario_id) Return Requerimiento objects filtered by the usuario_id column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseRequerimientoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseRequerimientoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Requerimiento', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new RequerimientoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     RequerimientoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return RequerimientoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof RequerimientoQuery) {
            return $criteria;
        }
        $query = new RequerimientoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Requerimiento|Requerimiento[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = RequerimientoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(RequerimientoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Requerimiento A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `TIPO_OPERACION`, `TIPO_INMUEBLE`, `CANTIDAD_HABITACION`, `CANTIDAD_BANIO`, `CANTIDAD_PARQUEO`, `CANTIDAD_COMEDOR`, `CANTIDAD_SALA`, `CANTIDAD_COCINA`, `DORMITORIO_SERVICIO`, `ESTUDIO`, `CISTERNA`, `CANTIDAD_JARDIN`, `CANTIDAD_PATIO`, `LAVANDERIA`, `TIENE_LUZ`, `TIENE_AGUA`, `NIVELES`, `AREA`, `AREA_X`, `AREA_Y`, `ESTADO`, `AMENIDADES`, `MONEDA_ID`, `FORMA_PAGO`, `PRESUPUESTO_MIN`, `PRESUPUESTO_MAX`, `NOMBRE_CLIENTE`, `CORREO_CLIENTE`, `TELEFONO_CLIENTE`, `ESTATUS`, `PRECALIFICACION`, `NUCLEO_FAMILIAR`, `INGRESOS`, `EGRESOS`, `ENGANCHE`, `TASA_INTERES_ANUAL`, `PLAZO_EN_ANIOS`, `PLAZO_EN_MESES`, `MONTO_FINANCIAR_MAXIMO`, `CUOTA_TOTAL_MENSUAL_MAXIMA`, `CREATED_AT`, `UPDATED_AT`, `CREATED_BY`, `UPDATED_BY`, `USUARIO_ID` FROM `requerimiento` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Requerimiento();
            $obj->hydrate($row);
            RequerimientoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Requerimiento|Requerimiento[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Requerimiento[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(RequerimientoPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(RequerimientoPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(RequerimientoPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the tipo_operacion column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoOperacion('fooValue');   // WHERE tipo_operacion = 'fooValue'
     * $query->filterByTipoOperacion('%fooValue%'); // WHERE tipo_operacion LIKE '%fooValue%'
     * </code>
     *
     * @param     string $tipoOperacion The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByTipoOperacion($tipoOperacion = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($tipoOperacion)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $tipoOperacion)) {
                $tipoOperacion = str_replace('*', '%', $tipoOperacion);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::TIPO_OPERACION, $tipoOperacion, $comparison);
    }

    /**
     * Filter the query on the tipo_inmueble column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoInmueble('fooValue');   // WHERE tipo_inmueble = 'fooValue'
     * $query->filterByTipoInmueble('%fooValue%'); // WHERE tipo_inmueble LIKE '%fooValue%'
     * </code>
     *
     * @param     string $tipoInmueble The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByTipoInmueble($tipoInmueble = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($tipoInmueble)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $tipoInmueble)) {
                $tipoInmueble = str_replace('*', '%', $tipoInmueble);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::TIPO_INMUEBLE, $tipoInmueble, $comparison);
    }

    /**
     * Filter the query on the cantidad_habitacion column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadHabitacion(1234); // WHERE cantidad_habitacion = 1234
     * $query->filterByCantidadHabitacion(array(12, 34)); // WHERE cantidad_habitacion IN (12, 34)
     * $query->filterByCantidadHabitacion(array('min' => 12)); // WHERE cantidad_habitacion > 12
     * </code>
     *
     * @param     mixed $cantidadHabitacion The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCantidadHabitacion($cantidadHabitacion = null, $comparison = null)
    {
        if (is_array($cantidadHabitacion)) {
            $useMinMax = false;
            if (isset($cantidadHabitacion['min'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_HABITACION, $cantidadHabitacion['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadHabitacion['max'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_HABITACION, $cantidadHabitacion['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CANTIDAD_HABITACION, $cantidadHabitacion, $comparison);
    }

    /**
     * Filter the query on the cantidad_banio column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadBanio(1234); // WHERE cantidad_banio = 1234
     * $query->filterByCantidadBanio(array(12, 34)); // WHERE cantidad_banio IN (12, 34)
     * $query->filterByCantidadBanio(array('min' => 12)); // WHERE cantidad_banio > 12
     * </code>
     *
     * @param     mixed $cantidadBanio The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCantidadBanio($cantidadBanio = null, $comparison = null)
    {
        if (is_array($cantidadBanio)) {
            $useMinMax = false;
            if (isset($cantidadBanio['min'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_BANIO, $cantidadBanio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadBanio['max'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_BANIO, $cantidadBanio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CANTIDAD_BANIO, $cantidadBanio, $comparison);
    }

    /**
     * Filter the query on the cantidad_parqueo column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadParqueo(1234); // WHERE cantidad_parqueo = 1234
     * $query->filterByCantidadParqueo(array(12, 34)); // WHERE cantidad_parqueo IN (12, 34)
     * $query->filterByCantidadParqueo(array('min' => 12)); // WHERE cantidad_parqueo > 12
     * </code>
     *
     * @param     mixed $cantidadParqueo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCantidadParqueo($cantidadParqueo = null, $comparison = null)
    {
        if (is_array($cantidadParqueo)) {
            $useMinMax = false;
            if (isset($cantidadParqueo['min'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_PARQUEO, $cantidadParqueo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadParqueo['max'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_PARQUEO, $cantidadParqueo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CANTIDAD_PARQUEO, $cantidadParqueo, $comparison);
    }

    /**
     * Filter the query on the cantidad_comedor column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadComedor(1234); // WHERE cantidad_comedor = 1234
     * $query->filterByCantidadComedor(array(12, 34)); // WHERE cantidad_comedor IN (12, 34)
     * $query->filterByCantidadComedor(array('min' => 12)); // WHERE cantidad_comedor > 12
     * </code>
     *
     * @param     mixed $cantidadComedor The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCantidadComedor($cantidadComedor = null, $comparison = null)
    {
        if (is_array($cantidadComedor)) {
            $useMinMax = false;
            if (isset($cantidadComedor['min'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_COMEDOR, $cantidadComedor['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadComedor['max'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_COMEDOR, $cantidadComedor['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CANTIDAD_COMEDOR, $cantidadComedor, $comparison);
    }

    /**
     * Filter the query on the cantidad_sala column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadSala(1234); // WHERE cantidad_sala = 1234
     * $query->filterByCantidadSala(array(12, 34)); // WHERE cantidad_sala IN (12, 34)
     * $query->filterByCantidadSala(array('min' => 12)); // WHERE cantidad_sala > 12
     * </code>
     *
     * @param     mixed $cantidadSala The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCantidadSala($cantidadSala = null, $comparison = null)
    {
        if (is_array($cantidadSala)) {
            $useMinMax = false;
            if (isset($cantidadSala['min'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_SALA, $cantidadSala['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadSala['max'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_SALA, $cantidadSala['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CANTIDAD_SALA, $cantidadSala, $comparison);
    }

    /**
     * Filter the query on the cantidad_cocina column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadCocina(1234); // WHERE cantidad_cocina = 1234
     * $query->filterByCantidadCocina(array(12, 34)); // WHERE cantidad_cocina IN (12, 34)
     * $query->filterByCantidadCocina(array('min' => 12)); // WHERE cantidad_cocina > 12
     * </code>
     *
     * @param     mixed $cantidadCocina The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCantidadCocina($cantidadCocina = null, $comparison = null)
    {
        if (is_array($cantidadCocina)) {
            $useMinMax = false;
            if (isset($cantidadCocina['min'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_COCINA, $cantidadCocina['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadCocina['max'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_COCINA, $cantidadCocina['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CANTIDAD_COCINA, $cantidadCocina, $comparison);
    }

    /**
     * Filter the query on the dormitorio_servicio column
     *
     * Example usage:
     * <code>
     * $query->filterByDormitorioServicio(true); // WHERE dormitorio_servicio = true
     * $query->filterByDormitorioServicio('yes'); // WHERE dormitorio_servicio = true
     * </code>
     *
     * @param     boolean|string $dormitorioServicio The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByDormitorioServicio($dormitorioServicio = null, $comparison = null)
    {
        if (is_string($dormitorioServicio)) {
            $dormitorio_servicio = in_array(strtolower($dormitorioServicio), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(RequerimientoPeer::DORMITORIO_SERVICIO, $dormitorioServicio, $comparison);
    }

    /**
     * Filter the query on the estudio column
     *
     * Example usage:
     * <code>
     * $query->filterByEstudio(true); // WHERE estudio = true
     * $query->filterByEstudio('yes'); // WHERE estudio = true
     * </code>
     *
     * @param     boolean|string $estudio The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByEstudio($estudio = null, $comparison = null)
    {
        if (is_string($estudio)) {
            $estudio = in_array(strtolower($estudio), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(RequerimientoPeer::ESTUDIO, $estudio, $comparison);
    }

    /**
     * Filter the query on the cisterna column
     *
     * Example usage:
     * <code>
     * $query->filterByCisterna(true); // WHERE cisterna = true
     * $query->filterByCisterna('yes'); // WHERE cisterna = true
     * </code>
     *
     * @param     boolean|string $cisterna The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCisterna($cisterna = null, $comparison = null)
    {
        if (is_string($cisterna)) {
            $cisterna = in_array(strtolower($cisterna), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(RequerimientoPeer::CISTERNA, $cisterna, $comparison);
    }

    /**
     * Filter the query on the cantidad_jardin column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadJardin(1234); // WHERE cantidad_jardin = 1234
     * $query->filterByCantidadJardin(array(12, 34)); // WHERE cantidad_jardin IN (12, 34)
     * $query->filterByCantidadJardin(array('min' => 12)); // WHERE cantidad_jardin > 12
     * </code>
     *
     * @param     mixed $cantidadJardin The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCantidadJardin($cantidadJardin = null, $comparison = null)
    {
        if (is_array($cantidadJardin)) {
            $useMinMax = false;
            if (isset($cantidadJardin['min'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_JARDIN, $cantidadJardin['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadJardin['max'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_JARDIN, $cantidadJardin['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CANTIDAD_JARDIN, $cantidadJardin, $comparison);
    }

    /**
     * Filter the query on the cantidad_patio column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadPatio(1234); // WHERE cantidad_patio = 1234
     * $query->filterByCantidadPatio(array(12, 34)); // WHERE cantidad_patio IN (12, 34)
     * $query->filterByCantidadPatio(array('min' => 12)); // WHERE cantidad_patio > 12
     * </code>
     *
     * @param     mixed $cantidadPatio The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCantidadPatio($cantidadPatio = null, $comparison = null)
    {
        if (is_array($cantidadPatio)) {
            $useMinMax = false;
            if (isset($cantidadPatio['min'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_PATIO, $cantidadPatio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadPatio['max'])) {
                $this->addUsingAlias(RequerimientoPeer::CANTIDAD_PATIO, $cantidadPatio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CANTIDAD_PATIO, $cantidadPatio, $comparison);
    }

    /**
     * Filter the query on the lavanderia column
     *
     * Example usage:
     * <code>
     * $query->filterByLavanderia(true); // WHERE lavanderia = true
     * $query->filterByLavanderia('yes'); // WHERE lavanderia = true
     * </code>
     *
     * @param     boolean|string $lavanderia The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByLavanderia($lavanderia = null, $comparison = null)
    {
        if (is_string($lavanderia)) {
            $lavanderia = in_array(strtolower($lavanderia), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(RequerimientoPeer::LAVANDERIA, $lavanderia, $comparison);
    }

    /**
     * Filter the query on the tiene_luz column
     *
     * Example usage:
     * <code>
     * $query->filterByTieneLuz(true); // WHERE tiene_luz = true
     * $query->filterByTieneLuz('yes'); // WHERE tiene_luz = true
     * </code>
     *
     * @param     boolean|string $tieneLuz The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByTieneLuz($tieneLuz = null, $comparison = null)
    {
        if (is_string($tieneLuz)) {
            $tiene_luz = in_array(strtolower($tieneLuz), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(RequerimientoPeer::TIENE_LUZ, $tieneLuz, $comparison);
    }

    /**
     * Filter the query on the tiene_agua column
     *
     * Example usage:
     * <code>
     * $query->filterByTieneAgua(true); // WHERE tiene_agua = true
     * $query->filterByTieneAgua('yes'); // WHERE tiene_agua = true
     * </code>
     *
     * @param     boolean|string $tieneAgua The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByTieneAgua($tieneAgua = null, $comparison = null)
    {
        if (is_string($tieneAgua)) {
            $tiene_agua = in_array(strtolower($tieneAgua), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(RequerimientoPeer::TIENE_AGUA, $tieneAgua, $comparison);
    }

    /**
     * Filter the query on the niveles column
     *
     * Example usage:
     * <code>
     * $query->filterByNiveles(1234); // WHERE niveles = 1234
     * $query->filterByNiveles(array(12, 34)); // WHERE niveles IN (12, 34)
     * $query->filterByNiveles(array('min' => 12)); // WHERE niveles > 12
     * </code>
     *
     * @param     mixed $niveles The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByNiveles($niveles = null, $comparison = null)
    {
        if (is_array($niveles)) {
            $useMinMax = false;
            if (isset($niveles['min'])) {
                $this->addUsingAlias(RequerimientoPeer::NIVELES, $niveles['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($niveles['max'])) {
                $this->addUsingAlias(RequerimientoPeer::NIVELES, $niveles['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::NIVELES, $niveles, $comparison);
    }

    /**
     * Filter the query on the area column
     *
     * Example usage:
     * <code>
     * $query->filterByArea(1234); // WHERE area = 1234
     * $query->filterByArea(array(12, 34)); // WHERE area IN (12, 34)
     * $query->filterByArea(array('min' => 12)); // WHERE area > 12
     * </code>
     *
     * @param     mixed $area The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByArea($area = null, $comparison = null)
    {
        if (is_array($area)) {
            $useMinMax = false;
            if (isset($area['min'])) {
                $this->addUsingAlias(RequerimientoPeer::AREA, $area['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($area['max'])) {
                $this->addUsingAlias(RequerimientoPeer::AREA, $area['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::AREA, $area, $comparison);
    }

    /**
     * Filter the query on the area_x column
     *
     * Example usage:
     * <code>
     * $query->filterByAreaX(1234); // WHERE area_x = 1234
     * $query->filterByAreaX(array(12, 34)); // WHERE area_x IN (12, 34)
     * $query->filterByAreaX(array('min' => 12)); // WHERE area_x > 12
     * </code>
     *
     * @param     mixed $areaX The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByAreaX($areaX = null, $comparison = null)
    {
        if (is_array($areaX)) {
            $useMinMax = false;
            if (isset($areaX['min'])) {
                $this->addUsingAlias(RequerimientoPeer::AREA_X, $areaX['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($areaX['max'])) {
                $this->addUsingAlias(RequerimientoPeer::AREA_X, $areaX['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::AREA_X, $areaX, $comparison);
    }

    /**
     * Filter the query on the area_y column
     *
     * Example usage:
     * <code>
     * $query->filterByAreaY(1234); // WHERE area_y = 1234
     * $query->filterByAreaY(array(12, 34)); // WHERE area_y IN (12, 34)
     * $query->filterByAreaY(array('min' => 12)); // WHERE area_y > 12
     * </code>
     *
     * @param     mixed $areaY The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByAreaY($areaY = null, $comparison = null)
    {
        if (is_array($areaY)) {
            $useMinMax = false;
            if (isset($areaY['min'])) {
                $this->addUsingAlias(RequerimientoPeer::AREA_Y, $areaY['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($areaY['max'])) {
                $this->addUsingAlias(RequerimientoPeer::AREA_Y, $areaY['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::AREA_Y, $areaY, $comparison);
    }

    /**
     * Filter the query on the estado column
     *
     * Example usage:
     * <code>
     * $query->filterByEstado('fooValue');   // WHERE estado = 'fooValue'
     * $query->filterByEstado('%fooValue%'); // WHERE estado LIKE '%fooValue%'
     * </code>
     *
     * @param     string $estado The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByEstado($estado = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($estado)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $estado)) {
                $estado = str_replace('*', '%', $estado);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::ESTADO, $estado, $comparison);
    }

    /**
     * Filter the query on the amenidades column
     *
     * Example usage:
     * <code>
     * $query->filterByAmenidades('fooValue');   // WHERE amenidades = 'fooValue'
     * $query->filterByAmenidades('%fooValue%'); // WHERE amenidades LIKE '%fooValue%'
     * </code>
     *
     * @param     string $amenidades The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByAmenidades($amenidades = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($amenidades)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $amenidades)) {
                $amenidades = str_replace('*', '%', $amenidades);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::AMENIDADES, $amenidades, $comparison);
    }

    /**
     * Filter the query on the moneda_id column
     *
     * Example usage:
     * <code>
     * $query->filterByMonedaId(1234); // WHERE moneda_id = 1234
     * $query->filterByMonedaId(array(12, 34)); // WHERE moneda_id IN (12, 34)
     * $query->filterByMonedaId(array('min' => 12)); // WHERE moneda_id > 12
     * </code>
     *
     * @see       filterByMoneda()
     *
     * @param     mixed $monedaId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByMonedaId($monedaId = null, $comparison = null)
    {
        if (is_array($monedaId)) {
            $useMinMax = false;
            if (isset($monedaId['min'])) {
                $this->addUsingAlias(RequerimientoPeer::MONEDA_ID, $monedaId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($monedaId['max'])) {
                $this->addUsingAlias(RequerimientoPeer::MONEDA_ID, $monedaId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::MONEDA_ID, $monedaId, $comparison);
    }

    /**
     * Filter the query on the forma_pago column
     *
     * Example usage:
     * <code>
     * $query->filterByFormaPago('fooValue');   // WHERE forma_pago = 'fooValue'
     * $query->filterByFormaPago('%fooValue%'); // WHERE forma_pago LIKE '%fooValue%'
     * </code>
     *
     * @param     string $formaPago The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByFormaPago($formaPago = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($formaPago)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $formaPago)) {
                $formaPago = str_replace('*', '%', $formaPago);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::FORMA_PAGO, $formaPago, $comparison);
    }

    /**
     * Filter the query on the presupuesto_min column
     *
     * Example usage:
     * <code>
     * $query->filterByPresupuestoMin(1234); // WHERE presupuesto_min = 1234
     * $query->filterByPresupuestoMin(array(12, 34)); // WHERE presupuesto_min IN (12, 34)
     * $query->filterByPresupuestoMin(array('min' => 12)); // WHERE presupuesto_min > 12
     * </code>
     *
     * @param     mixed $presupuestoMin The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByPresupuestoMin($presupuestoMin = null, $comparison = null)
    {
        if (is_array($presupuestoMin)) {
            $useMinMax = false;
            if (isset($presupuestoMin['min'])) {
                $this->addUsingAlias(RequerimientoPeer::PRESUPUESTO_MIN, $presupuestoMin['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($presupuestoMin['max'])) {
                $this->addUsingAlias(RequerimientoPeer::PRESUPUESTO_MIN, $presupuestoMin['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::PRESUPUESTO_MIN, $presupuestoMin, $comparison);
    }

    /**
     * Filter the query on the presupuesto_max column
     *
     * Example usage:
     * <code>
     * $query->filterByPresupuestoMax(1234); // WHERE presupuesto_max = 1234
     * $query->filterByPresupuestoMax(array(12, 34)); // WHERE presupuesto_max IN (12, 34)
     * $query->filterByPresupuestoMax(array('min' => 12)); // WHERE presupuesto_max > 12
     * </code>
     *
     * @param     mixed $presupuestoMax The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByPresupuestoMax($presupuestoMax = null, $comparison = null)
    {
        if (is_array($presupuestoMax)) {
            $useMinMax = false;
            if (isset($presupuestoMax['min'])) {
                $this->addUsingAlias(RequerimientoPeer::PRESUPUESTO_MAX, $presupuestoMax['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($presupuestoMax['max'])) {
                $this->addUsingAlias(RequerimientoPeer::PRESUPUESTO_MAX, $presupuestoMax['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::PRESUPUESTO_MAX, $presupuestoMax, $comparison);
    }

    /**
     * Filter the query on the nombre_cliente column
     *
     * Example usage:
     * <code>
     * $query->filterByNombreCliente('fooValue');   // WHERE nombre_cliente = 'fooValue'
     * $query->filterByNombreCliente('%fooValue%'); // WHERE nombre_cliente LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nombreCliente The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByNombreCliente($nombreCliente = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nombreCliente)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nombreCliente)) {
                $nombreCliente = str_replace('*', '%', $nombreCliente);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::NOMBRE_CLIENTE, $nombreCliente, $comparison);
    }

    /**
     * Filter the query on the correo_cliente column
     *
     * Example usage:
     * <code>
     * $query->filterByCorreoCliente('fooValue');   // WHERE correo_cliente = 'fooValue'
     * $query->filterByCorreoCliente('%fooValue%'); // WHERE correo_cliente LIKE '%fooValue%'
     * </code>
     *
     * @param     string $correoCliente The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCorreoCliente($correoCliente = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($correoCliente)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $correoCliente)) {
                $correoCliente = str_replace('*', '%', $correoCliente);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CORREO_CLIENTE, $correoCliente, $comparison);
    }

    /**
     * Filter the query on the telefono_cliente column
     *
     * Example usage:
     * <code>
     * $query->filterByTelefonoCliente('fooValue');   // WHERE telefono_cliente = 'fooValue'
     * $query->filterByTelefonoCliente('%fooValue%'); // WHERE telefono_cliente LIKE '%fooValue%'
     * </code>
     *
     * @param     string $telefonoCliente The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByTelefonoCliente($telefonoCliente = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($telefonoCliente)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $telefonoCliente)) {
                $telefonoCliente = str_replace('*', '%', $telefonoCliente);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::TELEFONO_CLIENTE, $telefonoCliente, $comparison);
    }

    /**
     * Filter the query on the estatus column
     *
     * Example usage:
     * <code>
     * $query->filterByEstatus('fooValue');   // WHERE estatus = 'fooValue'
     * $query->filterByEstatus('%fooValue%'); // WHERE estatus LIKE '%fooValue%'
     * </code>
     *
     * @param     string $estatus The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByEstatus($estatus = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($estatus)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $estatus)) {
                $estatus = str_replace('*', '%', $estatus);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::ESTATUS, $estatus, $comparison);
    }

    /**
     * Filter the query on the precalificacion column
     *
     * Example usage:
     * <code>
     * $query->filterByPrecalificacion(true); // WHERE precalificacion = true
     * $query->filterByPrecalificacion('yes'); // WHERE precalificacion = true
     * </code>
     *
     * @param     boolean|string $precalificacion The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByPrecalificacion($precalificacion = null, $comparison = null)
    {
        if (is_string($precalificacion)) {
            $precalificacion = in_array(strtolower($precalificacion), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(RequerimientoPeer::PRECALIFICACION, $precalificacion, $comparison);
    }

    /**
     * Filter the query on the nucleo_familiar column
     *
     * Example usage:
     * <code>
     * $query->filterByNucleoFamiliar(1234); // WHERE nucleo_familiar = 1234
     * $query->filterByNucleoFamiliar(array(12, 34)); // WHERE nucleo_familiar IN (12, 34)
     * $query->filterByNucleoFamiliar(array('min' => 12)); // WHERE nucleo_familiar > 12
     * </code>
     *
     * @param     mixed $nucleoFamiliar The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByNucleoFamiliar($nucleoFamiliar = null, $comparison = null)
    {
        if (is_array($nucleoFamiliar)) {
            $useMinMax = false;
            if (isset($nucleoFamiliar['min'])) {
                $this->addUsingAlias(RequerimientoPeer::NUCLEO_FAMILIAR, $nucleoFamiliar['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($nucleoFamiliar['max'])) {
                $this->addUsingAlias(RequerimientoPeer::NUCLEO_FAMILIAR, $nucleoFamiliar['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::NUCLEO_FAMILIAR, $nucleoFamiliar, $comparison);
    }

    /**
     * Filter the query on the ingresos column
     *
     * Example usage:
     * <code>
     * $query->filterByIngresos(1234); // WHERE ingresos = 1234
     * $query->filterByIngresos(array(12, 34)); // WHERE ingresos IN (12, 34)
     * $query->filterByIngresos(array('min' => 12)); // WHERE ingresos > 12
     * </code>
     *
     * @param     mixed $ingresos The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByIngresos($ingresos = null, $comparison = null)
    {
        if (is_array($ingresos)) {
            $useMinMax = false;
            if (isset($ingresos['min'])) {
                $this->addUsingAlias(RequerimientoPeer::INGRESOS, $ingresos['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($ingresos['max'])) {
                $this->addUsingAlias(RequerimientoPeer::INGRESOS, $ingresos['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::INGRESOS, $ingresos, $comparison);
    }

    /**
     * Filter the query on the egresos column
     *
     * Example usage:
     * <code>
     * $query->filterByEgresos(1234); // WHERE egresos = 1234
     * $query->filterByEgresos(array(12, 34)); // WHERE egresos IN (12, 34)
     * $query->filterByEgresos(array('min' => 12)); // WHERE egresos > 12
     * </code>
     *
     * @param     mixed $egresos The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByEgresos($egresos = null, $comparison = null)
    {
        if (is_array($egresos)) {
            $useMinMax = false;
            if (isset($egresos['min'])) {
                $this->addUsingAlias(RequerimientoPeer::EGRESOS, $egresos['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($egresos['max'])) {
                $this->addUsingAlias(RequerimientoPeer::EGRESOS, $egresos['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::EGRESOS, $egresos, $comparison);
    }

    /**
     * Filter the query on the enganche column
     *
     * Example usage:
     * <code>
     * $query->filterByEnganche(1234); // WHERE enganche = 1234
     * $query->filterByEnganche(array(12, 34)); // WHERE enganche IN (12, 34)
     * $query->filterByEnganche(array('min' => 12)); // WHERE enganche > 12
     * </code>
     *
     * @param     mixed $enganche The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByEnganche($enganche = null, $comparison = null)
    {
        if (is_array($enganche)) {
            $useMinMax = false;
            if (isset($enganche['min'])) {
                $this->addUsingAlias(RequerimientoPeer::ENGANCHE, $enganche['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($enganche['max'])) {
                $this->addUsingAlias(RequerimientoPeer::ENGANCHE, $enganche['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::ENGANCHE, $enganche, $comparison);
    }

    /**
     * Filter the query on the tasa_interes_anual column
     *
     * Example usage:
     * <code>
     * $query->filterByTasaInteresAnual(1234); // WHERE tasa_interes_anual = 1234
     * $query->filterByTasaInteresAnual(array(12, 34)); // WHERE tasa_interes_anual IN (12, 34)
     * $query->filterByTasaInteresAnual(array('min' => 12)); // WHERE tasa_interes_anual > 12
     * </code>
     *
     * @param     mixed $tasaInteresAnual The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByTasaInteresAnual($tasaInteresAnual = null, $comparison = null)
    {
        if (is_array($tasaInteresAnual)) {
            $useMinMax = false;
            if (isset($tasaInteresAnual['min'])) {
                $this->addUsingAlias(RequerimientoPeer::TASA_INTERES_ANUAL, $tasaInteresAnual['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tasaInteresAnual['max'])) {
                $this->addUsingAlias(RequerimientoPeer::TASA_INTERES_ANUAL, $tasaInteresAnual['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::TASA_INTERES_ANUAL, $tasaInteresAnual, $comparison);
    }

    /**
     * Filter the query on the plazo_en_anios column
     *
     * Example usage:
     * <code>
     * $query->filterByPlazoEnAnios(1234); // WHERE plazo_en_anios = 1234
     * $query->filterByPlazoEnAnios(array(12, 34)); // WHERE plazo_en_anios IN (12, 34)
     * $query->filterByPlazoEnAnios(array('min' => 12)); // WHERE plazo_en_anios > 12
     * </code>
     *
     * @param     mixed $plazoEnAnios The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByPlazoEnAnios($plazoEnAnios = null, $comparison = null)
    {
        if (is_array($plazoEnAnios)) {
            $useMinMax = false;
            if (isset($plazoEnAnios['min'])) {
                $this->addUsingAlias(RequerimientoPeer::PLAZO_EN_ANIOS, $plazoEnAnios['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($plazoEnAnios['max'])) {
                $this->addUsingAlias(RequerimientoPeer::PLAZO_EN_ANIOS, $plazoEnAnios['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::PLAZO_EN_ANIOS, $plazoEnAnios, $comparison);
    }

    /**
     * Filter the query on the plazo_en_meses column
     *
     * Example usage:
     * <code>
     * $query->filterByPlazoEnMeses(1234); // WHERE plazo_en_meses = 1234
     * $query->filterByPlazoEnMeses(array(12, 34)); // WHERE plazo_en_meses IN (12, 34)
     * $query->filterByPlazoEnMeses(array('min' => 12)); // WHERE plazo_en_meses > 12
     * </code>
     *
     * @param     mixed $plazoEnMeses The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByPlazoEnMeses($plazoEnMeses = null, $comparison = null)
    {
        if (is_array($plazoEnMeses)) {
            $useMinMax = false;
            if (isset($plazoEnMeses['min'])) {
                $this->addUsingAlias(RequerimientoPeer::PLAZO_EN_MESES, $plazoEnMeses['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($plazoEnMeses['max'])) {
                $this->addUsingAlias(RequerimientoPeer::PLAZO_EN_MESES, $plazoEnMeses['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::PLAZO_EN_MESES, $plazoEnMeses, $comparison);
    }

    /**
     * Filter the query on the monto_financiar_maximo column
     *
     * Example usage:
     * <code>
     * $query->filterByMontoFinanciarMaximo(1234); // WHERE monto_financiar_maximo = 1234
     * $query->filterByMontoFinanciarMaximo(array(12, 34)); // WHERE monto_financiar_maximo IN (12, 34)
     * $query->filterByMontoFinanciarMaximo(array('min' => 12)); // WHERE monto_financiar_maximo > 12
     * </code>
     *
     * @param     mixed $montoFinanciarMaximo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByMontoFinanciarMaximo($montoFinanciarMaximo = null, $comparison = null)
    {
        if (is_array($montoFinanciarMaximo)) {
            $useMinMax = false;
            if (isset($montoFinanciarMaximo['min'])) {
                $this->addUsingAlias(RequerimientoPeer::MONTO_FINANCIAR_MAXIMO, $montoFinanciarMaximo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($montoFinanciarMaximo['max'])) {
                $this->addUsingAlias(RequerimientoPeer::MONTO_FINANCIAR_MAXIMO, $montoFinanciarMaximo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::MONTO_FINANCIAR_MAXIMO, $montoFinanciarMaximo, $comparison);
    }

    /**
     * Filter the query on the cuota_total_mensual_maxima column
     *
     * Example usage:
     * <code>
     * $query->filterByCuotaTotalMensualMaxima(1234); // WHERE cuota_total_mensual_maxima = 1234
     * $query->filterByCuotaTotalMensualMaxima(array(12, 34)); // WHERE cuota_total_mensual_maxima IN (12, 34)
     * $query->filterByCuotaTotalMensualMaxima(array('min' => 12)); // WHERE cuota_total_mensual_maxima > 12
     * </code>
     *
     * @param     mixed $cuotaTotalMensualMaxima The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCuotaTotalMensualMaxima($cuotaTotalMensualMaxima = null, $comparison = null)
    {
        if (is_array($cuotaTotalMensualMaxima)) {
            $useMinMax = false;
            if (isset($cuotaTotalMensualMaxima['min'])) {
                $this->addUsingAlias(RequerimientoPeer::CUOTA_TOTAL_MENSUAL_MAXIMA, $cuotaTotalMensualMaxima['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cuotaTotalMensualMaxima['max'])) {
                $this->addUsingAlias(RequerimientoPeer::CUOTA_TOTAL_MENSUAL_MAXIMA, $cuotaTotalMensualMaxima['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CUOTA_TOTAL_MENSUAL_MAXIMA, $cuotaTotalMensualMaxima, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(RequerimientoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(RequerimientoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(RequerimientoPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(RequerimientoPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedBy('fooValue');   // WHERE created_by = 'fooValue'
     * $query->filterByCreatedBy('%fooValue%'); // WHERE created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $createdBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByCreatedBy($createdBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($createdBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $createdBy)) {
                $createdBy = str_replace('*', '%', $createdBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::CREATED_BY, $createdBy, $comparison);
    }

    /**
     * Filter the query on the updated_by column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedBy('fooValue');   // WHERE updated_by = 'fooValue'
     * $query->filterByUpdatedBy('%fooValue%'); // WHERE updated_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $updatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByUpdatedBy($updatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($updatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $updatedBy)) {
                $updatedBy = str_replace('*', '%', $updatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::UPDATED_BY, $updatedBy, $comparison);
    }

    /**
     * Filter the query on the usuario_id column
     *
     * Example usage:
     * <code>
     * $query->filterByUsuarioId(1234); // WHERE usuario_id = 1234
     * $query->filterByUsuarioId(array(12, 34)); // WHERE usuario_id IN (12, 34)
     * $query->filterByUsuarioId(array('min' => 12)); // WHERE usuario_id > 12
     * </code>
     *
     * @see       filterByUsuario()
     *
     * @param     mixed $usuarioId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function filterByUsuarioId($usuarioId = null, $comparison = null)
    {
        if (is_array($usuarioId)) {
            $useMinMax = false;
            if (isset($usuarioId['min'])) {
                $this->addUsingAlias(RequerimientoPeer::USUARIO_ID, $usuarioId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($usuarioId['max'])) {
                $this->addUsingAlias(RequerimientoPeer::USUARIO_ID, $usuarioId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RequerimientoPeer::USUARIO_ID, $usuarioId, $comparison);
    }

    /**
     * Filter the query by a related Moneda object
     *
     * @param   Moneda|PropelObjectCollection $moneda The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RequerimientoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByMoneda($moneda, $comparison = null)
    {
        if ($moneda instanceof Moneda) {
            return $this
                ->addUsingAlias(RequerimientoPeer::MONEDA_ID, $moneda->getId(), $comparison);
        } elseif ($moneda instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(RequerimientoPeer::MONEDA_ID, $moneda->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByMoneda() only accepts arguments of type Moneda or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Moneda relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function joinMoneda($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Moneda');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Moneda');
        }

        return $this;
    }

    /**
     * Use the Moneda relation Moneda object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   MonedaQuery A secondary query class using the current class as primary query
     */
    public function useMonedaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinMoneda($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Moneda', 'MonedaQuery');
    }

    /**
     * Filter the query by a related Usuario object
     *
     * @param   Usuario|PropelObjectCollection $usuario The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RequerimientoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByUsuario($usuario, $comparison = null)
    {
        if ($usuario instanceof Usuario) {
            return $this
                ->addUsingAlias(RequerimientoPeer::USUARIO_ID, $usuario->getId(), $comparison);
        } elseif ($usuario instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(RequerimientoPeer::USUARIO_ID, $usuario->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByUsuario() only accepts arguments of type Usuario or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Usuario relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function joinUsuario($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Usuario');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Usuario');
        }

        return $this;
    }

    /**
     * Use the Usuario relation Usuario object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   UsuarioQuery A secondary query class using the current class as primary query
     */
    public function useUsuarioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinUsuario($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Usuario', 'UsuarioQuery');
    }

    /**
     * Filter the query by a related Negocio object
     *
     * @param   Negocio|PropelObjectCollection $negocio  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RequerimientoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByNegocio($negocio, $comparison = null)
    {
        if ($negocio instanceof Negocio) {
            return $this
                ->addUsingAlias(RequerimientoPeer::ID, $negocio->getRequerimientoId(), $comparison);
        } elseif ($negocio instanceof PropelObjectCollection) {
            return $this
                ->useNegocioQuery()
                ->filterByPrimaryKeys($negocio->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByNegocio() only accepts arguments of type Negocio or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Negocio relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function joinNegocio($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Negocio');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Negocio');
        }

        return $this;
    }

    /**
     * Use the Negocio relation Negocio object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   NegocioQuery A secondary query class using the current class as primary query
     */
    public function useNegocioQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinNegocio($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Negocio', 'NegocioQuery');
    }

    /**
     * Filter the query by a related DireccionRequerimiento object
     *
     * @param   DireccionRequerimiento|PropelObjectCollection $direccionRequerimiento  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RequerimientoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDireccionRequerimiento($direccionRequerimiento, $comparison = null)
    {
        if ($direccionRequerimiento instanceof DireccionRequerimiento) {
            return $this
                ->addUsingAlias(RequerimientoPeer::ID, $direccionRequerimiento->getRequerimientoId(), $comparison);
        } elseif ($direccionRequerimiento instanceof PropelObjectCollection) {
            return $this
                ->useDireccionRequerimientoQuery()
                ->filterByPrimaryKeys($direccionRequerimiento->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDireccionRequerimiento() only accepts arguments of type DireccionRequerimiento or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the DireccionRequerimiento relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function joinDireccionRequerimiento($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('DireccionRequerimiento');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'DireccionRequerimiento');
        }

        return $this;
    }

    /**
     * Use the DireccionRequerimiento relation DireccionRequerimiento object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DireccionRequerimientoQuery A secondary query class using the current class as primary query
     */
    public function useDireccionRequerimientoQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinDireccionRequerimiento($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'DireccionRequerimiento', 'DireccionRequerimientoQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Requerimiento $requerimiento Object to remove from the list of results
     *
     * @return RequerimientoQuery The current query, for fluid interface
     */
    public function prune($requerimiento = null)
    {
        if ($requerimiento) {
            $this->addUsingAlias(RequerimientoPeer::ID, $requerimiento->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
