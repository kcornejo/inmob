<?php


/**
 * Base class that represents a row from the 'propiedad' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 01/10/18 12:30:11
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BasePropiedad extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'PropiedadPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        PropiedadPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the tipo_operacion field.
     * @var        string
     */
    protected $tipo_operacion;

    /**
     * The value for the tipo_inmueble field.
     * @var        string
     */
    protected $tipo_inmueble;

    /**
     * The value for the cantidad_habitacion field.
     * @var        int
     */
    protected $cantidad_habitacion;

    /**
     * The value for the cantidad_banio field.
     * @var        int
     */
    protected $cantidad_banio;

    /**
     * The value for the cantidad_parqueo field.
     * @var        int
     */
    protected $cantidad_parqueo;

    /**
     * The value for the cantidad_comedor field.
     * @var        int
     */
    protected $cantidad_comedor;

    /**
     * The value for the cantidad_sala field.
     * @var        int
     */
    protected $cantidad_sala;

    /**
     * The value for the cantidad_cocina field.
     * @var        int
     */
    protected $cantidad_cocina;

    /**
     * The value for the dormitorio_servicio field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $dormitorio_servicio;

    /**
     * The value for the estudio field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $estudio;

    /**
     * The value for the cisterna field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $cisterna;

    /**
     * The value for the cantidad_jardin field.
     * @var        int
     */
    protected $cantidad_jardin;

    /**
     * The value for the cantidad_patio field.
     * @var        int
     */
    protected $cantidad_patio;

    /**
     * The value for the lavanderia field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $lavanderia;

    /**
     * The value for the estado field.
     * @var        string
     */
    protected $estado;

    /**
     * The value for the amenidades field.
     * @var        string
     */
    protected $amenidades;

    /**
     * The value for the moneda_id field.
     * @var        int
     */
    protected $moneda_id;

    /**
     * The value for the precio field.
     * @var        double
     */
    protected $precio;

    /**
     * The value for the negociable field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $negociable;

    /**
     * The value for the incluye_gastos_escritura field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $incluye_gastos_escritura;

    /**
     * The value for the anio_construccion field.
     * @var        int
     */
    protected $anio_construccion;

    /**
     * The value for the mantenimiento_mensual field.
     * @var        double
     */
    protected $mantenimiento_mensual;

    /**
     * The value for the iusi_semestral field.
     * @var        double
     */
    protected $iusi_semestral;

    /**
     * The value for the valor_avaluo field.
     * @var        double
     */
    protected $valor_avaluo;

    /**
     * The value for the mi_comision field.
     * @var        double
     */
    protected $mi_comision;

    /**
     * The value for the comision_compartida field.
     * @var        double
     */
    protected $comision_compartida;

    /**
     * The value for the nombre_cliente field.
     * @var        string
     */
    protected $nombre_cliente;

    /**
     * The value for the correo_cliente field.
     * @var        string
     */
    protected $correo_cliente;

    /**
     * The value for the telefono_cliente field.
     * @var        string
     */
    protected $telefono_cliente;

    /**
     * The value for the departamento_id field.
     * @var        int
     */
    protected $departamento_id;

    /**
     * The value for the municipio_id field.
     * @var        int
     */
    protected $municipio_id;

    /**
     * The value for the zona field.
     * @var        string
     */
    protected $zona;

    /**
     * The value for the carretera_id field.
     * @var        int
     */
    protected $carretera_id;

    /**
     * The value for the km field.
     * @var        string
     */
    protected $km;

    /**
     * The value for the direccion field.
     * @var        string
     */
    protected $direccion;

    /**
     * The value for the seguridad field.
     * @var        double
     */
    protected $seguridad;

    /**
     * The value for the accesos field.
     * @var        double
     */
    protected $accesos;

    /**
     * The value for the agua field.
     * @var        double
     */
    protected $agua;

    /**
     * The value for the transporte_publico field.
     * @var        double
     */
    protected $transporte_publico;

    /**
     * The value for the transito_vehicular field.
     * @var        double
     */
    protected $transito_vehicular;

    /**
     * The value for the comunidades_colidantes field.
     * @var        double
     */
    protected $comunidades_colidantes;

    /**
     * The value for the areas_recreacion field.
     * @var        double
     */
    protected $areas_recreacion;

    /**
     * The value for the forma_pago field.
     * @var        string
     */
    protected $forma_pago;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * The value for the created_by field.
     * @var        string
     */
    protected $created_by;

    /**
     * The value for the updated_by field.
     * @var        string
     */
    protected $updated_by;

    /**
     * The value for the tiene_luz field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $tiene_luz;

    /**
     * The value for the tiene_agua field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $tiene_agua;

    /**
     * The value for the niveles field.
     * @var        int
     */
    protected $niveles;

    /**
     * The value for the area field.
     * @var        double
     */
    protected $area;

    /**
     * The value for the area_x field.
     * @var        double
     */
    protected $area_x;

    /**
     * The value for the area_y field.
     * @var        double
     */
    protected $area_y;

    /**
     * @var        Moneda
     */
    protected $aMoneda;

    /**
     * @var        Departamento
     */
    protected $aDepartamento;

    /**
     * @var        Municipio
     */
    protected $aMunicipio;

    /**
     * @var        Carretera
     */
    protected $aCarretera;

    /**
     * @var        PropelObjectCollection|PropiedadImagen[] Collection to store aggregation of PropiedadImagen objects.
     */
    protected $collPropiedadImagens;
    protected $collPropiedadImagensPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $propiedadImagensScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->dormitorio_servicio = false;
        $this->estudio = false;
        $this->cisterna = false;
        $this->lavanderia = false;
        $this->negociable = false;
        $this->incluye_gastos_escritura = false;
        $this->tiene_luz = false;
        $this->tiene_agua = false;
    }

    /**
     * Initializes internal state of BasePropiedad object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [tipo_operacion] column value.
     *
     * @return string
     */
    public function getTipoOperacion()
    {
        return $this->tipo_operacion;
    }

    /**
     * Get the [tipo_inmueble] column value.
     *
     * @return string
     */
    public function getTipoInmueble()
    {
        return $this->tipo_inmueble;
    }

    /**
     * Get the [cantidad_habitacion] column value.
     *
     * @return int
     */
    public function getCantidadHabitacion()
    {
        return $this->cantidad_habitacion;
    }

    /**
     * Get the [cantidad_banio] column value.
     *
     * @return int
     */
    public function getCantidadBanio()
    {
        return $this->cantidad_banio;
    }

    /**
     * Get the [cantidad_parqueo] column value.
     *
     * @return int
     */
    public function getCantidadParqueo()
    {
        return $this->cantidad_parqueo;
    }

    /**
     * Get the [cantidad_comedor] column value.
     *
     * @return int
     */
    public function getCantidadComedor()
    {
        return $this->cantidad_comedor;
    }

    /**
     * Get the [cantidad_sala] column value.
     *
     * @return int
     */
    public function getCantidadSala()
    {
        return $this->cantidad_sala;
    }

    /**
     * Get the [cantidad_cocina] column value.
     *
     * @return int
     */
    public function getCantidadCocina()
    {
        return $this->cantidad_cocina;
    }

    /**
     * Get the [dormitorio_servicio] column value.
     *
     * @return boolean
     */
    public function getDormitorioServicio()
    {
        return $this->dormitorio_servicio;
    }

    /**
     * Get the [estudio] column value.
     *
     * @return boolean
     */
    public function getEstudio()
    {
        return $this->estudio;
    }

    /**
     * Get the [cisterna] column value.
     *
     * @return boolean
     */
    public function getCisterna()
    {
        return $this->cisterna;
    }

    /**
     * Get the [cantidad_jardin] column value.
     *
     * @return int
     */
    public function getCantidadJardin()
    {
        return $this->cantidad_jardin;
    }

    /**
     * Get the [cantidad_patio] column value.
     *
     * @return int
     */
    public function getCantidadPatio()
    {
        return $this->cantidad_patio;
    }

    /**
     * Get the [lavanderia] column value.
     *
     * @return boolean
     */
    public function getLavanderia()
    {
        return $this->lavanderia;
    }

    /**
     * Get the [estado] column value.
     *
     * @return string
     */
    public function getEstado()
    {
        return $this->estado;
    }

    /**
     * Get the [amenidades] column value.
     *
     * @return string
     */
    public function getAmenidades()
    {
        return $this->amenidades;
    }

    /**
     * Get the [moneda_id] column value.
     *
     * @return int
     */
    public function getMonedaId()
    {
        return $this->moneda_id;
    }

    /**
     * Get the [precio] column value.
     *
     * @return double
     */
    public function getPrecio()
    {
        return $this->precio;
    }

    /**
     * Get the [negociable] column value.
     *
     * @return boolean
     */
    public function getNegociable()
    {
        return $this->negociable;
    }

    /**
     * Get the [incluye_gastos_escritura] column value.
     *
     * @return boolean
     */
    public function getIncluyeGastosEscritura()
    {
        return $this->incluye_gastos_escritura;
    }

    /**
     * Get the [anio_construccion] column value.
     *
     * @return int
     */
    public function getAnioConstruccion()
    {
        return $this->anio_construccion;
    }

    /**
     * Get the [mantenimiento_mensual] column value.
     *
     * @return double
     */
    public function getMantenimientoMensual()
    {
        return $this->mantenimiento_mensual;
    }

    /**
     * Get the [iusi_semestral] column value.
     *
     * @return double
     */
    public function getIusiSemestral()
    {
        return $this->iusi_semestral;
    }

    /**
     * Get the [valor_avaluo] column value.
     *
     * @return double
     */
    public function getValorAvaluo()
    {
        return $this->valor_avaluo;
    }

    /**
     * Get the [mi_comision] column value.
     *
     * @return double
     */
    public function getMiComision()
    {
        return $this->mi_comision;
    }

    /**
     * Get the [comision_compartida] column value.
     *
     * @return double
     */
    public function getComisionCompartida()
    {
        return $this->comision_compartida;
    }

    /**
     * Get the [nombre_cliente] column value.
     *
     * @return string
     */
    public function getNombreCliente()
    {
        return $this->nombre_cliente;
    }

    /**
     * Get the [correo_cliente] column value.
     *
     * @return string
     */
    public function getCorreoCliente()
    {
        return $this->correo_cliente;
    }

    /**
     * Get the [telefono_cliente] column value.
     *
     * @return string
     */
    public function getTelefonoCliente()
    {
        return $this->telefono_cliente;
    }

    /**
     * Get the [departamento_id] column value.
     *
     * @return int
     */
    public function getDepartamentoId()
    {
        return $this->departamento_id;
    }

    /**
     * Get the [municipio_id] column value.
     *
     * @return int
     */
    public function getMunicipioId()
    {
        return $this->municipio_id;
    }

    /**
     * Get the [zona] column value.
     *
     * @return string
     */
    public function getZona()
    {
        return $this->zona;
    }

    /**
     * Get the [carretera_id] column value.
     *
     * @return int
     */
    public function getCarreteraId()
    {
        return $this->carretera_id;
    }

    /**
     * Get the [km] column value.
     *
     * @return string
     */
    public function getKm()
    {
        return $this->km;
    }

    /**
     * Get the [direccion] column value.
     *
     * @return string
     */
    public function getDireccion()
    {
        return $this->direccion;
    }

    /**
     * Get the [seguridad] column value.
     *
     * @return double
     */
    public function getSeguridad()
    {
        return $this->seguridad;
    }

    /**
     * Get the [accesos] column value.
     *
     * @return double
     */
    public function getAccesos()
    {
        return $this->accesos;
    }

    /**
     * Get the [agua] column value.
     *
     * @return double
     */
    public function getAgua()
    {
        return $this->agua;
    }

    /**
     * Get the [transporte_publico] column value.
     *
     * @return double
     */
    public function getTransportePublico()
    {
        return $this->transporte_publico;
    }

    /**
     * Get the [transito_vehicular] column value.
     *
     * @return double
     */
    public function getTransitoVehicular()
    {
        return $this->transito_vehicular;
    }

    /**
     * Get the [comunidades_colidantes] column value.
     *
     * @return double
     */
    public function getComunidadesColidantes()
    {
        return $this->comunidades_colidantes;
    }

    /**
     * Get the [areas_recreacion] column value.
     *
     * @return double
     */
    public function getAreasRecreacion()
    {
        return $this->areas_recreacion;
    }

    /**
     * Get the [forma_pago] column value.
     *
     * @return string
     */
    public function getFormaPago()
    {
        return $this->forma_pago;
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->updated_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [created_by] column value.
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->created_by;
    }

    /**
     * Get the [updated_by] column value.
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->updated_by;
    }

    /**
     * Get the [tiene_luz] column value.
     *
     * @return boolean
     */
    public function getTieneLuz()
    {
        return $this->tiene_luz;
    }

    /**
     * Get the [tiene_agua] column value.
     *
     * @return boolean
     */
    public function getTieneAgua()
    {
        return $this->tiene_agua;
    }

    /**
     * Get the [niveles] column value.
     *
     * @return int
     */
    public function getNiveles()
    {
        return $this->niveles;
    }

    /**
     * Get the [area] column value.
     *
     * @return double
     */
    public function getArea()
    {
        return $this->area;
    }

    /**
     * Get the [area_x] column value.
     *
     * @return double
     */
    public function getAreaX()
    {
        return $this->area_x;
    }

    /**
     * Get the [area_y] column value.
     *
     * @return double
     */
    public function getAreaY()
    {
        return $this->area_y;
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = PropiedadPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [tipo_operacion] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setTipoOperacion($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->tipo_operacion !== $v) {
            $this->tipo_operacion = $v;
            $this->modifiedColumns[] = PropiedadPeer::TIPO_OPERACION;
        }


        return $this;
    } // setTipoOperacion()

    /**
     * Set the value of [tipo_inmueble] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setTipoInmueble($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->tipo_inmueble !== $v) {
            $this->tipo_inmueble = $v;
            $this->modifiedColumns[] = PropiedadPeer::TIPO_INMUEBLE;
        }


        return $this;
    } // setTipoInmueble()

    /**
     * Set the value of [cantidad_habitacion] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCantidadHabitacion($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->cantidad_habitacion !== $v) {
            $this->cantidad_habitacion = $v;
            $this->modifiedColumns[] = PropiedadPeer::CANTIDAD_HABITACION;
        }


        return $this;
    } // setCantidadHabitacion()

    /**
     * Set the value of [cantidad_banio] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCantidadBanio($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->cantidad_banio !== $v) {
            $this->cantidad_banio = $v;
            $this->modifiedColumns[] = PropiedadPeer::CANTIDAD_BANIO;
        }


        return $this;
    } // setCantidadBanio()

    /**
     * Set the value of [cantidad_parqueo] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCantidadParqueo($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->cantidad_parqueo !== $v) {
            $this->cantidad_parqueo = $v;
            $this->modifiedColumns[] = PropiedadPeer::CANTIDAD_PARQUEO;
        }


        return $this;
    } // setCantidadParqueo()

    /**
     * Set the value of [cantidad_comedor] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCantidadComedor($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->cantidad_comedor !== $v) {
            $this->cantidad_comedor = $v;
            $this->modifiedColumns[] = PropiedadPeer::CANTIDAD_COMEDOR;
        }


        return $this;
    } // setCantidadComedor()

    /**
     * Set the value of [cantidad_sala] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCantidadSala($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->cantidad_sala !== $v) {
            $this->cantidad_sala = $v;
            $this->modifiedColumns[] = PropiedadPeer::CANTIDAD_SALA;
        }


        return $this;
    } // setCantidadSala()

    /**
     * Set the value of [cantidad_cocina] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCantidadCocina($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->cantidad_cocina !== $v) {
            $this->cantidad_cocina = $v;
            $this->modifiedColumns[] = PropiedadPeer::CANTIDAD_COCINA;
        }


        return $this;
    } // setCantidadCocina()

    /**
     * Sets the value of the [dormitorio_servicio] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setDormitorioServicio($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->dormitorio_servicio !== $v) {
            $this->dormitorio_servicio = $v;
            $this->modifiedColumns[] = PropiedadPeer::DORMITORIO_SERVICIO;
        }


        return $this;
    } // setDormitorioServicio()

    /**
     * Sets the value of the [estudio] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setEstudio($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->estudio !== $v) {
            $this->estudio = $v;
            $this->modifiedColumns[] = PropiedadPeer::ESTUDIO;
        }


        return $this;
    } // setEstudio()

    /**
     * Sets the value of the [cisterna] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCisterna($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->cisterna !== $v) {
            $this->cisterna = $v;
            $this->modifiedColumns[] = PropiedadPeer::CISTERNA;
        }


        return $this;
    } // setCisterna()

    /**
     * Set the value of [cantidad_jardin] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCantidadJardin($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->cantidad_jardin !== $v) {
            $this->cantidad_jardin = $v;
            $this->modifiedColumns[] = PropiedadPeer::CANTIDAD_JARDIN;
        }


        return $this;
    } // setCantidadJardin()

    /**
     * Set the value of [cantidad_patio] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCantidadPatio($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->cantidad_patio !== $v) {
            $this->cantidad_patio = $v;
            $this->modifiedColumns[] = PropiedadPeer::CANTIDAD_PATIO;
        }


        return $this;
    } // setCantidadPatio()

    /**
     * Sets the value of the [lavanderia] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setLavanderia($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->lavanderia !== $v) {
            $this->lavanderia = $v;
            $this->modifiedColumns[] = PropiedadPeer::LAVANDERIA;
        }


        return $this;
    } // setLavanderia()

    /**
     * Set the value of [estado] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setEstado($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->estado !== $v) {
            $this->estado = $v;
            $this->modifiedColumns[] = PropiedadPeer::ESTADO;
        }


        return $this;
    } // setEstado()

    /**
     * Set the value of [amenidades] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setAmenidades($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->amenidades !== $v) {
            $this->amenidades = $v;
            $this->modifiedColumns[] = PropiedadPeer::AMENIDADES;
        }


        return $this;
    } // setAmenidades()

    /**
     * Set the value of [moneda_id] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setMonedaId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->moneda_id !== $v) {
            $this->moneda_id = $v;
            $this->modifiedColumns[] = PropiedadPeer::MONEDA_ID;
        }

        if ($this->aMoneda !== null && $this->aMoneda->getId() !== $v) {
            $this->aMoneda = null;
        }


        return $this;
    } // setMonedaId()

    /**
     * Set the value of [precio] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setPrecio($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->precio !== $v) {
            $this->precio = $v;
            $this->modifiedColumns[] = PropiedadPeer::PRECIO;
        }


        return $this;
    } // setPrecio()

    /**
     * Sets the value of the [negociable] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setNegociable($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->negociable !== $v) {
            $this->negociable = $v;
            $this->modifiedColumns[] = PropiedadPeer::NEGOCIABLE;
        }


        return $this;
    } // setNegociable()

    /**
     * Sets the value of the [incluye_gastos_escritura] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setIncluyeGastosEscritura($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->incluye_gastos_escritura !== $v) {
            $this->incluye_gastos_escritura = $v;
            $this->modifiedColumns[] = PropiedadPeer::INCLUYE_GASTOS_ESCRITURA;
        }


        return $this;
    } // setIncluyeGastosEscritura()

    /**
     * Set the value of [anio_construccion] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setAnioConstruccion($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->anio_construccion !== $v) {
            $this->anio_construccion = $v;
            $this->modifiedColumns[] = PropiedadPeer::ANIO_CONSTRUCCION;
        }


        return $this;
    } // setAnioConstruccion()

    /**
     * Set the value of [mantenimiento_mensual] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setMantenimientoMensual($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->mantenimiento_mensual !== $v) {
            $this->mantenimiento_mensual = $v;
            $this->modifiedColumns[] = PropiedadPeer::MANTENIMIENTO_MENSUAL;
        }


        return $this;
    } // setMantenimientoMensual()

    /**
     * Set the value of [iusi_semestral] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setIusiSemestral($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->iusi_semestral !== $v) {
            $this->iusi_semestral = $v;
            $this->modifiedColumns[] = PropiedadPeer::IUSI_SEMESTRAL;
        }


        return $this;
    } // setIusiSemestral()

    /**
     * Set the value of [valor_avaluo] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setValorAvaluo($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->valor_avaluo !== $v) {
            $this->valor_avaluo = $v;
            $this->modifiedColumns[] = PropiedadPeer::VALOR_AVALUO;
        }


        return $this;
    } // setValorAvaluo()

    /**
     * Set the value of [mi_comision] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setMiComision($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->mi_comision !== $v) {
            $this->mi_comision = $v;
            $this->modifiedColumns[] = PropiedadPeer::MI_COMISION;
        }


        return $this;
    } // setMiComision()

    /**
     * Set the value of [comision_compartida] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setComisionCompartida($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->comision_compartida !== $v) {
            $this->comision_compartida = $v;
            $this->modifiedColumns[] = PropiedadPeer::COMISION_COMPARTIDA;
        }


        return $this;
    } // setComisionCompartida()

    /**
     * Set the value of [nombre_cliente] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setNombreCliente($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->nombre_cliente !== $v) {
            $this->nombre_cliente = $v;
            $this->modifiedColumns[] = PropiedadPeer::NOMBRE_CLIENTE;
        }


        return $this;
    } // setNombreCliente()

    /**
     * Set the value of [correo_cliente] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCorreoCliente($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->correo_cliente !== $v) {
            $this->correo_cliente = $v;
            $this->modifiedColumns[] = PropiedadPeer::CORREO_CLIENTE;
        }


        return $this;
    } // setCorreoCliente()

    /**
     * Set the value of [telefono_cliente] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setTelefonoCliente($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->telefono_cliente !== $v) {
            $this->telefono_cliente = $v;
            $this->modifiedColumns[] = PropiedadPeer::TELEFONO_CLIENTE;
        }


        return $this;
    } // setTelefonoCliente()

    /**
     * Set the value of [departamento_id] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setDepartamentoId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->departamento_id !== $v) {
            $this->departamento_id = $v;
            $this->modifiedColumns[] = PropiedadPeer::DEPARTAMENTO_ID;
        }

        if ($this->aDepartamento !== null && $this->aDepartamento->getId() !== $v) {
            $this->aDepartamento = null;
        }


        return $this;
    } // setDepartamentoId()

    /**
     * Set the value of [municipio_id] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setMunicipioId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->municipio_id !== $v) {
            $this->municipio_id = $v;
            $this->modifiedColumns[] = PropiedadPeer::MUNICIPIO_ID;
        }

        if ($this->aMunicipio !== null && $this->aMunicipio->getId() !== $v) {
            $this->aMunicipio = null;
        }


        return $this;
    } // setMunicipioId()

    /**
     * Set the value of [zona] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setZona($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->zona !== $v) {
            $this->zona = $v;
            $this->modifiedColumns[] = PropiedadPeer::ZONA;
        }


        return $this;
    } // setZona()

    /**
     * Set the value of [carretera_id] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCarreteraId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->carretera_id !== $v) {
            $this->carretera_id = $v;
            $this->modifiedColumns[] = PropiedadPeer::CARRETERA_ID;
        }

        if ($this->aCarretera !== null && $this->aCarretera->getId() !== $v) {
            $this->aCarretera = null;
        }


        return $this;
    } // setCarreteraId()

    /**
     * Set the value of [km] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setKm($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->km !== $v) {
            $this->km = $v;
            $this->modifiedColumns[] = PropiedadPeer::KM;
        }


        return $this;
    } // setKm()

    /**
     * Set the value of [direccion] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setDireccion($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->direccion !== $v) {
            $this->direccion = $v;
            $this->modifiedColumns[] = PropiedadPeer::DIRECCION;
        }


        return $this;
    } // setDireccion()

    /**
     * Set the value of [seguridad] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setSeguridad($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->seguridad !== $v) {
            $this->seguridad = $v;
            $this->modifiedColumns[] = PropiedadPeer::SEGURIDAD;
        }


        return $this;
    } // setSeguridad()

    /**
     * Set the value of [accesos] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setAccesos($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->accesos !== $v) {
            $this->accesos = $v;
            $this->modifiedColumns[] = PropiedadPeer::ACCESOS;
        }


        return $this;
    } // setAccesos()

    /**
     * Set the value of [agua] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setAgua($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->agua !== $v) {
            $this->agua = $v;
            $this->modifiedColumns[] = PropiedadPeer::AGUA;
        }


        return $this;
    } // setAgua()

    /**
     * Set the value of [transporte_publico] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setTransportePublico($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->transporte_publico !== $v) {
            $this->transporte_publico = $v;
            $this->modifiedColumns[] = PropiedadPeer::TRANSPORTE_PUBLICO;
        }


        return $this;
    } // setTransportePublico()

    /**
     * Set the value of [transito_vehicular] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setTransitoVehicular($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->transito_vehicular !== $v) {
            $this->transito_vehicular = $v;
            $this->modifiedColumns[] = PropiedadPeer::TRANSITO_VEHICULAR;
        }


        return $this;
    } // setTransitoVehicular()

    /**
     * Set the value of [comunidades_colidantes] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setComunidadesColidantes($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->comunidades_colidantes !== $v) {
            $this->comunidades_colidantes = $v;
            $this->modifiedColumns[] = PropiedadPeer::COMUNIDADES_COLIDANTES;
        }


        return $this;
    } // setComunidadesColidantes()

    /**
     * Set the value of [areas_recreacion] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setAreasRecreacion($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->areas_recreacion !== $v) {
            $this->areas_recreacion = $v;
            $this->modifiedColumns[] = PropiedadPeer::AREAS_RECREACION;
        }


        return $this;
    } // setAreasRecreacion()

    /**
     * Set the value of [forma_pago] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setFormaPago($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->forma_pago !== $v) {
            $this->forma_pago = $v;
            $this->modifiedColumns[] = PropiedadPeer::FORMA_PAGO;
        }


        return $this;
    } // setFormaPago()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = PropiedadPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Propiedad The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = PropiedadPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Set the value of [created_by] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setCreatedBy($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->created_by !== $v) {
            $this->created_by = $v;
            $this->modifiedColumns[] = PropiedadPeer::CREATED_BY;
        }


        return $this;
    } // setCreatedBy()

    /**
     * Set the value of [updated_by] column.
     *
     * @param string $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setUpdatedBy($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->updated_by !== $v) {
            $this->updated_by = $v;
            $this->modifiedColumns[] = PropiedadPeer::UPDATED_BY;
        }


        return $this;
    } // setUpdatedBy()

    /**
     * Sets the value of the [tiene_luz] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setTieneLuz($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->tiene_luz !== $v) {
            $this->tiene_luz = $v;
            $this->modifiedColumns[] = PropiedadPeer::TIENE_LUZ;
        }


        return $this;
    } // setTieneLuz()

    /**
     * Sets the value of the [tiene_agua] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setTieneAgua($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->tiene_agua !== $v) {
            $this->tiene_agua = $v;
            $this->modifiedColumns[] = PropiedadPeer::TIENE_AGUA;
        }


        return $this;
    } // setTieneAgua()

    /**
     * Set the value of [niveles] column.
     *
     * @param int $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setNiveles($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->niveles !== $v) {
            $this->niveles = $v;
            $this->modifiedColumns[] = PropiedadPeer::NIVELES;
        }


        return $this;
    } // setNiveles()

    /**
     * Set the value of [area] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setArea($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->area !== $v) {
            $this->area = $v;
            $this->modifiedColumns[] = PropiedadPeer::AREA;
        }


        return $this;
    } // setArea()

    /**
     * Set the value of [area_x] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setAreaX($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->area_x !== $v) {
            $this->area_x = $v;
            $this->modifiedColumns[] = PropiedadPeer::AREA_X;
        }


        return $this;
    } // setAreaX()

    /**
     * Set the value of [area_y] column.
     *
     * @param double $v new value
     * @return Propiedad The current object (for fluent API support)
     */
    public function setAreaY($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->area_y !== $v) {
            $this->area_y = $v;
            $this->modifiedColumns[] = PropiedadPeer::AREA_Y;
        }


        return $this;
    } // setAreaY()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->dormitorio_servicio !== false) {
                return false;
            }

            if ($this->estudio !== false) {
                return false;
            }

            if ($this->cisterna !== false) {
                return false;
            }

            if ($this->lavanderia !== false) {
                return false;
            }

            if ($this->negociable !== false) {
                return false;
            }

            if ($this->incluye_gastos_escritura !== false) {
                return false;
            }

            if ($this->tiene_luz !== false) {
                return false;
            }

            if ($this->tiene_agua !== false) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->tipo_operacion = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->tipo_inmueble = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->cantidad_habitacion = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
            $this->cantidad_banio = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
            $this->cantidad_parqueo = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
            $this->cantidad_comedor = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
            $this->cantidad_sala = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
            $this->cantidad_cocina = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
            $this->dormitorio_servicio = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
            $this->estudio = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
            $this->cisterna = ($row[$startcol + 11] !== null) ? (boolean) $row[$startcol + 11] : null;
            $this->cantidad_jardin = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
            $this->cantidad_patio = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
            $this->lavanderia = ($row[$startcol + 14] !== null) ? (boolean) $row[$startcol + 14] : null;
            $this->estado = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->amenidades = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
            $this->moneda_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
            $this->precio = ($row[$startcol + 18] !== null) ? (double) $row[$startcol + 18] : null;
            $this->negociable = ($row[$startcol + 19] !== null) ? (boolean) $row[$startcol + 19] : null;
            $this->incluye_gastos_escritura = ($row[$startcol + 20] !== null) ? (boolean) $row[$startcol + 20] : null;
            $this->anio_construccion = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
            $this->mantenimiento_mensual = ($row[$startcol + 22] !== null) ? (double) $row[$startcol + 22] : null;
            $this->iusi_semestral = ($row[$startcol + 23] !== null) ? (double) $row[$startcol + 23] : null;
            $this->valor_avaluo = ($row[$startcol + 24] !== null) ? (double) $row[$startcol + 24] : null;
            $this->mi_comision = ($row[$startcol + 25] !== null) ? (double) $row[$startcol + 25] : null;
            $this->comision_compartida = ($row[$startcol + 26] !== null) ? (double) $row[$startcol + 26] : null;
            $this->nombre_cliente = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
            $this->correo_cliente = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
            $this->telefono_cliente = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
            $this->departamento_id = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
            $this->municipio_id = ($row[$startcol + 31] !== null) ? (int) $row[$startcol + 31] : null;
            $this->zona = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
            $this->carretera_id = ($row[$startcol + 33] !== null) ? (int) $row[$startcol + 33] : null;
            $this->km = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
            $this->direccion = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
            $this->seguridad = ($row[$startcol + 36] !== null) ? (double) $row[$startcol + 36] : null;
            $this->accesos = ($row[$startcol + 37] !== null) ? (double) $row[$startcol + 37] : null;
            $this->agua = ($row[$startcol + 38] !== null) ? (double) $row[$startcol + 38] : null;
            $this->transporte_publico = ($row[$startcol + 39] !== null) ? (double) $row[$startcol + 39] : null;
            $this->transito_vehicular = ($row[$startcol + 40] !== null) ? (double) $row[$startcol + 40] : null;
            $this->comunidades_colidantes = ($row[$startcol + 41] !== null) ? (double) $row[$startcol + 41] : null;
            $this->areas_recreacion = ($row[$startcol + 42] !== null) ? (double) $row[$startcol + 42] : null;
            $this->forma_pago = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
            $this->created_at = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
            $this->updated_at = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
            $this->created_by = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
            $this->updated_by = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
            $this->tiene_luz = ($row[$startcol + 48] !== null) ? (boolean) $row[$startcol + 48] : null;
            $this->tiene_agua = ($row[$startcol + 49] !== null) ? (boolean) $row[$startcol + 49] : null;
            $this->niveles = ($row[$startcol + 50] !== null) ? (int) $row[$startcol + 50] : null;
            $this->area = ($row[$startcol + 51] !== null) ? (double) $row[$startcol + 51] : null;
            $this->area_x = ($row[$startcol + 52] !== null) ? (double) $row[$startcol + 52] : null;
            $this->area_y = ($row[$startcol + 53] !== null) ? (double) $row[$startcol + 53] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 54; // 54 = PropiedadPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Propiedad object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->aMoneda !== null && $this->moneda_id !== $this->aMoneda->getId()) {
            $this->aMoneda = null;
        }
        if ($this->aDepartamento !== null && $this->departamento_id !== $this->aDepartamento->getId()) {
            $this->aDepartamento = null;
        }
        if ($this->aMunicipio !== null && $this->municipio_id !== $this->aMunicipio->getId()) {
            $this->aMunicipio = null;
        }
        if ($this->aCarretera !== null && $this->carretera_id !== $this->aCarretera->getId()) {
            $this->aCarretera = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = PropiedadPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->aMoneda = null;
            $this->aDepartamento = null;
            $this->aMunicipio = null;
            $this->aCarretera = null;
            $this->collPropiedadImagens = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = PropiedadQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BasePropiedad:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BasePropiedad:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(PropiedadPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BasePropiedad:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(PropiedadPeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(PropiedadPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BasePropiedad:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                PropiedadPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aMoneda !== null) {
                if ($this->aMoneda->isModified() || $this->aMoneda->isNew()) {
                    $affectedRows += $this->aMoneda->save($con);
                }
                $this->setMoneda($this->aMoneda);
            }

            if ($this->aDepartamento !== null) {
                if ($this->aDepartamento->isModified() || $this->aDepartamento->isNew()) {
                    $affectedRows += $this->aDepartamento->save($con);
                }
                $this->setDepartamento($this->aDepartamento);
            }

            if ($this->aMunicipio !== null) {
                if ($this->aMunicipio->isModified() || $this->aMunicipio->isNew()) {
                    $affectedRows += $this->aMunicipio->save($con);
                }
                $this->setMunicipio($this->aMunicipio);
            }

            if ($this->aCarretera !== null) {
                if ($this->aCarretera->isModified() || $this->aCarretera->isNew()) {
                    $affectedRows += $this->aCarretera->save($con);
                }
                $this->setCarretera($this->aCarretera);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->propiedadImagensScheduledForDeletion !== null) {
                if (!$this->propiedadImagensScheduledForDeletion->isEmpty()) {
                    foreach ($this->propiedadImagensScheduledForDeletion as $propiedadImagen) {
                        // need to save related object because we set the relation to null
                        $propiedadImagen->save($con);
                    }
                    $this->propiedadImagensScheduledForDeletion = null;
                }
            }

            if ($this->collPropiedadImagens !== null) {
                foreach ($this->collPropiedadImagens as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = PropiedadPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . PropiedadPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(PropiedadPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(PropiedadPeer::TIPO_OPERACION)) {
            $modifiedColumns[':p' . $index++]  = '`TIPO_OPERACION`';
        }
        if ($this->isColumnModified(PropiedadPeer::TIPO_INMUEBLE)) {
            $modifiedColumns[':p' . $index++]  = '`TIPO_INMUEBLE`';
        }
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_HABITACION)) {
            $modifiedColumns[':p' . $index++]  = '`CANTIDAD_HABITACION`';
        }
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_BANIO)) {
            $modifiedColumns[':p' . $index++]  = '`CANTIDAD_BANIO`';
        }
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_PARQUEO)) {
            $modifiedColumns[':p' . $index++]  = '`CANTIDAD_PARQUEO`';
        }
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_COMEDOR)) {
            $modifiedColumns[':p' . $index++]  = '`CANTIDAD_COMEDOR`';
        }
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_SALA)) {
            $modifiedColumns[':p' . $index++]  = '`CANTIDAD_SALA`';
        }
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_COCINA)) {
            $modifiedColumns[':p' . $index++]  = '`CANTIDAD_COCINA`';
        }
        if ($this->isColumnModified(PropiedadPeer::DORMITORIO_SERVICIO)) {
            $modifiedColumns[':p' . $index++]  = '`DORMITORIO_SERVICIO`';
        }
        if ($this->isColumnModified(PropiedadPeer::ESTUDIO)) {
            $modifiedColumns[':p' . $index++]  = '`ESTUDIO`';
        }
        if ($this->isColumnModified(PropiedadPeer::CISTERNA)) {
            $modifiedColumns[':p' . $index++]  = '`CISTERNA`';
        }
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_JARDIN)) {
            $modifiedColumns[':p' . $index++]  = '`CANTIDAD_JARDIN`';
        }
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_PATIO)) {
            $modifiedColumns[':p' . $index++]  = '`CANTIDAD_PATIO`';
        }
        if ($this->isColumnModified(PropiedadPeer::LAVANDERIA)) {
            $modifiedColumns[':p' . $index++]  = '`LAVANDERIA`';
        }
        if ($this->isColumnModified(PropiedadPeer::ESTADO)) {
            $modifiedColumns[':p' . $index++]  = '`ESTADO`';
        }
        if ($this->isColumnModified(PropiedadPeer::AMENIDADES)) {
            $modifiedColumns[':p' . $index++]  = '`AMENIDADES`';
        }
        if ($this->isColumnModified(PropiedadPeer::MONEDA_ID)) {
            $modifiedColumns[':p' . $index++]  = '`MONEDA_ID`';
        }
        if ($this->isColumnModified(PropiedadPeer::PRECIO)) {
            $modifiedColumns[':p' . $index++]  = '`PRECIO`';
        }
        if ($this->isColumnModified(PropiedadPeer::NEGOCIABLE)) {
            $modifiedColumns[':p' . $index++]  = '`NEGOCIABLE`';
        }
        if ($this->isColumnModified(PropiedadPeer::INCLUYE_GASTOS_ESCRITURA)) {
            $modifiedColumns[':p' . $index++]  = '`INCLUYE_GASTOS_ESCRITURA`';
        }
        if ($this->isColumnModified(PropiedadPeer::ANIO_CONSTRUCCION)) {
            $modifiedColumns[':p' . $index++]  = '`ANIO_CONSTRUCCION`';
        }
        if ($this->isColumnModified(PropiedadPeer::MANTENIMIENTO_MENSUAL)) {
            $modifiedColumns[':p' . $index++]  = '`MANTENIMIENTO_MENSUAL`';
        }
        if ($this->isColumnModified(PropiedadPeer::IUSI_SEMESTRAL)) {
            $modifiedColumns[':p' . $index++]  = '`IUSI_SEMESTRAL`';
        }
        if ($this->isColumnModified(PropiedadPeer::VALOR_AVALUO)) {
            $modifiedColumns[':p' . $index++]  = '`VALOR_AVALUO`';
        }
        if ($this->isColumnModified(PropiedadPeer::MI_COMISION)) {
            $modifiedColumns[':p' . $index++]  = '`MI_COMISION`';
        }
        if ($this->isColumnModified(PropiedadPeer::COMISION_COMPARTIDA)) {
            $modifiedColumns[':p' . $index++]  = '`COMISION_COMPARTIDA`';
        }
        if ($this->isColumnModified(PropiedadPeer::NOMBRE_CLIENTE)) {
            $modifiedColumns[':p' . $index++]  = '`NOMBRE_CLIENTE`';
        }
        if ($this->isColumnModified(PropiedadPeer::CORREO_CLIENTE)) {
            $modifiedColumns[':p' . $index++]  = '`CORREO_CLIENTE`';
        }
        if ($this->isColumnModified(PropiedadPeer::TELEFONO_CLIENTE)) {
            $modifiedColumns[':p' . $index++]  = '`TELEFONO_CLIENTE`';
        }
        if ($this->isColumnModified(PropiedadPeer::DEPARTAMENTO_ID)) {
            $modifiedColumns[':p' . $index++]  = '`DEPARTAMENTO_ID`';
        }
        if ($this->isColumnModified(PropiedadPeer::MUNICIPIO_ID)) {
            $modifiedColumns[':p' . $index++]  = '`MUNICIPIO_ID`';
        }
        if ($this->isColumnModified(PropiedadPeer::ZONA)) {
            $modifiedColumns[':p' . $index++]  = '`ZONA`';
        }
        if ($this->isColumnModified(PropiedadPeer::CARRETERA_ID)) {
            $modifiedColumns[':p' . $index++]  = '`CARRETERA_ID`';
        }
        if ($this->isColumnModified(PropiedadPeer::KM)) {
            $modifiedColumns[':p' . $index++]  = '`KM`';
        }
        if ($this->isColumnModified(PropiedadPeer::DIRECCION)) {
            $modifiedColumns[':p' . $index++]  = '`DIRECCION`';
        }
        if ($this->isColumnModified(PropiedadPeer::SEGURIDAD)) {
            $modifiedColumns[':p' . $index++]  = '`SEGURIDAD`';
        }
        if ($this->isColumnModified(PropiedadPeer::ACCESOS)) {
            $modifiedColumns[':p' . $index++]  = '`ACCESOS`';
        }
        if ($this->isColumnModified(PropiedadPeer::AGUA)) {
            $modifiedColumns[':p' . $index++]  = '`AGUA`';
        }
        if ($this->isColumnModified(PropiedadPeer::TRANSPORTE_PUBLICO)) {
            $modifiedColumns[':p' . $index++]  = '`TRANSPORTE_PUBLICO`';
        }
        if ($this->isColumnModified(PropiedadPeer::TRANSITO_VEHICULAR)) {
            $modifiedColumns[':p' . $index++]  = '`TRANSITO_VEHICULAR`';
        }
        if ($this->isColumnModified(PropiedadPeer::COMUNIDADES_COLIDANTES)) {
            $modifiedColumns[':p' . $index++]  = '`COMUNIDADES_COLIDANTES`';
        }
        if ($this->isColumnModified(PropiedadPeer::AREAS_RECREACION)) {
            $modifiedColumns[':p' . $index++]  = '`AREAS_RECREACION`';
        }
        if ($this->isColumnModified(PropiedadPeer::FORMA_PAGO)) {
            $modifiedColumns[':p' . $index++]  = '`FORMA_PAGO`';
        }
        if ($this->isColumnModified(PropiedadPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(PropiedadPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }
        if ($this->isColumnModified(PropiedadPeer::CREATED_BY)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_BY`';
        }
        if ($this->isColumnModified(PropiedadPeer::UPDATED_BY)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_BY`';
        }
        if ($this->isColumnModified(PropiedadPeer::TIENE_LUZ)) {
            $modifiedColumns[':p' . $index++]  = '`TIENE_LUZ`';
        }
        if ($this->isColumnModified(PropiedadPeer::TIENE_AGUA)) {
            $modifiedColumns[':p' . $index++]  = '`TIENE_AGUA`';
        }
        if ($this->isColumnModified(PropiedadPeer::NIVELES)) {
            $modifiedColumns[':p' . $index++]  = '`NIVELES`';
        }
        if ($this->isColumnModified(PropiedadPeer::AREA)) {
            $modifiedColumns[':p' . $index++]  = '`AREA`';
        }
        if ($this->isColumnModified(PropiedadPeer::AREA_X)) {
            $modifiedColumns[':p' . $index++]  = '`AREA_X`';
        }
        if ($this->isColumnModified(PropiedadPeer::AREA_Y)) {
            $modifiedColumns[':p' . $index++]  = '`AREA_Y`';
        }

        $sql = sprintf(
            'INSERT INTO `propiedad` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`TIPO_OPERACION`':
                        $stmt->bindValue($identifier, $this->tipo_operacion, PDO::PARAM_STR);
                        break;
                    case '`TIPO_INMUEBLE`':
                        $stmt->bindValue($identifier, $this->tipo_inmueble, PDO::PARAM_STR);
                        break;
                    case '`CANTIDAD_HABITACION`':
                        $stmt->bindValue($identifier, $this->cantidad_habitacion, PDO::PARAM_INT);
                        break;
                    case '`CANTIDAD_BANIO`':
                        $stmt->bindValue($identifier, $this->cantidad_banio, PDO::PARAM_INT);
                        break;
                    case '`CANTIDAD_PARQUEO`':
                        $stmt->bindValue($identifier, $this->cantidad_parqueo, PDO::PARAM_INT);
                        break;
                    case '`CANTIDAD_COMEDOR`':
                        $stmt->bindValue($identifier, $this->cantidad_comedor, PDO::PARAM_INT);
                        break;
                    case '`CANTIDAD_SALA`':
                        $stmt->bindValue($identifier, $this->cantidad_sala, PDO::PARAM_INT);
                        break;
                    case '`CANTIDAD_COCINA`':
                        $stmt->bindValue($identifier, $this->cantidad_cocina, PDO::PARAM_INT);
                        break;
                    case '`DORMITORIO_SERVICIO`':
                        $stmt->bindValue($identifier, (int) $this->dormitorio_servicio, PDO::PARAM_INT);
                        break;
                    case '`ESTUDIO`':
                        $stmt->bindValue($identifier, (int) $this->estudio, PDO::PARAM_INT);
                        break;
                    case '`CISTERNA`':
                        $stmt->bindValue($identifier, (int) $this->cisterna, PDO::PARAM_INT);
                        break;
                    case '`CANTIDAD_JARDIN`':
                        $stmt->bindValue($identifier, $this->cantidad_jardin, PDO::PARAM_INT);
                        break;
                    case '`CANTIDAD_PATIO`':
                        $stmt->bindValue($identifier, $this->cantidad_patio, PDO::PARAM_INT);
                        break;
                    case '`LAVANDERIA`':
                        $stmt->bindValue($identifier, (int) $this->lavanderia, PDO::PARAM_INT);
                        break;
                    case '`ESTADO`':
                        $stmt->bindValue($identifier, $this->estado, PDO::PARAM_STR);
                        break;
                    case '`AMENIDADES`':
                        $stmt->bindValue($identifier, $this->amenidades, PDO::PARAM_STR);
                        break;
                    case '`MONEDA_ID`':
                        $stmt->bindValue($identifier, $this->moneda_id, PDO::PARAM_INT);
                        break;
                    case '`PRECIO`':
                        $stmt->bindValue($identifier, $this->precio, PDO::PARAM_STR);
                        break;
                    case '`NEGOCIABLE`':
                        $stmt->bindValue($identifier, (int) $this->negociable, PDO::PARAM_INT);
                        break;
                    case '`INCLUYE_GASTOS_ESCRITURA`':
                        $stmt->bindValue($identifier, (int) $this->incluye_gastos_escritura, PDO::PARAM_INT);
                        break;
                    case '`ANIO_CONSTRUCCION`':
                        $stmt->bindValue($identifier, $this->anio_construccion, PDO::PARAM_INT);
                        break;
                    case '`MANTENIMIENTO_MENSUAL`':
                        $stmt->bindValue($identifier, $this->mantenimiento_mensual, PDO::PARAM_STR);
                        break;
                    case '`IUSI_SEMESTRAL`':
                        $stmt->bindValue($identifier, $this->iusi_semestral, PDO::PARAM_STR);
                        break;
                    case '`VALOR_AVALUO`':
                        $stmt->bindValue($identifier, $this->valor_avaluo, PDO::PARAM_STR);
                        break;
                    case '`MI_COMISION`':
                        $stmt->bindValue($identifier, $this->mi_comision, PDO::PARAM_STR);
                        break;
                    case '`COMISION_COMPARTIDA`':
                        $stmt->bindValue($identifier, $this->comision_compartida, PDO::PARAM_STR);
                        break;
                    case '`NOMBRE_CLIENTE`':
                        $stmt->bindValue($identifier, $this->nombre_cliente, PDO::PARAM_STR);
                        break;
                    case '`CORREO_CLIENTE`':
                        $stmt->bindValue($identifier, $this->correo_cliente, PDO::PARAM_STR);
                        break;
                    case '`TELEFONO_CLIENTE`':
                        $stmt->bindValue($identifier, $this->telefono_cliente, PDO::PARAM_STR);
                        break;
                    case '`DEPARTAMENTO_ID`':
                        $stmt->bindValue($identifier, $this->departamento_id, PDO::PARAM_INT);
                        break;
                    case '`MUNICIPIO_ID`':
                        $stmt->bindValue($identifier, $this->municipio_id, PDO::PARAM_INT);
                        break;
                    case '`ZONA`':
                        $stmt->bindValue($identifier, $this->zona, PDO::PARAM_STR);
                        break;
                    case '`CARRETERA_ID`':
                        $stmt->bindValue($identifier, $this->carretera_id, PDO::PARAM_INT);
                        break;
                    case '`KM`':
                        $stmt->bindValue($identifier, $this->km, PDO::PARAM_STR);
                        break;
                    case '`DIRECCION`':
                        $stmt->bindValue($identifier, $this->direccion, PDO::PARAM_STR);
                        break;
                    case '`SEGURIDAD`':
                        $stmt->bindValue($identifier, $this->seguridad, PDO::PARAM_STR);
                        break;
                    case '`ACCESOS`':
                        $stmt->bindValue($identifier, $this->accesos, PDO::PARAM_STR);
                        break;
                    case '`AGUA`':
                        $stmt->bindValue($identifier, $this->agua, PDO::PARAM_STR);
                        break;
                    case '`TRANSPORTE_PUBLICO`':
                        $stmt->bindValue($identifier, $this->transporte_publico, PDO::PARAM_STR);
                        break;
                    case '`TRANSITO_VEHICULAR`':
                        $stmt->bindValue($identifier, $this->transito_vehicular, PDO::PARAM_STR);
                        break;
                    case '`COMUNIDADES_COLIDANTES`':
                        $stmt->bindValue($identifier, $this->comunidades_colidantes, PDO::PARAM_STR);
                        break;
                    case '`AREAS_RECREACION`':
                        $stmt->bindValue($identifier, $this->areas_recreacion, PDO::PARAM_STR);
                        break;
                    case '`FORMA_PAGO`':
                        $stmt->bindValue($identifier, $this->forma_pago, PDO::PARAM_STR);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                    case '`CREATED_BY`':
                        $stmt->bindValue($identifier, $this->created_by, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_BY`':
                        $stmt->bindValue($identifier, $this->updated_by, PDO::PARAM_STR);
                        break;
                    case '`TIENE_LUZ`':
                        $stmt->bindValue($identifier, (int) $this->tiene_luz, PDO::PARAM_INT);
                        break;
                    case '`TIENE_AGUA`':
                        $stmt->bindValue($identifier, (int) $this->tiene_agua, PDO::PARAM_INT);
                        break;
                    case '`NIVELES`':
                        $stmt->bindValue($identifier, $this->niveles, PDO::PARAM_INT);
                        break;
                    case '`AREA`':
                        $stmt->bindValue($identifier, $this->area, PDO::PARAM_STR);
                        break;
                    case '`AREA_X`':
                        $stmt->bindValue($identifier, $this->area_x, PDO::PARAM_STR);
                        break;
                    case '`AREA_Y`':
                        $stmt->bindValue($identifier, $this->area_y, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aMoneda !== null) {
                if (!$this->aMoneda->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aMoneda->getValidationFailures());
                }
            }

            if ($this->aDepartamento !== null) {
                if (!$this->aDepartamento->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aDepartamento->getValidationFailures());
                }
            }

            if ($this->aMunicipio !== null) {
                if (!$this->aMunicipio->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aMunicipio->getValidationFailures());
                }
            }

            if ($this->aCarretera !== null) {
                if (!$this->aCarretera->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aCarretera->getValidationFailures());
                }
            }


            if (($retval = PropiedadPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collPropiedadImagens !== null) {
                    foreach ($this->collPropiedadImagens as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = PropiedadPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getTipoOperacion();
                break;
            case 2:
                return $this->getTipoInmueble();
                break;
            case 3:
                return $this->getCantidadHabitacion();
                break;
            case 4:
                return $this->getCantidadBanio();
                break;
            case 5:
                return $this->getCantidadParqueo();
                break;
            case 6:
                return $this->getCantidadComedor();
                break;
            case 7:
                return $this->getCantidadSala();
                break;
            case 8:
                return $this->getCantidadCocina();
                break;
            case 9:
                return $this->getDormitorioServicio();
                break;
            case 10:
                return $this->getEstudio();
                break;
            case 11:
                return $this->getCisterna();
                break;
            case 12:
                return $this->getCantidadJardin();
                break;
            case 13:
                return $this->getCantidadPatio();
                break;
            case 14:
                return $this->getLavanderia();
                break;
            case 15:
                return $this->getEstado();
                break;
            case 16:
                return $this->getAmenidades();
                break;
            case 17:
                return $this->getMonedaId();
                break;
            case 18:
                return $this->getPrecio();
                break;
            case 19:
                return $this->getNegociable();
                break;
            case 20:
                return $this->getIncluyeGastosEscritura();
                break;
            case 21:
                return $this->getAnioConstruccion();
                break;
            case 22:
                return $this->getMantenimientoMensual();
                break;
            case 23:
                return $this->getIusiSemestral();
                break;
            case 24:
                return $this->getValorAvaluo();
                break;
            case 25:
                return $this->getMiComision();
                break;
            case 26:
                return $this->getComisionCompartida();
                break;
            case 27:
                return $this->getNombreCliente();
                break;
            case 28:
                return $this->getCorreoCliente();
                break;
            case 29:
                return $this->getTelefonoCliente();
                break;
            case 30:
                return $this->getDepartamentoId();
                break;
            case 31:
                return $this->getMunicipioId();
                break;
            case 32:
                return $this->getZona();
                break;
            case 33:
                return $this->getCarreteraId();
                break;
            case 34:
                return $this->getKm();
                break;
            case 35:
                return $this->getDireccion();
                break;
            case 36:
                return $this->getSeguridad();
                break;
            case 37:
                return $this->getAccesos();
                break;
            case 38:
                return $this->getAgua();
                break;
            case 39:
                return $this->getTransportePublico();
                break;
            case 40:
                return $this->getTransitoVehicular();
                break;
            case 41:
                return $this->getComunidadesColidantes();
                break;
            case 42:
                return $this->getAreasRecreacion();
                break;
            case 43:
                return $this->getFormaPago();
                break;
            case 44:
                return $this->getCreatedAt();
                break;
            case 45:
                return $this->getUpdatedAt();
                break;
            case 46:
                return $this->getCreatedBy();
                break;
            case 47:
                return $this->getUpdatedBy();
                break;
            case 48:
                return $this->getTieneLuz();
                break;
            case 49:
                return $this->getTieneAgua();
                break;
            case 50:
                return $this->getNiveles();
                break;
            case 51:
                return $this->getArea();
                break;
            case 52:
                return $this->getAreaX();
                break;
            case 53:
                return $this->getAreaY();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Propiedad'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Propiedad'][$this->getPrimaryKey()] = true;
        $keys = PropiedadPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getTipoOperacion(),
            $keys[2] => $this->getTipoInmueble(),
            $keys[3] => $this->getCantidadHabitacion(),
            $keys[4] => $this->getCantidadBanio(),
            $keys[5] => $this->getCantidadParqueo(),
            $keys[6] => $this->getCantidadComedor(),
            $keys[7] => $this->getCantidadSala(),
            $keys[8] => $this->getCantidadCocina(),
            $keys[9] => $this->getDormitorioServicio(),
            $keys[10] => $this->getEstudio(),
            $keys[11] => $this->getCisterna(),
            $keys[12] => $this->getCantidadJardin(),
            $keys[13] => $this->getCantidadPatio(),
            $keys[14] => $this->getLavanderia(),
            $keys[15] => $this->getEstado(),
            $keys[16] => $this->getAmenidades(),
            $keys[17] => $this->getMonedaId(),
            $keys[18] => $this->getPrecio(),
            $keys[19] => $this->getNegociable(),
            $keys[20] => $this->getIncluyeGastosEscritura(),
            $keys[21] => $this->getAnioConstruccion(),
            $keys[22] => $this->getMantenimientoMensual(),
            $keys[23] => $this->getIusiSemestral(),
            $keys[24] => $this->getValorAvaluo(),
            $keys[25] => $this->getMiComision(),
            $keys[26] => $this->getComisionCompartida(),
            $keys[27] => $this->getNombreCliente(),
            $keys[28] => $this->getCorreoCliente(),
            $keys[29] => $this->getTelefonoCliente(),
            $keys[30] => $this->getDepartamentoId(),
            $keys[31] => $this->getMunicipioId(),
            $keys[32] => $this->getZona(),
            $keys[33] => $this->getCarreteraId(),
            $keys[34] => $this->getKm(),
            $keys[35] => $this->getDireccion(),
            $keys[36] => $this->getSeguridad(),
            $keys[37] => $this->getAccesos(),
            $keys[38] => $this->getAgua(),
            $keys[39] => $this->getTransportePublico(),
            $keys[40] => $this->getTransitoVehicular(),
            $keys[41] => $this->getComunidadesColidantes(),
            $keys[42] => $this->getAreasRecreacion(),
            $keys[43] => $this->getFormaPago(),
            $keys[44] => $this->getCreatedAt(),
            $keys[45] => $this->getUpdatedAt(),
            $keys[46] => $this->getCreatedBy(),
            $keys[47] => $this->getUpdatedBy(),
            $keys[48] => $this->getTieneLuz(),
            $keys[49] => $this->getTieneAgua(),
            $keys[50] => $this->getNiveles(),
            $keys[51] => $this->getArea(),
            $keys[52] => $this->getAreaX(),
            $keys[53] => $this->getAreaY(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->aMoneda) {
                $result['Moneda'] = $this->aMoneda->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aDepartamento) {
                $result['Departamento'] = $this->aDepartamento->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aMunicipio) {
                $result['Municipio'] = $this->aMunicipio->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aCarretera) {
                $result['Carretera'] = $this->aCarretera->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->collPropiedadImagens) {
                $result['PropiedadImagens'] = $this->collPropiedadImagens->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = PropiedadPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setTipoOperacion($value);
                break;
            case 2:
                $this->setTipoInmueble($value);
                break;
            case 3:
                $this->setCantidadHabitacion($value);
                break;
            case 4:
                $this->setCantidadBanio($value);
                break;
            case 5:
                $this->setCantidadParqueo($value);
                break;
            case 6:
                $this->setCantidadComedor($value);
                break;
            case 7:
                $this->setCantidadSala($value);
                break;
            case 8:
                $this->setCantidadCocina($value);
                break;
            case 9:
                $this->setDormitorioServicio($value);
                break;
            case 10:
                $this->setEstudio($value);
                break;
            case 11:
                $this->setCisterna($value);
                break;
            case 12:
                $this->setCantidadJardin($value);
                break;
            case 13:
                $this->setCantidadPatio($value);
                break;
            case 14:
                $this->setLavanderia($value);
                break;
            case 15:
                $this->setEstado($value);
                break;
            case 16:
                $this->setAmenidades($value);
                break;
            case 17:
                $this->setMonedaId($value);
                break;
            case 18:
                $this->setPrecio($value);
                break;
            case 19:
                $this->setNegociable($value);
                break;
            case 20:
                $this->setIncluyeGastosEscritura($value);
                break;
            case 21:
                $this->setAnioConstruccion($value);
                break;
            case 22:
                $this->setMantenimientoMensual($value);
                break;
            case 23:
                $this->setIusiSemestral($value);
                break;
            case 24:
                $this->setValorAvaluo($value);
                break;
            case 25:
                $this->setMiComision($value);
                break;
            case 26:
                $this->setComisionCompartida($value);
                break;
            case 27:
                $this->setNombreCliente($value);
                break;
            case 28:
                $this->setCorreoCliente($value);
                break;
            case 29:
                $this->setTelefonoCliente($value);
                break;
            case 30:
                $this->setDepartamentoId($value);
                break;
            case 31:
                $this->setMunicipioId($value);
                break;
            case 32:
                $this->setZona($value);
                break;
            case 33:
                $this->setCarreteraId($value);
                break;
            case 34:
                $this->setKm($value);
                break;
            case 35:
                $this->setDireccion($value);
                break;
            case 36:
                $this->setSeguridad($value);
                break;
            case 37:
                $this->setAccesos($value);
                break;
            case 38:
                $this->setAgua($value);
                break;
            case 39:
                $this->setTransportePublico($value);
                break;
            case 40:
                $this->setTransitoVehicular($value);
                break;
            case 41:
                $this->setComunidadesColidantes($value);
                break;
            case 42:
                $this->setAreasRecreacion($value);
                break;
            case 43:
                $this->setFormaPago($value);
                break;
            case 44:
                $this->setCreatedAt($value);
                break;
            case 45:
                $this->setUpdatedAt($value);
                break;
            case 46:
                $this->setCreatedBy($value);
                break;
            case 47:
                $this->setUpdatedBy($value);
                break;
            case 48:
                $this->setTieneLuz($value);
                break;
            case 49:
                $this->setTieneAgua($value);
                break;
            case 50:
                $this->setNiveles($value);
                break;
            case 51:
                $this->setArea($value);
                break;
            case 52:
                $this->setAreaX($value);
                break;
            case 53:
                $this->setAreaY($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = PropiedadPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setTipoOperacion($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setTipoInmueble($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setCantidadHabitacion($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setCantidadBanio($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setCantidadParqueo($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setCantidadComedor($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setCantidadSala($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setCantidadCocina($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setDormitorioServicio($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setEstudio($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setCisterna($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setCantidadJardin($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setCantidadPatio($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setLavanderia($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setEstado($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setAmenidades($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setMonedaId($arr[$keys[17]]);
        if (array_key_exists($keys[18], $arr)) $this->setPrecio($arr[$keys[18]]);
        if (array_key_exists($keys[19], $arr)) $this->setNegociable($arr[$keys[19]]);
        if (array_key_exists($keys[20], $arr)) $this->setIncluyeGastosEscritura($arr[$keys[20]]);
        if (array_key_exists($keys[21], $arr)) $this->setAnioConstruccion($arr[$keys[21]]);
        if (array_key_exists($keys[22], $arr)) $this->setMantenimientoMensual($arr[$keys[22]]);
        if (array_key_exists($keys[23], $arr)) $this->setIusiSemestral($arr[$keys[23]]);
        if (array_key_exists($keys[24], $arr)) $this->setValorAvaluo($arr[$keys[24]]);
        if (array_key_exists($keys[25], $arr)) $this->setMiComision($arr[$keys[25]]);
        if (array_key_exists($keys[26], $arr)) $this->setComisionCompartida($arr[$keys[26]]);
        if (array_key_exists($keys[27], $arr)) $this->setNombreCliente($arr[$keys[27]]);
        if (array_key_exists($keys[28], $arr)) $this->setCorreoCliente($arr[$keys[28]]);
        if (array_key_exists($keys[29], $arr)) $this->setTelefonoCliente($arr[$keys[29]]);
        if (array_key_exists($keys[30], $arr)) $this->setDepartamentoId($arr[$keys[30]]);
        if (array_key_exists($keys[31], $arr)) $this->setMunicipioId($arr[$keys[31]]);
        if (array_key_exists($keys[32], $arr)) $this->setZona($arr[$keys[32]]);
        if (array_key_exists($keys[33], $arr)) $this->setCarreteraId($arr[$keys[33]]);
        if (array_key_exists($keys[34], $arr)) $this->setKm($arr[$keys[34]]);
        if (array_key_exists($keys[35], $arr)) $this->setDireccion($arr[$keys[35]]);
        if (array_key_exists($keys[36], $arr)) $this->setSeguridad($arr[$keys[36]]);
        if (array_key_exists($keys[37], $arr)) $this->setAccesos($arr[$keys[37]]);
        if (array_key_exists($keys[38], $arr)) $this->setAgua($arr[$keys[38]]);
        if (array_key_exists($keys[39], $arr)) $this->setTransportePublico($arr[$keys[39]]);
        if (array_key_exists($keys[40], $arr)) $this->setTransitoVehicular($arr[$keys[40]]);
        if (array_key_exists($keys[41], $arr)) $this->setComunidadesColidantes($arr[$keys[41]]);
        if (array_key_exists($keys[42], $arr)) $this->setAreasRecreacion($arr[$keys[42]]);
        if (array_key_exists($keys[43], $arr)) $this->setFormaPago($arr[$keys[43]]);
        if (array_key_exists($keys[44], $arr)) $this->setCreatedAt($arr[$keys[44]]);
        if (array_key_exists($keys[45], $arr)) $this->setUpdatedAt($arr[$keys[45]]);
        if (array_key_exists($keys[46], $arr)) $this->setCreatedBy($arr[$keys[46]]);
        if (array_key_exists($keys[47], $arr)) $this->setUpdatedBy($arr[$keys[47]]);
        if (array_key_exists($keys[48], $arr)) $this->setTieneLuz($arr[$keys[48]]);
        if (array_key_exists($keys[49], $arr)) $this->setTieneAgua($arr[$keys[49]]);
        if (array_key_exists($keys[50], $arr)) $this->setNiveles($arr[$keys[50]]);
        if (array_key_exists($keys[51], $arr)) $this->setArea($arr[$keys[51]]);
        if (array_key_exists($keys[52], $arr)) $this->setAreaX($arr[$keys[52]]);
        if (array_key_exists($keys[53], $arr)) $this->setAreaY($arr[$keys[53]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(PropiedadPeer::DATABASE_NAME);

        if ($this->isColumnModified(PropiedadPeer::ID)) $criteria->add(PropiedadPeer::ID, $this->id);
        if ($this->isColumnModified(PropiedadPeer::TIPO_OPERACION)) $criteria->add(PropiedadPeer::TIPO_OPERACION, $this->tipo_operacion);
        if ($this->isColumnModified(PropiedadPeer::TIPO_INMUEBLE)) $criteria->add(PropiedadPeer::TIPO_INMUEBLE, $this->tipo_inmueble);
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_HABITACION)) $criteria->add(PropiedadPeer::CANTIDAD_HABITACION, $this->cantidad_habitacion);
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_BANIO)) $criteria->add(PropiedadPeer::CANTIDAD_BANIO, $this->cantidad_banio);
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_PARQUEO)) $criteria->add(PropiedadPeer::CANTIDAD_PARQUEO, $this->cantidad_parqueo);
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_COMEDOR)) $criteria->add(PropiedadPeer::CANTIDAD_COMEDOR, $this->cantidad_comedor);
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_SALA)) $criteria->add(PropiedadPeer::CANTIDAD_SALA, $this->cantidad_sala);
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_COCINA)) $criteria->add(PropiedadPeer::CANTIDAD_COCINA, $this->cantidad_cocina);
        if ($this->isColumnModified(PropiedadPeer::DORMITORIO_SERVICIO)) $criteria->add(PropiedadPeer::DORMITORIO_SERVICIO, $this->dormitorio_servicio);
        if ($this->isColumnModified(PropiedadPeer::ESTUDIO)) $criteria->add(PropiedadPeer::ESTUDIO, $this->estudio);
        if ($this->isColumnModified(PropiedadPeer::CISTERNA)) $criteria->add(PropiedadPeer::CISTERNA, $this->cisterna);
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_JARDIN)) $criteria->add(PropiedadPeer::CANTIDAD_JARDIN, $this->cantidad_jardin);
        if ($this->isColumnModified(PropiedadPeer::CANTIDAD_PATIO)) $criteria->add(PropiedadPeer::CANTIDAD_PATIO, $this->cantidad_patio);
        if ($this->isColumnModified(PropiedadPeer::LAVANDERIA)) $criteria->add(PropiedadPeer::LAVANDERIA, $this->lavanderia);
        if ($this->isColumnModified(PropiedadPeer::ESTADO)) $criteria->add(PropiedadPeer::ESTADO, $this->estado);
        if ($this->isColumnModified(PropiedadPeer::AMENIDADES)) $criteria->add(PropiedadPeer::AMENIDADES, $this->amenidades);
        if ($this->isColumnModified(PropiedadPeer::MONEDA_ID)) $criteria->add(PropiedadPeer::MONEDA_ID, $this->moneda_id);
        if ($this->isColumnModified(PropiedadPeer::PRECIO)) $criteria->add(PropiedadPeer::PRECIO, $this->precio);
        if ($this->isColumnModified(PropiedadPeer::NEGOCIABLE)) $criteria->add(PropiedadPeer::NEGOCIABLE, $this->negociable);
        if ($this->isColumnModified(PropiedadPeer::INCLUYE_GASTOS_ESCRITURA)) $criteria->add(PropiedadPeer::INCLUYE_GASTOS_ESCRITURA, $this->incluye_gastos_escritura);
        if ($this->isColumnModified(PropiedadPeer::ANIO_CONSTRUCCION)) $criteria->add(PropiedadPeer::ANIO_CONSTRUCCION, $this->anio_construccion);
        if ($this->isColumnModified(PropiedadPeer::MANTENIMIENTO_MENSUAL)) $criteria->add(PropiedadPeer::MANTENIMIENTO_MENSUAL, $this->mantenimiento_mensual);
        if ($this->isColumnModified(PropiedadPeer::IUSI_SEMESTRAL)) $criteria->add(PropiedadPeer::IUSI_SEMESTRAL, $this->iusi_semestral);
        if ($this->isColumnModified(PropiedadPeer::VALOR_AVALUO)) $criteria->add(PropiedadPeer::VALOR_AVALUO, $this->valor_avaluo);
        if ($this->isColumnModified(PropiedadPeer::MI_COMISION)) $criteria->add(PropiedadPeer::MI_COMISION, $this->mi_comision);
        if ($this->isColumnModified(PropiedadPeer::COMISION_COMPARTIDA)) $criteria->add(PropiedadPeer::COMISION_COMPARTIDA, $this->comision_compartida);
        if ($this->isColumnModified(PropiedadPeer::NOMBRE_CLIENTE)) $criteria->add(PropiedadPeer::NOMBRE_CLIENTE, $this->nombre_cliente);
        if ($this->isColumnModified(PropiedadPeer::CORREO_CLIENTE)) $criteria->add(PropiedadPeer::CORREO_CLIENTE, $this->correo_cliente);
        if ($this->isColumnModified(PropiedadPeer::TELEFONO_CLIENTE)) $criteria->add(PropiedadPeer::TELEFONO_CLIENTE, $this->telefono_cliente);
        if ($this->isColumnModified(PropiedadPeer::DEPARTAMENTO_ID)) $criteria->add(PropiedadPeer::DEPARTAMENTO_ID, $this->departamento_id);
        if ($this->isColumnModified(PropiedadPeer::MUNICIPIO_ID)) $criteria->add(PropiedadPeer::MUNICIPIO_ID, $this->municipio_id);
        if ($this->isColumnModified(PropiedadPeer::ZONA)) $criteria->add(PropiedadPeer::ZONA, $this->zona);
        if ($this->isColumnModified(PropiedadPeer::CARRETERA_ID)) $criteria->add(PropiedadPeer::CARRETERA_ID, $this->carretera_id);
        if ($this->isColumnModified(PropiedadPeer::KM)) $criteria->add(PropiedadPeer::KM, $this->km);
        if ($this->isColumnModified(PropiedadPeer::DIRECCION)) $criteria->add(PropiedadPeer::DIRECCION, $this->direccion);
        if ($this->isColumnModified(PropiedadPeer::SEGURIDAD)) $criteria->add(PropiedadPeer::SEGURIDAD, $this->seguridad);
        if ($this->isColumnModified(PropiedadPeer::ACCESOS)) $criteria->add(PropiedadPeer::ACCESOS, $this->accesos);
        if ($this->isColumnModified(PropiedadPeer::AGUA)) $criteria->add(PropiedadPeer::AGUA, $this->agua);
        if ($this->isColumnModified(PropiedadPeer::TRANSPORTE_PUBLICO)) $criteria->add(PropiedadPeer::TRANSPORTE_PUBLICO, $this->transporte_publico);
        if ($this->isColumnModified(PropiedadPeer::TRANSITO_VEHICULAR)) $criteria->add(PropiedadPeer::TRANSITO_VEHICULAR, $this->transito_vehicular);
        if ($this->isColumnModified(PropiedadPeer::COMUNIDADES_COLIDANTES)) $criteria->add(PropiedadPeer::COMUNIDADES_COLIDANTES, $this->comunidades_colidantes);
        if ($this->isColumnModified(PropiedadPeer::AREAS_RECREACION)) $criteria->add(PropiedadPeer::AREAS_RECREACION, $this->areas_recreacion);
        if ($this->isColumnModified(PropiedadPeer::FORMA_PAGO)) $criteria->add(PropiedadPeer::FORMA_PAGO, $this->forma_pago);
        if ($this->isColumnModified(PropiedadPeer::CREATED_AT)) $criteria->add(PropiedadPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(PropiedadPeer::UPDATED_AT)) $criteria->add(PropiedadPeer::UPDATED_AT, $this->updated_at);
        if ($this->isColumnModified(PropiedadPeer::CREATED_BY)) $criteria->add(PropiedadPeer::CREATED_BY, $this->created_by);
        if ($this->isColumnModified(PropiedadPeer::UPDATED_BY)) $criteria->add(PropiedadPeer::UPDATED_BY, $this->updated_by);
        if ($this->isColumnModified(PropiedadPeer::TIENE_LUZ)) $criteria->add(PropiedadPeer::TIENE_LUZ, $this->tiene_luz);
        if ($this->isColumnModified(PropiedadPeer::TIENE_AGUA)) $criteria->add(PropiedadPeer::TIENE_AGUA, $this->tiene_agua);
        if ($this->isColumnModified(PropiedadPeer::NIVELES)) $criteria->add(PropiedadPeer::NIVELES, $this->niveles);
        if ($this->isColumnModified(PropiedadPeer::AREA)) $criteria->add(PropiedadPeer::AREA, $this->area);
        if ($this->isColumnModified(PropiedadPeer::AREA_X)) $criteria->add(PropiedadPeer::AREA_X, $this->area_x);
        if ($this->isColumnModified(PropiedadPeer::AREA_Y)) $criteria->add(PropiedadPeer::AREA_Y, $this->area_y);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(PropiedadPeer::DATABASE_NAME);
        $criteria->add(PropiedadPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Propiedad (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setTipoOperacion($this->getTipoOperacion());
        $copyObj->setTipoInmueble($this->getTipoInmueble());
        $copyObj->setCantidadHabitacion($this->getCantidadHabitacion());
        $copyObj->setCantidadBanio($this->getCantidadBanio());
        $copyObj->setCantidadParqueo($this->getCantidadParqueo());
        $copyObj->setCantidadComedor($this->getCantidadComedor());
        $copyObj->setCantidadSala($this->getCantidadSala());
        $copyObj->setCantidadCocina($this->getCantidadCocina());
        $copyObj->setDormitorioServicio($this->getDormitorioServicio());
        $copyObj->setEstudio($this->getEstudio());
        $copyObj->setCisterna($this->getCisterna());
        $copyObj->setCantidadJardin($this->getCantidadJardin());
        $copyObj->setCantidadPatio($this->getCantidadPatio());
        $copyObj->setLavanderia($this->getLavanderia());
        $copyObj->setEstado($this->getEstado());
        $copyObj->setAmenidades($this->getAmenidades());
        $copyObj->setMonedaId($this->getMonedaId());
        $copyObj->setPrecio($this->getPrecio());
        $copyObj->setNegociable($this->getNegociable());
        $copyObj->setIncluyeGastosEscritura($this->getIncluyeGastosEscritura());
        $copyObj->setAnioConstruccion($this->getAnioConstruccion());
        $copyObj->setMantenimientoMensual($this->getMantenimientoMensual());
        $copyObj->setIusiSemestral($this->getIusiSemestral());
        $copyObj->setValorAvaluo($this->getValorAvaluo());
        $copyObj->setMiComision($this->getMiComision());
        $copyObj->setComisionCompartida($this->getComisionCompartida());
        $copyObj->setNombreCliente($this->getNombreCliente());
        $copyObj->setCorreoCliente($this->getCorreoCliente());
        $copyObj->setTelefonoCliente($this->getTelefonoCliente());
        $copyObj->setDepartamentoId($this->getDepartamentoId());
        $copyObj->setMunicipioId($this->getMunicipioId());
        $copyObj->setZona($this->getZona());
        $copyObj->setCarreteraId($this->getCarreteraId());
        $copyObj->setKm($this->getKm());
        $copyObj->setDireccion($this->getDireccion());
        $copyObj->setSeguridad($this->getSeguridad());
        $copyObj->setAccesos($this->getAccesos());
        $copyObj->setAgua($this->getAgua());
        $copyObj->setTransportePublico($this->getTransportePublico());
        $copyObj->setTransitoVehicular($this->getTransitoVehicular());
        $copyObj->setComunidadesColidantes($this->getComunidadesColidantes());
        $copyObj->setAreasRecreacion($this->getAreasRecreacion());
        $copyObj->setFormaPago($this->getFormaPago());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        $copyObj->setCreatedBy($this->getCreatedBy());
        $copyObj->setUpdatedBy($this->getUpdatedBy());
        $copyObj->setTieneLuz($this->getTieneLuz());
        $copyObj->setTieneAgua($this->getTieneAgua());
        $copyObj->setNiveles($this->getNiveles());
        $copyObj->setArea($this->getArea());
        $copyObj->setAreaX($this->getAreaX());
        $copyObj->setAreaY($this->getAreaY());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getPropiedadImagens() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addPropiedadImagen($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Propiedad Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return PropiedadPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new PropiedadPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a Moneda object.
     *
     * @param             Moneda $v
     * @return Propiedad The current object (for fluent API support)
     * @throws PropelException
     */
    public function setMoneda(Moneda $v = null)
    {
        if ($v === null) {
            $this->setMonedaId(NULL);
        } else {
            $this->setMonedaId($v->getId());
        }

        $this->aMoneda = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Moneda object, it will not be re-added.
        if ($v !== null) {
            $v->addPropiedad($this);
        }


        return $this;
    }


    /**
     * Get the associated Moneda object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Moneda The associated Moneda object.
     * @throws PropelException
     */
    public function getMoneda(PropelPDO $con = null)
    {
        if ($this->aMoneda === null && ($this->moneda_id !== null)) {
            $this->aMoneda = MonedaQuery::create()->findPk($this->moneda_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aMoneda->addPropiedads($this);
             */
        }

        return $this->aMoneda;
    }

    /**
     * Declares an association between this object and a Departamento object.
     *
     * @param             Departamento $v
     * @return Propiedad The current object (for fluent API support)
     * @throws PropelException
     */
    public function setDepartamento(Departamento $v = null)
    {
        if ($v === null) {
            $this->setDepartamentoId(NULL);
        } else {
            $this->setDepartamentoId($v->getId());
        }

        $this->aDepartamento = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Departamento object, it will not be re-added.
        if ($v !== null) {
            $v->addPropiedad($this);
        }


        return $this;
    }


    /**
     * Get the associated Departamento object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Departamento The associated Departamento object.
     * @throws PropelException
     */
    public function getDepartamento(PropelPDO $con = null)
    {
        if ($this->aDepartamento === null && ($this->departamento_id !== null)) {
            $this->aDepartamento = DepartamentoQuery::create()->findPk($this->departamento_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aDepartamento->addPropiedads($this);
             */
        }

        return $this->aDepartamento;
    }

    /**
     * Declares an association between this object and a Municipio object.
     *
     * @param             Municipio $v
     * @return Propiedad The current object (for fluent API support)
     * @throws PropelException
     */
    public function setMunicipio(Municipio $v = null)
    {
        if ($v === null) {
            $this->setMunicipioId(NULL);
        } else {
            $this->setMunicipioId($v->getId());
        }

        $this->aMunicipio = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Municipio object, it will not be re-added.
        if ($v !== null) {
            $v->addPropiedad($this);
        }


        return $this;
    }


    /**
     * Get the associated Municipio object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Municipio The associated Municipio object.
     * @throws PropelException
     */
    public function getMunicipio(PropelPDO $con = null)
    {
        if ($this->aMunicipio === null && ($this->municipio_id !== null)) {
            $this->aMunicipio = MunicipioQuery::create()->findPk($this->municipio_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aMunicipio->addPropiedads($this);
             */
        }

        return $this->aMunicipio;
    }

    /**
     * Declares an association between this object and a Carretera object.
     *
     * @param             Carretera $v
     * @return Propiedad The current object (for fluent API support)
     * @throws PropelException
     */
    public function setCarretera(Carretera $v = null)
    {
        if ($v === null) {
            $this->setCarreteraId(NULL);
        } else {
            $this->setCarreteraId($v->getId());
        }

        $this->aCarretera = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Carretera object, it will not be re-added.
        if ($v !== null) {
            $v->addPropiedad($this);
        }


        return $this;
    }


    /**
     * Get the associated Carretera object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Carretera The associated Carretera object.
     * @throws PropelException
     */
    public function getCarretera(PropelPDO $con = null)
    {
        if ($this->aCarretera === null && ($this->carretera_id !== null)) {
            $this->aCarretera = CarreteraQuery::create()->findPk($this->carretera_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aCarretera->addPropiedads($this);
             */
        }

        return $this->aCarretera;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('PropiedadImagen' == $relationName) {
            $this->initPropiedadImagens();
        }
    }

    /**
     * Clears out the collPropiedadImagens collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addPropiedadImagens()
     */
    public function clearPropiedadImagens()
    {
        $this->collPropiedadImagens = null; // important to set this to null since that means it is uninitialized
        $this->collPropiedadImagensPartial = null;
    }

    /**
     * reset is the collPropiedadImagens collection loaded partially
     *
     * @return void
     */
    public function resetPartialPropiedadImagens($v = true)
    {
        $this->collPropiedadImagensPartial = $v;
    }

    /**
     * Initializes the collPropiedadImagens collection.
     *
     * By default this just sets the collPropiedadImagens collection to an empty array (like clearcollPropiedadImagens());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initPropiedadImagens($overrideExisting = true)
    {
        if (null !== $this->collPropiedadImagens && !$overrideExisting) {
            return;
        }
        $this->collPropiedadImagens = new PropelObjectCollection();
        $this->collPropiedadImagens->setModel('PropiedadImagen');
    }

    /**
     * Gets an array of PropiedadImagen objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Propiedad is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|PropiedadImagen[] List of PropiedadImagen objects
     * @throws PropelException
     */
    public function getPropiedadImagens($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collPropiedadImagensPartial && !$this->isNew();
        if (null === $this->collPropiedadImagens || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collPropiedadImagens) {
                // return empty collection
                $this->initPropiedadImagens();
            } else {
                $collPropiedadImagens = PropiedadImagenQuery::create(null, $criteria)
                    ->filterByPropiedad($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collPropiedadImagensPartial && count($collPropiedadImagens)) {
                      $this->initPropiedadImagens(false);

                      foreach($collPropiedadImagens as $obj) {
                        if (false == $this->collPropiedadImagens->contains($obj)) {
                          $this->collPropiedadImagens->append($obj);
                        }
                      }

                      $this->collPropiedadImagensPartial = true;
                    }

                    return $collPropiedadImagens;
                }

                if($partial && $this->collPropiedadImagens) {
                    foreach($this->collPropiedadImagens as $obj) {
                        if($obj->isNew()) {
                            $collPropiedadImagens[] = $obj;
                        }
                    }
                }

                $this->collPropiedadImagens = $collPropiedadImagens;
                $this->collPropiedadImagensPartial = false;
            }
        }

        return $this->collPropiedadImagens;
    }

    /**
     * Sets a collection of PropiedadImagen objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $propiedadImagens A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setPropiedadImagens(PropelCollection $propiedadImagens, PropelPDO $con = null)
    {
        $this->propiedadImagensScheduledForDeletion = $this->getPropiedadImagens(new Criteria(), $con)->diff($propiedadImagens);

        foreach ($this->propiedadImagensScheduledForDeletion as $propiedadImagenRemoved) {
            $propiedadImagenRemoved->setPropiedad(null);
        }

        $this->collPropiedadImagens = null;
        foreach ($propiedadImagens as $propiedadImagen) {
            $this->addPropiedadImagen($propiedadImagen);
        }

        $this->collPropiedadImagens = $propiedadImagens;
        $this->collPropiedadImagensPartial = false;
    }

    /**
     * Returns the number of related PropiedadImagen objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related PropiedadImagen objects.
     * @throws PropelException
     */
    public function countPropiedadImagens(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collPropiedadImagensPartial && !$this->isNew();
        if (null === $this->collPropiedadImagens || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collPropiedadImagens) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getPropiedadImagens());
                }
                $query = PropiedadImagenQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByPropiedad($this)
                    ->count($con);
            }
        } else {
            return count($this->collPropiedadImagens);
        }
    }

    /**
     * Method called to associate a PropiedadImagen object to this object
     * through the PropiedadImagen foreign key attribute.
     *
     * @param    PropiedadImagen $l PropiedadImagen
     * @return Propiedad The current object (for fluent API support)
     */
    public function addPropiedadImagen(PropiedadImagen $l)
    {
        if ($this->collPropiedadImagens === null) {
            $this->initPropiedadImagens();
            $this->collPropiedadImagensPartial = true;
        }
        if (!$this->collPropiedadImagens->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddPropiedadImagen($l);
        }

        return $this;
    }

    /**
     * @param	PropiedadImagen $propiedadImagen The propiedadImagen object to add.
     */
    protected function doAddPropiedadImagen($propiedadImagen)
    {
        $this->collPropiedadImagens[]= $propiedadImagen;
        $propiedadImagen->setPropiedad($this);
    }

    /**
     * @param	PropiedadImagen $propiedadImagen The propiedadImagen object to remove.
     */
    public function removePropiedadImagen($propiedadImagen)
    {
        if ($this->getPropiedadImagens()->contains($propiedadImagen)) {
            $this->collPropiedadImagens->remove($this->collPropiedadImagens->search($propiedadImagen));
            if (null === $this->propiedadImagensScheduledForDeletion) {
                $this->propiedadImagensScheduledForDeletion = clone $this->collPropiedadImagens;
                $this->propiedadImagensScheduledForDeletion->clear();
            }
            $this->propiedadImagensScheduledForDeletion[]= $propiedadImagen;
            $propiedadImagen->setPropiedad(null);
        }
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->tipo_operacion = null;
        $this->tipo_inmueble = null;
        $this->cantidad_habitacion = null;
        $this->cantidad_banio = null;
        $this->cantidad_parqueo = null;
        $this->cantidad_comedor = null;
        $this->cantidad_sala = null;
        $this->cantidad_cocina = null;
        $this->dormitorio_servicio = null;
        $this->estudio = null;
        $this->cisterna = null;
        $this->cantidad_jardin = null;
        $this->cantidad_patio = null;
        $this->lavanderia = null;
        $this->estado = null;
        $this->amenidades = null;
        $this->moneda_id = null;
        $this->precio = null;
        $this->negociable = null;
        $this->incluye_gastos_escritura = null;
        $this->anio_construccion = null;
        $this->mantenimiento_mensual = null;
        $this->iusi_semestral = null;
        $this->valor_avaluo = null;
        $this->mi_comision = null;
        $this->comision_compartida = null;
        $this->nombre_cliente = null;
        $this->correo_cliente = null;
        $this->telefono_cliente = null;
        $this->departamento_id = null;
        $this->municipio_id = null;
        $this->zona = null;
        $this->carretera_id = null;
        $this->km = null;
        $this->direccion = null;
        $this->seguridad = null;
        $this->accesos = null;
        $this->agua = null;
        $this->transporte_publico = null;
        $this->transito_vehicular = null;
        $this->comunidades_colidantes = null;
        $this->areas_recreacion = null;
        $this->forma_pago = null;
        $this->created_at = null;
        $this->updated_at = null;
        $this->created_by = null;
        $this->updated_by = null;
        $this->tiene_luz = null;
        $this->tiene_agua = null;
        $this->niveles = null;
        $this->area = null;
        $this->area_x = null;
        $this->area_y = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->collPropiedadImagens) {
                foreach ($this->collPropiedadImagens as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->collPropiedadImagens instanceof PropelCollection) {
            $this->collPropiedadImagens->clearIterator();
        }
        $this->collPropiedadImagens = null;
        $this->aMoneda = null;
        $this->aDepartamento = null;
        $this->aMunicipio = null;
        $this->aCarretera = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(PropiedadPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BasePropiedad:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
